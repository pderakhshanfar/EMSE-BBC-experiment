/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:51:22 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.InputAccessor;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharConversionException;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree((Reader) stringReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertNotNull(jsonNode0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)54;
      try { 
        objectReader1.readValues(byteArray0, 1, (int) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"(\u0001\u0002\u0001\u00006\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.withoutAttribute((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfigBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0._bindAsTree(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertNotNull(mapType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isAbstract());
      assertEquals(2, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertNotNull(referenceType1);
      
      // Undeclared exception!
      try { 
        objectReader0.forType((JavaType) referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      MappingIterator<ArrayType> mappingIterator0 = objectReader0.readValues((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
      
      MappingIterator<FilteringParserDelegate> mappingIterator1 = objectReader0.readValues("");
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*&X:M");
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MatchStrength matchStrength0 = MatchStrength.FULL_MATCH;
      assertEquals(MatchStrength.FULL_MATCH, matchStrength0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, matchStrength0, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      StringReader stringReader0 = new StringReader(".xU#0oTrA/Xm_EZ6");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'd';
      charArray0[2] = '}';
      String string0 = charsToNameCanonicalizer0.findSymbol(charArray0, 0, (-4688), 2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertEquals("", string0);
      assertEquals(7, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertArrayEquals(new char[] {'{', 'd', '}', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(string0);
      
      charArray0[3] = 'h';
      charArray0[4] = '=';
      charArray0[5] = 'r';
      Class<Object> class0 = Object.class;
      MutableConfigOverride mutableConfigOverride0 = objectMapper0.configOverride(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(mutableConfigOverride0.getMergeable());
      assertNull(mutableConfigOverride0.getIsIgnoredType());
      assertNotNull(mutableConfigOverride0);
      
      charArray0[6] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4688), stringReader0, objectMapper0, charsToNameCanonicalizer1, charArray0, 1, 0, true);
      assertEquals(7, charArray0.length);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertArrayEquals(new char[] {'{', 'd', '}', 'h', '=', 'r', '\\'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals((-4688), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('.' (code 46)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.format.MatchStrength); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FloatNode floatNode0 = new FloatNode((-3906.04F));
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3906L), floatNode0.longValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(0, floatNode0.size());
      assertEquals((-3906), floatNode0.intValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isDouble());
      assertEquals((-3906.04F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short) (-3906), floatNode0.shortValue());
      assertEquals((-3906.0400390625), floatNode0.doubleValue(), 0.01);
      assertNotNull(floatNode0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      boolean boolean0 = false;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-3906L), floatNode0.longValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals(0, floatNode0.size());
      assertEquals((-3906), floatNode0.intValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloat());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isDouble());
      assertEquals((-3906.04F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short) (-3906), floatNode0.shortValue());
      assertEquals((-3906.0400390625), floatNode0.doubleValue(), 0.01);
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader1._bindAndClose(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FloatNode floatNode0 = FloatNode.valueOf(0.75F);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToLong());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = new FloatNode((-3906.04F));
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertEquals((-3906L), floatNode1.longValue());
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.isNaN());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigInteger());
      assertEquals((-3906.0400390625), floatNode1.doubleValue(), 0.01);
      assertEquals((short) (-3906), floatNode1.shortValue());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.booleanValue());
      assertEquals((-3906.04F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isLong());
      assertTrue(floatNode1.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isShort());
      assertEquals((-3906), floatNode1.intValue());
      assertTrue(floatNode1.isFloat());
      assertNotNull(floatNode1);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(floatNode1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(floatNode1, floatNode0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-3906L), floatNode1.longValue());
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.isNaN());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigInteger());
      assertEquals((-3906.0400390625), floatNode1.doubleValue(), 0.01);
      assertEquals((short) (-3906), floatNode1.shortValue());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.booleanValue());
      assertEquals((-3906.04F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isLong());
      assertTrue(floatNode1.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isShort());
      assertEquals((-3906), floatNode1.intValue());
      assertTrue(floatNode1.isFloat());
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      assertNotSame(floatNode0, floatNode1);
      assertFalse(floatNode0.equals((Object)floatNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNotNull(jsonParser0);
      
      FloatNode floatNode2 = (FloatNode)objectReader1._bindAndClose(jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode0, floatNode2);
      assertSame(floatNode1, floatNode2);
      assertNotSame(floatNode1, floatNode0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(floatNode2, floatNode1);
      assertNotSame(floatNode2, floatNode0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(floatNode0.equals((Object)floatNode1));
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(floatNode2.equals((Object)floatNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((-3906L), floatNode1.longValue());
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.isNaN());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigInteger());
      assertEquals((-3906.0400390625), floatNode1.doubleValue(), 0.01);
      assertEquals((short) (-3906), floatNode1.shortValue());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.booleanValue());
      assertEquals((-3906.04F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isLong());
      assertTrue(floatNode1.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isShort());
      assertEquals((-3906), floatNode1.intValue());
      assertTrue(floatNode1.isFloat());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(floatNode2.isBigDecimal());
      assertTrue(floatNode2.canConvertToInt());
      assertFalse(floatNode2.isIntegralNumber());
      assertFalse(floatNode2.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode2.asToken());
      assertEquals((-3906), floatNode2.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode2.getNodeType());
      assertFalse(floatNode2.isArray());
      assertTrue(floatNode2.isFloatingPointNumber());
      assertNull(floatNode2.textValue());
      assertFalse(floatNode2.isShort());
      assertTrue(floatNode2.isFloat());
      assertEquals((-3906L), floatNode2.longValue());
      assertTrue(floatNode2.isEmpty());
      assertTrue(floatNode2.canConvertToLong());
      assertFalse(floatNode2.isObject());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode2.numberType());
      assertEquals(0, floatNode2.size());
      assertFalse(floatNode2.isLong());
      assertFalse(floatNode2.isMissingNode());
      assertFalse(floatNode2.isDouble());
      assertEquals((-3906.04F), floatNode2.floatValue(), 0.01F);
      assertFalse(floatNode2.isInt());
      assertFalse(floatNode2.isNaN());
      assertFalse(floatNode2.isBigInteger());
      assertEquals((short) (-3906), floatNode2.shortValue());
      assertEquals((-3906.0400390625), floatNode2.doubleValue(), 0.01);
      assertNotNull(floatNode2);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode0, floatNode2);
      assertFalse(floatNode0.equals((Object)floatNode1));
      assertFalse(floatNode0.equals((Object)floatNode2));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertNotNull(jsonParserSequence0);
      
      MappingIterator<FilteringParserDelegate> mappingIterator0 = objectReader1._bindAndReadValues((JsonParser) jsonParserSequence0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode0, floatNode2);
      assertSame(floatNode1, floatNode2);
      assertNotSame(floatNode1, floatNode0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(floatNode0.equals((Object)floatNode1));
      assertFalse(floatNode0.equals((Object)floatNode2));
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isArray());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((-3906L), floatNode1.longValue());
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.isNaN());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigInteger());
      assertEquals((-3906.0400390625), floatNode1.doubleValue(), 0.01);
      assertEquals((short) (-3906), floatNode1.shortValue());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.booleanValue());
      assertEquals((-3906.04F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isLong());
      assertTrue(floatNode1.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isShort());
      assertEquals((-3906), floatNode1.intValue());
      assertTrue(floatNode1.isFloat());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertNotNull(mappingIterator0);
      
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      assertEquals(MapperFeature.AUTO_DETECT_IS_GETTERS, mapperFeature0);
      assertEquals(64, mapperFeature0.getMask());
      assertTrue(mapperFeature0.enabledByDefault());
      
      POJONode pOJONode0 = new POJONode(mapperFeature0);
      assertEquals(64, mapperFeature0.getMask());
      assertTrue(mapperFeature0.enabledByDefault());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isIntegralNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isBigInteger());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isObject());
      assertNotNull(pOJONode0);
      
      ObjectReader objectReader2 = objectReader0.withValueToUpdate(pOJONode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(64, mapperFeature0.getMask());
      assertTrue(mapperFeature0.enabledByDefault());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isIntegralNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isBigInteger());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isFloat());
      assertEquals(0, pOJONode0.size());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isObject());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = FloatNode.valueOf(1089.0F);
      assertEquals(1089L, floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(1089.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(1089.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isInt());
      assertEquals(1089, floatNode0.intValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.isFloat());
      assertEquals((short)1089, floatNode0.shortValue());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1089L, floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(1089.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(1089.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isInt());
      assertEquals(1089, floatNode0.intValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.isFloat());
      assertEquals((short)1089, floatNode0.shortValue());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1089L, floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(1089.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(1089.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isInt());
      assertEquals(1089, floatNode0.intValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isNaN());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.isFloat());
      assertEquals((short)1089, floatNode0.shortValue());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNotNull(jsonParser0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(Integer.MAX_VALUE);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertNull(javaType0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as `com.fasterxml.jackson.databind.node.FloatNode`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!G81");
      assertFalse(boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNotNull(deserializationConfig0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNotNull(deserializationConfig1);
      
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      assertNotNull(simpleObjectIdResolver0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      TextNode textNode0 = TextNode.valueOf("com.fasterxml.jackson.databind.BeanDescription");
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isMissingNode());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.textValue());
      assertNotNull(textNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, textNode0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isMissingNode());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '@';
      charArray0[2] = ']';
      charArray0[3] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1412), (-1412), true);
      assertEquals(4, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'3', '@', ']', ' '}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isMissingNode());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(readerBasedJsonParser0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      assertEquals(4, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'3', '@', ']', ' '}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isMissingNode());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(filteringParserDelegate0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(4, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'3', '@', ']', ' '}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isMissingNode());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.asText());
      assertFalse(textNode0.isFloat());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertEquals("com.fasterxml.jackson.databind.BeanDescription", textNode0.textValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig1, (JavaType) null, simpleObjectIdResolver0, (FormatSchema) null, (InjectableValues) null);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertEquals(0, deserializationConfig1.mixInCount());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertNotNull(objectReader0);
      
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = null;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, uRL0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2022), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals((-2022), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals((-2022), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals((-2022), readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0._initForReading(deserializationContext0, readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      DoubleNode doubleNode0 = (DoubleNode)jsonNodeFactory0.numberNode(double0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals((-1.0F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals((-1), doubleNode0.intValue());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((short) (-1), doubleNode0.shortValue());
      assertEquals(0, doubleNode0.size());
      assertEquals((-1.0), doubleNode0.doubleValue(), 0.01);
      assertEquals((-1L), doubleNode0.longValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isNaN());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertNotNull(doubleNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals((-1.0F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals((-1), doubleNode0.intValue());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((short) (-1), doubleNode0.shortValue());
      assertEquals(0, doubleNode0.size());
      assertEquals((-1.0), doubleNode0.doubleValue(), 0.01);
      assertEquals((-1L), doubleNode0.longValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isNaN());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isClosed());
      assertNotNull(treeTraversingParser0);
      
      DoubleNode doubleNode1 = (DoubleNode)objectReader0._bindAsTree(treeTraversingParser0);
      assertNotSame(doubleNode0, doubleNode1);
      assertNotSame(doubleNode1, doubleNode0);
      assertTrue(doubleNode1.equals((Object)doubleNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals((-1.0F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals((-1), doubleNode0.intValue());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((short) (-1), doubleNode0.shortValue());
      assertEquals(0, doubleNode0.size());
      assertEquals((-1.0), doubleNode0.doubleValue(), 0.01);
      assertEquals((-1L), doubleNode0.longValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isNaN());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.getCurrentToken());
      assertEquals(8, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(doubleNode1.isFloat());
      assertFalse(doubleNode1.isBigInteger());
      assertEquals((short) (-1), doubleNode1.shortValue());
      assertFalse(doubleNode1.isBigDecimal());
      assertFalse(doubleNode1.isNaN());
      assertTrue(doubleNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, doubleNode1.getNodeType());
      assertFalse(doubleNode1.isShort());
      assertFalse(doubleNode1.isArray());
      assertFalse(doubleNode1.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode1.asToken());
      assertEquals((-1L), doubleNode1.longValue());
      assertEquals((-1), doubleNode1.intValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode1.numberType());
      assertNull(doubleNode1.textValue());
      assertTrue(doubleNode1.isDouble());
      assertEquals(0, doubleNode1.size());
      assertEquals((-1.0), doubleNode1.doubleValue(), 0.01);
      assertTrue(doubleNode1.canConvertToInt());
      assertFalse(doubleNode1.isObject());
      assertFalse(doubleNode1.isInt());
      assertEquals((-1.0F), doubleNode1.floatValue(), 0.01F);
      assertFalse(doubleNode1.isIntegralNumber());
      assertFalse(doubleNode1.isMissingNode());
      assertFalse(doubleNode1.isLong());
      assertTrue(doubleNode1.isEmpty());
      assertTrue(doubleNode1.canConvertToLong());
      assertNotNull(doubleNode1);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(128, jsonReadFeature0.getMask());
      assertNotNull(objectReader2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1.createDeserializationContext(treeTraversingParser0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(doubleNode0, doubleNode1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(doubleNode0.equals((Object)doubleNode1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals((-1.0F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertEquals((-1), doubleNode0.intValue());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((short) (-1), doubleNode0.shortValue());
      assertEquals(0, doubleNode0.size());
      assertEquals((-1.0), doubleNode0.doubleValue(), 0.01);
      assertEquals((-1L), doubleNode0.longValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isNaN());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isLong());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.getCurrentToken());
      assertEquals(8, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader3 = objectReader0.with((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("\"O");
      assertNotNull(stringReader0);
      
      try { 
        objectReader1.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (StringReader); line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertEquals(0, linkedList0.size());
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedList0.contains(objectReader0));
      assertEquals(0, linkedList0.size());
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)32;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)110;
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte)32;
      byteArray1[7] = (byte)110;
      IntNode intNode0 = (IntNode)objectReader0.readTree(byteArray1, 0, (int) (byte)51);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)51, (byte)32, (byte)32, (byte)32, (byte)110, (byte)110, (byte)32, (byte)110}, byteArray1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isMissingNode());
      assertEquals(3.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.booleanValue());
      assertEquals(3.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isEmpty());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(3L, intNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertEquals((short)3, intNode0.shortValue());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isObject());
      assertEquals(3, intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isIntegralNumber());
      assertNotNull(intNode0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '>';
      charArray0[2] = 'e';
      byte[] byteArray0 = iOContext0.allocBase64Buffer(1535);
      assertEquals(2000, byteArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(byteArray0);
      
      charArray0[3] = 'u';
      charArray0[4] = 'F';
      charArray0[5] = '~';
      charArray0[6] = 'r';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 3, 0, true);
      assertEquals(7, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'o', '>', 'e', 'u', 'F', '~', 'r'}, charArray0);
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(readerBasedJsonParser0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertTrue(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(1114111, 1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertEquals(7, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertArrayEquals(new char[] {'o', '>', 'e', 'u', 'F', '~', 'r'}, charArray0);
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertFalse(linkedList0.contains(objectReader0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedList0.contains(objectReader0));
      assertEquals(0, linkedList0.size());
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedList0.contains(objectReader0));
      assertEquals(0, linkedList0.size());
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)51;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)110;
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)110;
      try { 
        objectReader0.readTree(byteArray1, 0, (int) (byte)51);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x6dff6e6e (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withRootName("IGNORE_MERGE_FOR_UNMERGEABLE");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = objectMapper0._configOverrides;
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'z';
      charArray0[2] = ':';
      charArray0[3] = 'T';
      charArray0[4] = '@';
      charArray0[5] = 'z';
      charArray0[6] = '8';
      charArray0[7] = 'C';
      charArray0[8] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectReader0, charsToNameCanonicalizer1, charArray0, 1, 2000, false);
      assertEquals(9, charArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertArrayEquals(new char[] {'t', 'z', ':', 'T', '@', 'z', '8', 'C', ' '}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(9, charArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertArrayEquals(new char[] {'t', 'z', ':', 'T', '@', 'z', '8', 'C', ' '}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertNotNull(readerBasedJsonParser1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<TextNode> mappingIterator0 = objectReader0._newIterator((JsonParser) readerBasedJsonParser1, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) jsonDeserializer0, false);
      assertNotSame(objectReader0, objectReader1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(9, charArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertArrayEquals(new char[] {'t', 'z', ':', 'T', '@', 'z', '8', 'C', ' '}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(mappingIterator0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader2 = objectReader1._new(objectReader0, deserializationConfig0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(objectReader2);
      
      TypeReference<ArrayNode> typeReference0 = (TypeReference<ArrayNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree((Reader) stringReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertNotNull(jsonNode0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(jsonNode0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      JsonToken jsonToken0 = objectReader1._initForReading(defaultDeserializationContext_Impl0, jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(JsonToken.NOT_AVAILABLE, jsonToken0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals((-1), jsonParser0.getCurrentTokenId());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonParser0.currentToken());
      assertEquals((-1), jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isStructStart());
      assertEquals((-1), jsonToken0.id());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructEnd());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      
      // Undeclared exception!
      try { 
        objectReader0.writeTree((JsonGenerator) null, jsonNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)39;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0, 3, (int) (byte) (-92));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-92), (byte)2, (byte) (-5), (byte)39}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNotNull(uTF8StreamJsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, false, true);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-92), (byte)2, (byte) (-5), (byte)39}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNotNull(filteringParserDelegate0);
      
      FormatSchema formatSchema0 = filteringParserDelegate0.getSchema();
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-92), (byte)2, (byte) (-5), (byte)39}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertNull(formatSchema0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAsTree(uTF8StreamJsonParser0);
      assertSame(objectReader0, objectReader1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-92), (byte)2, (byte) (-5), (byte)39}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isLong());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isInt());
      assertNotNull(missingNode0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertNotNull(jsonFactory3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '=';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0, (-1), 1369);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(2, charArray0.length);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertArrayEquals(new char[] {'f', '='}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper2 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertEquals(1, jsonGenerator_FeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1478);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2272, pipedReader0, objectReader0, charsToNameCanonicalizer1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2272, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2528, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(2528, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNotNull(readerBasedJsonParser1);
      
      objectReader0._initForMultiRead(defaultDeserializationContext_Impl0, readerBasedJsonParser1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2528, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(2528, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      
      ObjectNode objectNode0 = (ObjectNode)objectReader0.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNotNull(objectNode0);
      
      DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNotNull(deserializationConfig0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 33);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2756), objectReader1, mockFileOutputStream0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(fileDescriptor0.valid());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-2756), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertNotNull(uTF8JsonGenerator0);
      
      FormatSchema formatSchema0 = uTF8JsonGenerator0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(iOContext0, iOContext1);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(fileDescriptor0.valid());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals((-2756), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertNull(formatSchema0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader1;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader1;
      objectReaderArray0[6] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withType((JavaType) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders2);
      
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withMaxInputLookahead(56319);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertNotNull(dataFormatReaders3);
      
      DataFormatReaders dataFormatReaders4 = dataFormatReaders3.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders4);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders4);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders4);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders4);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders4, dataFormatReaders1);
      assertNotSame(dataFormatReaders4, dataFormatReaders0);
      assertNotSame(dataFormatReaders4, dataFormatReaders2);
      assertNotSame(dataFormatReaders4, dataFormatReaders3);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders3));
      assertNotNull(dataFormatReaders4);
      
      ObjectReader objectReader2 = objectReader0._new(objectReader1, deserializationConfig0, (JavaType) null, coreXMLDeserializers_Std0, bufferRecycler0, (FormatSchema) null, (InjectableValues) null, dataFormatReaders4);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(dataFormatReaders0, dataFormatReaders4);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders4);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders4);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders4);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders4, dataFormatReaders1);
      assertNotSame(dataFormatReaders4, dataFormatReaders0);
      assertNotSame(dataFormatReaders4, dataFormatReaders2);
      assertNotSame(dataFormatReaders4, dataFormatReaders3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(7, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isArray());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isIntegralNumber());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isObject());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.textValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isBigInteger());
      assertNotNull(nullNode0);
      
      try { 
        objectReader0.readValue((JsonNode) nullNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, objectReader0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectReader1, byteQuadsCanonicalizer0, byteArray0, 1, 2893, false);
      assertEquals(0, byteArray0.length);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, byteArray0.length);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(1, jsonParserSequence0.getFeatureMask());
      assertNotNull(jsonParserSequence0);
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndReadValues((JsonParser) uTF8StreamJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<StdTypeResolverBuilder> class0 = StdTypeResolverBuilder.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findRootDeserializer(defaultDeserializationContext0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertNotNull(jsonDeserializer0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectWriter objectWriter0 = objectMapper1.writer();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory3);
      
      // Undeclared exception!
      try { 
        jsonFactory3.createParser((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FloatNode floatNode0 = FloatNode.valueOf((-2826.0F));
      assertEquals((-2826), floatNode0.intValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((-2826.0), floatNode0.doubleValue(), 0.01);
      assertEquals((short) (-2826), floatNode0.shortValue());
      assertEquals((-2826.0F), floatNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isObject());
      assertEquals((-2826L), floatNode0.longValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = new FloatNode(0.68485874F);
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertFalse(floatNode1.isIntegralNumber());
      assertEquals((short)0, floatNode1.shortValue());
      assertFalse(floatNode1.isDouble());
      assertEquals(0L, floatNode1.longValue());
      assertTrue(floatNode1.isEmpty());
      assertEquals(0.6848587393760681, floatNode1.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals(0, floatNode1.size());
      assertNull(floatNode1.textValue());
      assertEquals(0, floatNode1.intValue());
      assertEquals(0.68485874F, floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.booleanValue());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.canConvertToInt());
      assertTrue(floatNode1.isFloat());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isArray());
      assertNotNull(floatNode1);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode1);
      assertNotSame(floatNode1, floatNode0);
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertFalse(floatNode1.isIntegralNumber());
      assertEquals((short)0, floatNode1.shortValue());
      assertFalse(floatNode1.isDouble());
      assertEquals(0L, floatNode1.longValue());
      assertTrue(floatNode1.isEmpty());
      assertEquals(0.6848587393760681, floatNode1.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals(0, floatNode1.size());
      assertNull(floatNode1.textValue());
      assertEquals(0, floatNode1.intValue());
      assertEquals(0.68485874F, floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.booleanValue());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.canConvertToInt());
      assertTrue(floatNode1.isFloat());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isArray());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      assertNotSame(floatNode1, floatNode0);
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertFalse(floatNode1.isIntegralNumber());
      assertEquals((short)0, floatNode1.shortValue());
      assertFalse(floatNode1.isDouble());
      assertEquals(0L, floatNode1.longValue());
      assertTrue(floatNode1.isEmpty());
      assertEquals(0.6848587393760681, floatNode1.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals(0, floatNode1.size());
      assertNull(floatNode1.textValue());
      assertEquals(0, floatNode1.intValue());
      assertEquals(0.68485874F, floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.booleanValue());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isShort());
      assertTrue(floatNode1.canConvertToInt());
      assertTrue(floatNode1.isFloat());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isArray());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertNotNull(jsonParserSequence0);
      
      try { 
        objectReader1._bindAndReadValues(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Conflicting setter definitions for property \"config\": com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params) vs com.fasterxml.jackson.databind.ObjectMapper#setConfig(1 params)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)122;
      try { 
        objectReader0.readTree(byteArray0, 4, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a Number value
         //  at [Source: (byte[])\"\uFFFD\u0001]\u0002+\u0003\u0003\u0011z\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("GpCL4#N.q(y|Mur");
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertNotNull(textNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, textNode0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'V';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-418), pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 256, 1, false);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNotNull(readerBasedJsonParser1);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser1);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals((-418), jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      jsonParserDelegate0.setRequestPayloadOnError("GpCL4#N.q(y|Mur");
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals((-418), jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canParseAsync());
      
      JsonParserDelegate jsonParserDelegate1 = (JsonParserDelegate)objectReader0._considerFilter(jsonParserDelegate0, true);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(jsonParserDelegate0, jsonParserDelegate1);
      assertSame(jsonParserDelegate1, jsonParserDelegate0);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals((-418), jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate1.canReadObjectId());
      assertFalse(jsonParserDelegate1.canReadTypeId());
      assertEquals((-418), jsonParserDelegate1.getFeatureMask());
      assertFalse(jsonParserDelegate1.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate1.getFormatFeatures());
      assertFalse(jsonParserDelegate1.canParseAsync());
      assertNotNull(jsonParserDelegate1);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-418), jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNotNull(jsonParserSequence0);
      
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-418), jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertEquals((-418), jsonParserSequence1.getFeatureMask());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertNotNull(jsonParserSequence1);
      
      try { 
        objectReader0._bind(jsonParserSequence1, textNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("@80JMQvT71k");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (String)\"@80JMQvT71k\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNotNull(filteringParserDelegate0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) filteringParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isArray());
      assertNotNull(jsonNode0);
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertNotNull(javaType0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNotNull(placeholderForType0);
      
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, javaType0, (JavaType[]) null, (JavaType) placeholderForType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, javaType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType1.isJavaLangObject());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertNotNull(referenceType1);
      
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType1.isJavaLangObject());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isConcrete());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.useStaticType());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isMapLikeType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertNotNull(referenceType2);
      
      ReferenceType referenceType3 = referenceType2.withValueHandler(class0);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertFalse(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertFalse(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType1.isJavaLangObject());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isConcrete());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.useStaticType());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isMapLikeType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.isFinal());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasHandlers());
      assertTrue(referenceType3.hasContentType());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isEnumType());
      assertFalse(referenceType3.isAbstract());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isCollectionLikeType());
      assertTrue(referenceType3.useStaticType());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isPrimitive());
      assertNotNull(referenceType3);
      
      ReferenceType referenceType4 = referenceType3.withContentValueHandler(referenceType2);
      assertNotSame(referenceType0, referenceType4);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType4);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType4);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType4);
      assertNotSame(referenceType4, referenceType2);
      assertNotSame(referenceType4, referenceType0);
      assertNotSame(referenceType4, referenceType1);
      assertNotSame(referenceType4, referenceType3);
      assertFalse(referenceType0.equals((Object)referenceType3));
      assertFalse(referenceType0.equals((Object)referenceType1));
      assertFalse(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertFalse(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertFalse(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType4.equals((Object)referenceType1));
      assertTrue(referenceType4.equals((Object)referenceType2));
      assertTrue(referenceType4.equals((Object)referenceType3));
      assertFalse(referenceType4.equals((Object)referenceType0));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType1.isJavaLangObject());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isConcrete());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.useStaticType());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isMapLikeType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.isFinal());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasHandlers());
      assertTrue(referenceType3.hasContentType());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isEnumType());
      assertFalse(referenceType3.isAbstract());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isCollectionLikeType());
      assertTrue(referenceType3.useStaticType());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType4.isCollectionLikeType());
      assertFalse(referenceType4.isContainerType());
      assertTrue(referenceType4.useStaticType());
      assertFalse(referenceType4.isInterface());
      assertFalse(referenceType4.isFinal());
      assertFalse(referenceType4.isPrimitive());
      assertTrue(referenceType4.hasValueHandler());
      assertFalse(referenceType4.isEnumType());
      assertTrue(referenceType4.hasHandlers());
      assertFalse(referenceType4.isMapLikeType());
      assertFalse(referenceType4.isAnchorType());
      assertTrue(referenceType4.hasContentType());
      assertFalse(referenceType4.isArrayType());
      assertTrue(referenceType4.isReferenceType());
      assertEquals(0, referenceType4.containedTypeCount());
      assertFalse(referenceType4.isJavaLangObject());
      assertTrue(referenceType4.isConcrete());
      assertFalse(referenceType4.isAbstract());
      assertNotNull(referenceType4);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((JavaType) referenceType4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.ReferenceType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("0");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals((short)0, intNode0.shortValue());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(0L, intNode0.longValue());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertEquals(0, intNode0.intValue());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isLong());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isArray());
      assertNotNull(intNode0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      ObjectWriter objectWriter0 = objectMapper0.writer();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-7);
      MappingIterator<MapLikeType> mappingIterator0 = objectReader0.readValues(byteArray0, (int)  (-75), (int) 0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte) (-21), (byte)23, (byte)0, (byte) (-1), (byte)1, (byte) (-7)}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("Cannot find a deserializer for type ");
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isArray());
      assertEquals("Cannot find a deserializer for type ", textNode0.asText());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isDouble());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isLong());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("Cannot find a deserializer for type ", textNode0.textValue());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isObject());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertNotNull(textNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(textNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isArray());
      assertEquals("Cannot find a deserializer for type ", textNode0.asText());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isDouble());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isLong());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("Cannot find a deserializer for type ", textNode0.textValue());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isObject());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertNull(textNode0.numberType());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeFactory0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 23, pipedReader0, objectMapper0, charsToNameCanonicalizer1, charArray0, (-3623), 253, true);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertArrayEquals(new char[] {'{', 'C'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(23, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(2, 1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertArrayEquals(new char[] {'{', 'C'}, charArray0);
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(22, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(22, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser1);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3623
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)1, (byte) (-111), (byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)1, (byte) (-111), (byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x91
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = FloatNode.valueOf((-939.0F));
      assertEquals((-939.0), floatNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals((short) (-939), floatNode0.shortValue());
      assertEquals((-939.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertEquals((-939), floatNode0.intValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertEquals((-939L), floatNode0.longValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.canConvertToLong());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertNotNull(floatNode0);
      
      Class<ObjectNode> class0 = ObjectNode.class;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "qS\\~I{;/:!g";
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      objectReaderArray0[1] = objectReader1;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(javaType0);
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(mapLikeType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(mapLikeType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(0, byteArray0.length);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(0, byteArray0.length);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, (ResolvedType) mapLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ClassIntrospector classIntrospector0 = objectMapper0.defaultClassIntrospector();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(classIntrospector0);
      
      DataInput dataInput0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ClassIntrospector classIntrospector0 = objectMapper0.defaultClassIntrospector();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(classIntrospector0);
      
      DataInput dataInput0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-22);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.with((JsonParser.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode(3338.0F);
      assertEquals(3338.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(3338, floatNode0.intValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isInt());
      assertEquals(3338L, floatNode0.longValue());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isNaN());
      assertEquals((short)3338, floatNode0.shortValue());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(3338.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNotNull(floatNode0);
      
      TypeReference<CreatorProperty> typeReference0 = (TypeReference<CreatorProperty>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Class<MissingNode> class0 = MissingNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, typeReference0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser1, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      objectReader0._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext_Impl0, (JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertNotNull(jsonParser0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as [null]): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) null);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isLong());
      assertNotNull(booleanNode0);
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(booleanNode0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isLong());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      JsonParser jsonParser1 = objectReader1._considerFilter(jsonParser0, false);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isArray());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isLong());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser1.canReadObjectId());
      assertFalse(jsonParser1.canReadTypeId());
      assertNull(jsonParser1.currentToken());
      assertEquals(0, jsonParser1.currentTokenId());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.hasTextCharacters());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertNull(jsonParser1.getCurrentToken());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.canParseAsync());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertFalse(jsonParser1.hasCurrentToken());
      assertNotNull(jsonParser1);
      
      try { 
        objectReader1._verifyNoTrailingTokens(jsonParser1, defaultDeserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_FALSE) found after value (bound as [null]): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      System.setCurrentTimeMillis(954L);
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("JSON", "n d`pa20'3?p/Qg?,");
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(954L, file0.lastModified());
      assertEquals("Qg?,", file0.getName());
      assertEquals("/tmp/JSON0n d`pa20'3?p", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/JSON0n d`pa20'3?p/Qg?,", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(954L, file0.lastModified());
      assertEquals("Qg?,", file0.getName());
      assertEquals("/tmp/JSON0n d`pa20'3?p", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/JSON0n d`pa20'3?p/Qg?,", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, inputStream0.available());
      assertNotNull(inputStream0);
      
      try { 
        objectReader0.readValues(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFileInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      ObjectReader objectReader3 = objectReader2.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8449, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory3);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8449, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8449, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertNotNull(nonBlockingJsonParser0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-1));
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_IntSequenceGenerator0);
      
      Class<?> class1 = objectIdGenerators_IntSequenceGenerator0.getScope();
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.node.ArrayNode", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      TypeReference<LongNode> typeReference0 = (TypeReference<LongNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(typeReference0).getType();
      Iterator<LongNode> iterator0 = objectReader3.readValues((JsonParser) nonBlockingJsonParser0, typeReference0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8449, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8449, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.node.ArrayNode", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(iterator0);
      
      try { 
        objectReader2.readValue(byteArray0, 48, (int) 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      JsonNode jsonNode0 = objectReader0.readTree((byte[]) null, (-12), (-12));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertNotNull(jsonNode0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-934));
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertNotNull(placeholderForType0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNotNull(readerBasedJsonParser1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(readerBasedJsonParser1, defaultDeserializationContext_Impl0, placeholderForType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("(", "");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/(", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("(", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URL uRL1 = MockURL.URL(uRL0, "k19Z'4");
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/(", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("(", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotNull(uRL1);
      
      try { 
        objectReader0.readValue(uRL1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree((Reader) stringReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNotNull(jsonNode0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature1, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNotNull(nonBlockingJsonParser0);
      
      FilteringParserDelegate filteringParserDelegate0 = (FilteringParserDelegate)objectReader1._considerFilter(nonBlockingJsonParser0, true);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(8193, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNotNull(filteringParserDelegate0);
      
      try { 
        objectReader1.readTree((JsonParser) filteringParserDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.JsonNode` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInput dataInput0 = null;
      JsonParser.Feature[] jsonParser_FeatureArray0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Integer integer0 = new Integer((-992));
      assertEquals((-992), (int)integer0);
      assertNotNull(integer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '1';
      charArray0[2] = 'P';
      charArray0[3] = 'B';
      charArray0[4] = 'n';
      charArray0[5] = '&';
      charArray0[6] = 'L';
      charArray0[7] = '-';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3423, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1445), 2, true);
      assertEquals(8, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'>', '1', 'P', 'B', 'n', '&', 'L', '-'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(3423, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(8, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'>', '1', 'P', 'B', 'n', '&', 'L', '-'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(3551, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(3551, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(readerBasedJsonParser1);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndClose(readerBasedJsonParser1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1445
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)76, (byte)0, (byte)111, (byte)75, (byte)125, (byte)0, (byte)1, (byte)2}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)76, (byte)0, (byte)111, (byte)75, (byte)125, (byte)0, (byte)1, (byte)2}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'LL\u0000oK': was expecting ('true', 'false' or 'null')
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[2] = deserializationFeature1;
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures(deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValues((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot use source of type ");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(1.0F);
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertNull(numericNode0.textValue());
      assertTrue(numericNode0.isFloat());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isObject());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertEquals(1, numericNode0.intValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      assertEquals((short)1, numericNode0.shortValue());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.booleanValue());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertEquals(0, numericNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, numericNode0.numberType());
      assertNotNull(numericNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(numericNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertNull(numericNode0.textValue());
      assertTrue(numericNode0.isFloat());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isObject());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertEquals(1, numericNode0.intValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      assertEquals((short)1, numericNode0.shortValue());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.booleanValue());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertEquals(0, numericNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, numericNode0.numberType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      FloatNode floatNode0 = (FloatNode)objectReader0._bindAsTree(jsonParser0);
      assertNotSame(numericNode0, floatNode0);
      assertNotSame(floatNode0, numericNode0);
      assertTrue(floatNode0.equals((Object)numericNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertNull(numericNode0.textValue());
      assertTrue(numericNode0.isFloat());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isBigDecimal());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isObject());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertEquals(1, numericNode0.intValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      assertEquals((short)1, numericNode0.shortValue());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.booleanValue());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertEquals(0, numericNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, numericNode0.numberType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(8, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(8, jsonParser0.currentTokenId());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isLong());
      assertNull(floatNode0.textValue());
      assertEquals((short)1, floatNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(1L, floatNode0.longValue());
      assertEquals(1, floatNode0.intValue());
      assertEquals(1.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isNaN());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(1.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isBigInteger());
      assertNotNull(floatNode0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      Iterator<ReferenceType> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(iterator0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int0 = sequenceInputStream0.read();
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-4));
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = '>';
      charArray0[2] = 'R';
      charArray0[3] = 'H';
      charArray0[4] = 'u';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectMapper0, charsToNameCanonicalizer1, charArray0, 2, (-599), false);
      assertEquals(5, charArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertArrayEquals(new char[] {'|', '>', 'R', 'H', 'u'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(5, charArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertArrayEquals(new char[] {'|', '>', 'R', 'H', 'u'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0._bind(readerBasedJsonParser1, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short) (-1393));
      assertEquals((-1393.0), shortNode0.doubleValue(), 0.01);
      assertEquals((short) (-1393), shortNode0.shortValue());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((-1393), shortNode0.intValue());
      assertEquals((-1393.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertFalse(shortNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertNull(shortNode0.textValue());
      assertEquals((-1393L), shortNode0.longValue());
      assertNotNull(shortNode0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Double double0 = null;
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (-5280));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals((-5280), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals((-5280), byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      
      StringReader stringReader0 = new StringReader("Eb");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 40, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(40, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(40, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(40, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Eb': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInput dataInput0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(objectReader1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1384), (Reader) null, objectReader1, charsToNameCanonicalizer0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals((-1384), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals((-1384), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals((-1384), readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNotNull(readerBasedJsonParser1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals((-1384), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals((-1384), readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl0, readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (com.fasterxml.jackson.databind.ObjectMapper); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("GpCL4#N.q(y|Mur");
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isArray());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isMissingNode());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertNotNull(textNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, textNode0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isArray());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isMissingNode());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'V';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-418), pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 256, 1, false);
      assertEquals(2, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isArray());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isMissingNode());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isArray());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isMissingNode());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNotNull(readerBasedJsonParser1);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser1);
      assertEquals(2, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isArray());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isMissingNode());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals((-418), jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertNotNull(jsonParserDelegate0);
      
      JsonParserDelegate jsonParserDelegate1 = (JsonParserDelegate)objectReader0._considerFilter(jsonParserDelegate0, false);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(jsonParserDelegate0, jsonParserDelegate1);
      assertSame(jsonParserDelegate1, jsonParserDelegate0);
      assertEquals(2, charArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'j', 'V'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isArray());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.booleanValue());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isMissingNode());
      assertEquals("GpCL4#N.q(y|Mur", textNode0.asText());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-418), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals((-418), readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals((-418), jsonParserDelegate0.getFeatureMask());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate1.canReadTypeId());
      assertEquals(0, jsonParserDelegate1.getFormatFeatures());
      assertEquals((-418), jsonParserDelegate1.getFeatureMask());
      assertFalse(jsonParserDelegate1.requiresCustomCodec());
      assertFalse(jsonParserDelegate1.canParseAsync());
      assertFalse(jsonParserDelegate1.canReadObjectId());
      assertNotNull(jsonParserDelegate1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      Class<SimpleType> class1 = SimpleType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-7));
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNull(javaType0);
      
      ObjectReader objectReader2 = objectReader1.forType((JavaType) null);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      try { 
        objectReader1.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = typeBindings0.findBoundType("");
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNull(javaType0);
      
      try { 
        objectReader0.readValues((JsonParser) null, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(287, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertNotNull(jsonFactory3);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(287, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNotNull(readerBasedJsonParser0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(852);
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNotNull(placeholderForType0);
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNull(javaType0);
      
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'm';
      charArray0[2] = '8';
      charArray0[3] = 'e';
      charArray0[4] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 2385, 3, true);
      assertEquals(5, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'V', 'm', '8', 'e', '3'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideFormatFeatures(0, (-3581));
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(5, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'V', 'm', '8', 'e', '3'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertNotNull(readerBasedJsonParser1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser1, tokenFilter0, false, false);
      assertEquals(5, charArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'V', 'm', '8', 'e', '3'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertEquals(3, filteringParserDelegate0.getFeatureMask());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNotNull(filteringParserDelegate0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertNotNull(mapType0);
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType0, mapType0, mapType0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertNotNull(mapLikeType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, mapLikeType0);
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(2, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNotNull(collectionLikeType0);
      
      MapType mapType1 = mapType0.withKeyType(collectionLikeType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(2, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertNotNull(mapType1);
      
      MapType mapType2 = mapType1.withKeyValueHandler(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(2, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.hasContentType());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(mapType2);
      
      MapType mapType3 = mapType2.withStaticTyping();
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(mapType0.equals((Object)mapType2));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType2));
      assertFalse(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType1));
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(2, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isInterface());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType3.isFinal());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isInterface());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isCollectionLikeType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.hasHandlers());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.isEnumType());
      assertEquals(2, mapType3.containedTypeCount());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isArrayType());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(mapType3);
      
      // Undeclared exception!
      try { 
        objectReader0._verifyNoTrailingTokens(filteringParserDelegate0, defaultDeserializationContext_Impl0, mapType3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)12;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0, (int) (byte) (-17), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)12}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNotNull(uTF8StreamJsonParser0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(simpleType0);
      
      Iterator<ShortNode> iterator0 = objectReader0.readValues((JsonParser) uTF8StreamJsonParser0, (ResolvedType) simpleType0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)12}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-24);
      byteArray0[0] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-24), 1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-24)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig2);
      
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection((ObjectReader[]) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertEquals(16, jsonReadFeature1.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature1.mappedFeature());
      
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(arrayBuilders0);
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      // Undeclared exception!
      try { 
        objectReader1.withoutFeatures(formatFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withoutAttribute(objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      File file0 = null;
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertNotNull(decimalNode0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, decimalNode0, false);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1767), (Reader) null, objectReader1, charsToNameCanonicalizer0, charArray0, (-1596), 33, false);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals((-1767), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isShort());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals((-1763), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals((-1763), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNotNull(readerBasedJsonParser1);
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndCloseAsTree(readerBasedJsonParser1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1596
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      // Undeclared exception!
      try { 
        objectReader0.with((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot detect format from input, does not look like any of detectable formats ");
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      try { 
        objectReader0.readValue((JsonParser) nonBlockingJsonParser0, (JavaType) simpleType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-2868.1F));
      assertEquals((-2868.10009765625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-2868L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals((-2868.1F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short) (-2868), floatNode0.shortValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals((-2868), floatNode0.intValue());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2868.10009765625), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-2868L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertEquals((-2868.1F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals((short) (-2868), floatNode0.shortValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals((-2868), floatNode0.intValue());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) floatNode0, (Class<ObjectNode>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "ZqFmk3Bn5[eZViji/* ";
      File file0 = MockFile.createTempFile("ZqFmk3Bn5[eZViji/* ", "fileName");
      assertEquals("* 0fileName", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/ZqFmk3Bn5[eZViji", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp/ZqFmk3Bn5[eZViji/* 0fileName", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      try { 
        objectReader0.readValues(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      try { 
        objectReader1._inputStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short)423);
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(423L, shortNode0.longValue());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(423.0F, shortNode0.floatValue(), 0.01F);
      assertEquals(423.0, shortNode0.doubleValue(), 0.01);
      assertEquals(423, shortNode0.intValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertEquals((short)423, shortNode0.shortValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isLong());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertNotNull(shortNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(423L, shortNode0.longValue());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(423.0F, shortNode0.floatValue(), 0.01F);
      assertEquals(423.0, shortNode0.doubleValue(), 0.01);
      assertEquals(423, shortNode0.intValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertEquals((short)423, shortNode0.shortValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isLong());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      IntNode intNode0 = (IntNode)objectReader0._bindAndCloseAsTree(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(423L, shortNode0.longValue());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(423.0F, shortNode0.floatValue(), 0.01F);
      assertEquals(423.0, shortNode0.doubleValue(), 0.01);
      assertEquals(423, shortNode0.intValue());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertEquals((short)423, shortNode0.shortValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isLong());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(423, intNode0.intValue());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(423.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(423.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isShort());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(423L, intNode0.longValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertEquals((short)423, intNode0.shortValue());
      assertTrue(intNode0.isEmpty());
      assertNotNull(intNode0);
      
      try { 
        objectReader0.readValue(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[0];
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'P';
      charArray0[2] = '7';
      charArray0[3] = '@';
      charArray0[4] = '2';
      charArray0[5] = '>';
      charArray0[6] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, 1, 1518);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'.', 'P', '7', '@', '2', '>', '9'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0.readTree((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'P7': was expecting ('true', 'false' or 'null')
         //  at [Source: (char[])\".P7@2>9\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short)3515);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isLong());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(3515.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isShort());
      assertEquals(3515.0, shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((short)3515, shortNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(3515, shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(3515L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isInt());
      assertNotNull(shortNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(shortNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isLong());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(3515.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isObject());
      assertTrue(shortNode0.isShort());
      assertEquals(3515.0, shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((short)3515, shortNode0.shortValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(3515, shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(3515L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isInt());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNotNull(jsonParser0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader1, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader1, charsToNameCanonicalizer0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree((Reader) stringReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader1._bindAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-2868.1F));
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertEquals((short) (-2868), floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-2868L), floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isDouble());
      assertEquals((-2868), floatNode0.intValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((-2868.1F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((-2868.10009765625), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertNotNull(floatNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(floatNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertEquals((short) (-2868), floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-2868L), floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isDouble());
      assertEquals((-2868), floatNode0.intValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((-2868.1F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((-2868.10009765625), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertNotNull(objectReader0);
      
      MappingIterator<Integer> mappingIterator0 = objectReader0.readValues((Reader) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertEquals((short) (-2868), floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-2868L), floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isDouble());
      assertEquals((-2868), floatNode0.intValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((-2868.1F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((-2868.10009765625), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertNotNull(mappingIterator0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      File file0 = MockFile.createTempFile("JSON", "JSON");
      assertEquals("/tmp/JSON0JSON", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0JSON", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(file0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("/tmp/JSON0JSON", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0JSON", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8201, uTF8StreamJsonParser0.getFeatureMask());
      assertNotNull(uTF8StreamJsonParser0);
      
      MappingIterator<TypeIdResolver> mappingIterator1 = objectReader0._bindAndReadValues((JsonParser) uTF8StreamJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertEquals((short) (-2868), floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-2868L), floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isDouble());
      assertEquals((-2868), floatNode0.intValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((-2868.1F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((-2868.10009765625), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("/tmp/JSON0JSON", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0JSON", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8201, uTF8StreamJsonParser0.getFeatureMask());
      assertNotNull(mappingIterator1);
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAndCloseAsTree(uTF8StreamJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertEquals((short) (-2868), floatNode0.shortValue());
      assertFalse(floatNode0.isLong());
      assertEquals((-2868L), floatNode0.longValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isDouble());
      assertEquals((-2868), floatNode0.intValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals((-2868.1F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((-2868.10009765625), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("/tmp/JSON0JSON", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("JSON0JSON", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8201, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertNull(missingNode0.textValue());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isIntegralNumber());
      assertNotNull(missingNode0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("}<e&+>+j<G0H82@3z", "}<e&+>+j<G0H82@3z");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "");
      assertTrue(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (URL); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      assertNotSame(configOverrides0, configOverrides1);
      assertNotSame(configOverrides1, configOverrides0);
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      assertNotNull(configOverrides1);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides1);
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNotNull(deserializationConfig0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ObjectReader objectReader1 = objectReader0.with(deserializationConfig0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(configOverrides0, configOverrides1);
      assertNotSame(configOverrides1, configOverrides0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(configOverrides1.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNotNull(objectReader1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      try { 
        objectReader1.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
      assertFalse(arrayList0.contains(objectReader1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(arrayList0.contains(objectReader1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(dataFormatReaders0);
      
      try { 
        objectReader1._reportUnkownFormat(dataFormatReaders0, (DataFormatReaders.Match) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(objectReader1);
      
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader1;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader1;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders2);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)55;
      byteArray0[0] = (byte)55;
      byteArray0[3] = (byte)3;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat(byteArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertEquals(10, byteArray0.length);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)0, (byte)3, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u0300' (code 768 / 0x300)): Expected space separating root-level values
         //  at [Source: (byte[])\"7\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(objectReader1);
      
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader1;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader1;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertNotNull(jsonParserSequence0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndReadValues((JsonParser) jsonParserSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      IntNode intNode0 = IntNode.valueOf(31);
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(31.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(31.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isShort());
      assertEquals((short)31, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(31, intNode0.intValue());
      assertNotNull(intNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(intNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(31.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(31.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isShort());
      assertEquals((short)31, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(31, intNode0.intValue());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(31.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(31.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isShort());
      assertEquals((short)31, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(31, intNode0.intValue());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(31.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(31.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isShort());
      assertEquals((short)31, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(31, intNode0.intValue());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte) (-120);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(byteArray0, (int) (byte)0, (-1406));
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)77, (byte) (-65), (byte)68, (byte)1, (byte)1, (byte)37, (byte) (-120)}, byteArray0);
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(31.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(31.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isShort());
      assertEquals((short)31, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(31, intNode0.intValue());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(uTF8StreamJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)77, (byte) (-65), (byte)68, (byte)1, (byte)1, (byte)37, (byte) (-120)}, byteArray0);
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(31.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(31.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isShort());
      assertEquals((short)31, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(31, intNode0.intValue());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)77, (byte) (-65), (byte)68, (byte)1, (byte)1, (byte)37, (byte) (-120)}, byteArray0);
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(31.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertEquals(31.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isShort());
      assertEquals((short)31, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31L, intNode0.longValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertEquals(31, intNode0.intValue());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader1, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = null;
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader1, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode0 = objectNode0.putArray("UD8LrMT90E{");
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertNotNull(arrayNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UD8LrMT90E{", false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      String string0 = "STRING";
      StringReader stringReader0 = new StringReader("STRING");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(33, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(33, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(33, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(33, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals(33, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      IntNode intNode0 = IntNode.valueOf((-58));
      assertEquals((-58L), intNode0.longValue());
      assertEquals((-58), intNode0.intValue());
      assertFalse(intNode0.isDouble());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertEquals((short) (-58), intNode0.shortValue());
      assertFalse(intNode0.isFloat());
      assertEquals((-58.0F), intNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals((-58.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertNotNull(intNode0);
      
      try { 
        objectReader0._bind(jsonParserDelegate0, intNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'STRING': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(objectReader1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray1 = new ObjectReader[4];
      assertFalse(objectReaderArray1.equals((Object)objectReaderArray0));
      
      objectReaderArray1[0] = objectReader1;
      objectReaderArray1[1] = objectReader1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2201, (-4986));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)63, (byte)42, (byte) (-95), (byte)1}, byteArray0);
      assertEquals((-4986), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)63, (byte)42, (byte) (-95), (byte)1}, byteArray0);
      assertEquals((-4986), byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) bufferedInputStream0);
      assertNotSame(objectReaderArray0, objectReaderArray1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReaderArray0.equals((Object)objectReaderArray1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertArrayEquals(new byte[] {(byte)1, (byte)63, (byte)42, (byte) (-95), (byte)1}, byteArray0);
      assertEquals((-4986), byteArrayInputStream0.available());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertNotNull(dataFormatReaders_Match0);
      
      ObjectReader objectReader2 = dataFormatReaders_Match0.getReader();
      assertNotSame(objectReaderArray0, objectReaderArray1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReaderArray0.equals((Object)objectReaderArray1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertArrayEquals(new byte[] {(byte)1, (byte)63, (byte)42, (byte) (-95), (byte)1}, byteArray0);
      assertEquals((-4986), byteArrayInputStream0.available());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertNull(objectReader2);
      
      objectReaderArray1[2] = null;
      objectReaderArray1[3] = objectReader1;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray1);
      assertNotSame(objectReaderArray0, objectReaderArray1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(objectReaderArray1, objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(4, objectReaderArray1.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReaderArray0.equals((Object)objectReaderArray1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(objectReaderArray1.equals((Object)objectReaderArray0));
      assertNotNull(dataFormatReaders2);
      
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withMaxInputLookahead(116);
      assertNotSame(objectReaderArray0, objectReaderArray1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(objectReaderArray1, objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(4, objectReaderArray1.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReaderArray0.equals((Object)objectReaderArray1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(objectReaderArray1.equals((Object)objectReaderArray0));
      assertNotNull(dataFormatReaders3);
      
      // Undeclared exception!
      try { 
        objectReader1._reportUnkownFormat(dataFormatReaders3, dataFormatReaders_Match0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = new FloatNode((-1.0F));
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.booleanValue());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloat());
      assertEquals((-1L), floatNode0.longValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isLong());
      assertNotNull(floatNode0);
      
      Class<ObjectNode> class0 = ObjectNode.class;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<ObjectNode> class1 = ObjectNode.class;
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) floatNode0, class1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to com.fasterxml.jackson.databind.node.ObjectNode
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ObjectDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String string0 = "";
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8705, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8705, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8705, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8705, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8705, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8705, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8705, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8705, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8705, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNotNull(readerBasedJsonParser0);
      
      Class<FloatNode> class0 = FloatNode.class;
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      // Undeclared exception!
      try { 
        objectReader0.with(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      // Undeclared exception!
      try { 
        objectReader0._with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectWriter objectWriter0 = objectMapper0.writer();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      MockFile mockFile0 = new MockFile("$08V");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertNotNull(jsonFactory3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)121;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser(byteArray0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertArrayEquals(new byte[] {(byte)44, (byte)116, (byte)54, (byte)91, (byte)0, (byte)1, (byte) (-1), (byte)121}, byteArray0);
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0._bindAndClose(uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a value
         //  at [Source: (byte[])\",t6[\u0000\u0001\uFFFDy\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FloatNode floatNode0 = FloatNode.valueOf((-1595.0F));
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-1595.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertEquals((-1595), floatNode0.intValue());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-1595L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((-1595.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isFloat());
      assertEquals((short) (-1595), floatNode0.shortValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = new FloatNode((-1595.0F));
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertTrue(floatNode1.canConvertToLong());
      assertEquals((-1595.0), floatNode1.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.booleanValue());
      assertEquals((-1595), floatNode1.intValue());
      assertFalse(floatNode1.isInt());
      assertFalse(floatNode1.isBigInteger());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertEquals((-1595L), floatNode1.longValue());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.isNaN());
      assertEquals((-1595.0F), floatNode1.floatValue(), 0.01F);
      assertTrue(floatNode1.canConvertToInt());
      assertEquals((short) (-1595), floatNode1.shortValue());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isObject());
      assertFalse(floatNode1.isShort());
      assertNull(floatNode1.textValue());
      assertTrue(floatNode1.isFloat());
      assertNotNull(floatNode1);
      
      Class<FloatNode> class0 = FloatNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2898);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(placeholderForType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      assertNotSame(floatNode0, floatNode1);
      assertTrue(floatNode0.equals((Object)floatNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-1595.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertEquals((-1595), floatNode0.intValue());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-1595L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((-1595.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isFloat());
      assertEquals((short) (-1595), floatNode0.shortValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertNotNull(jsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      assertNotSame(floatNode0, floatNode1);
      assertTrue(floatNode0.equals((Object)floatNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-1595.0F), floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.booleanValue());
      assertEquals((-1595), floatNode0.intValue());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertTrue(floatNode0.isEmpty());
      assertEquals((-1595L), floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((-1595.0), floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.isFloat());
      assertEquals((short) (-1595), floatNode0.shortValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertNotNull(jsonParserSequence0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(23, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNotNull(jsonFactory3);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser("JSON");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(23, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader1._bindAndReadValues((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MapperFeature mapperFeature0 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean1 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Root name '%s' does not match expected ('%s') for type %s");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertSame(injectableValues_Std0, injectableValues0);
      assertSame(injectableValues0, injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(injectableValues0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a");
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(objectReader1);
      
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader1;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader1;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(dataFormatReaders2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)58;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat(byteArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(8, byteArray0.length);
      assertEquals(6, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertArrayEquals(new byte[] {(byte)55, (byte)1, (byte) (-42), (byte)3, (byte)67, (byte)0, (byte)3, (byte)58}, byteArray0);
      assertFalse(linkedHashSet0.contains(objectReader1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.WEAK_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader1._detectBindAndReadValues(dataFormatReaders_Match0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 1)): Expected space separating root-level values
         //  at [Source: (byte[])\"7\u0001\uFFFD\u0003C\u0000\u0003:\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)125, (byte) (-58)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)125, (byte) (-58)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)125, (byte) (-58)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      char char0 = dataInputStream0.readChar();
      assertEquals('\u8F7D', char0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)125, (byte) (-58)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertEquals(3, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte) (-113), (byte)125, (byte) (-58)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(dataInputStream1);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser jsonParser0 = objectReader0._considerFilter((JsonParser) null, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonParser0);
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isIntegralNumber());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isBigInteger());
      assertNotNull(booleanNode0);
      
      System.setCurrentTimeMillis(3860L);
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertNotNull(coreXMLSerializers_XMLGregorianCalendarSerializer0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonNode jsonNode0 = coreXMLSerializers_XMLGregorianCalendarSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) null, true);
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertEquals(1, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      
      Class<Object> class0 = Object.class;
      LinkedHashMap linkedHashMap0 = (LinkedHashMap)objectReader0.treeToValue((TreeNode) jsonNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertEquals(1, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream1);
      
      try { 
        objectMapper0.readTree((InputStream) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree((Reader) stringReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertNotNull(jsonNode0);
      
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      boolean boolean0 = objectReader0.isEnabled(mapperFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertTrue(boolean0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      URL uRL0 = null;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      // Undeclared exception!
      try { 
        objectReader0._findRootDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      NullNode nullNode0 = NullNode.instance;
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isObject());
      assertNotNull(nullNode0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) nullNode0, class0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isFloat());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isIntegralNumber());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isObject());
      assertNull(resolvedRecursiveType0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree((Reader) stringReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isLong());
      assertEquals("true", booleanNode0.asText());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isBigInteger());
      assertNotNull(booleanNode0);
      
      Class<Object> class0 = Object.class;
      Object object0 = objectReader0.treeToValue((TreeNode) booleanNode0, class0);
      assertEquals(true, object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isLong());
      assertEquals("true", booleanNode0.asText());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isBigInteger());
      assertNotNull(object0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      // Undeclared exception!
      try { 
        objectMapper0.readTree((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      assertNull(booleanNode0.textValue());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isLong());
      assertEquals("true", booleanNode0.asText());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.booleanValue());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertNotNull(booleanNode0);
      
      Class<Object> class0 = Object.class;
      Object object0 = objectReader0.treeToValue((TreeNode) booleanNode0, class0);
      assertEquals(true, object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(booleanNode0.textValue());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isLong());
      assertEquals("true", booleanNode0.asText());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.booleanValue());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isBigInteger());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isShort());
      assertNotNull(object0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      // Undeclared exception!
      try { 
        objectMapper0.readTree((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertNotNull(jsonNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      String string0 = "zJR";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNotNull(jsonParser0);
      
      JsonToken jsonToken0 = objectReader0._initForReading(defaultDeserializationContext0, jsonParser0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(JsonToken.START_OBJECT, jsonToken0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertTrue(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(1, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(1, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.START_OBJECT, jsonParser0.currentToken());
      assertEquals(JsonToken.START_OBJECT, jsonParser0.getCurrentToken());
      assertFalse(jsonToken0.isNumeric());
      assertEquals(1, jsonToken0.id());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isScalarValue());
      assertEquals("{", jsonToken0.asString());
      
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-109);
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x933a0195 (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertEquals(4, byteArray0.length);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(dataInputStream1);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1101);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLDeserializers_Std0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|");
      assertFalse(boolean0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(482);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 180, pipedReader0, objectReader0, charsToNameCanonicalizer1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(180, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(3, 1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(181, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(181, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8209, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8209, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8209, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      File file0 = MockFile.createTempFile("JSON", "");
      assertTrue(file0.canWrite());
      assertEquals("JSON0", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/JSON0", file0.toString());
      assertNotNull(file0);
      
      try { 
        objectReader0.readValue(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(6, jsonParser_FeatureArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      Class<IntNode> class0 = IntNode.class;
      Class<FloatNode> class1 = FloatNode.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertNotNull(javaType0);
      
      JavaType javaType1 = objectMapper0.constructType(javaType0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(resolvedRecursiveType0, javaType1);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, javaType1);
      assertSame(javaType0, resolvedRecursiveType0);
      assertSame(javaType1, javaType0);
      assertSame(javaType1, resolvedRecursiveType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType1.isPrimitive());
      assertTrue(javaType1.hasContentType());
      assertFalse(javaType1.hasHandlers());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.isJavaLangObject());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.useStaticType());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isArrayType());
      assertNotNull(javaType1);
      
      Iterator<CoreXMLDeserializers.Std> iterator0 = objectReader0.readValues((JsonParser) null, javaType1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(resolvedRecursiveType0, javaType1);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, javaType1);
      assertSame(javaType0, resolvedRecursiveType0);
      assertSame(javaType1, javaType0);
      assertSame(javaType1, resolvedRecursiveType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType1.isPrimitive());
      assertTrue(javaType1.hasContentType());
      assertFalse(javaType1.hasHandlers());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.isJavaLangObject());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.useStaticType());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isArrayType());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)118;
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-54);
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"vev\uFFFD\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FloatNode floatNode0 = FloatNode.valueOf(0.75F);
      assertFalse(floatNode0.isNaN());
      assertEquals(0L, floatNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isShort());
      assertEquals(0, floatNode0.intValue());
      assertTrue(floatNode0.isFloat());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = new FloatNode((-3906.04F));
      assertFalse(floatNode1.equals((Object)floatNode0));
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertFalse(floatNode1.isBigInteger());
      assertFalse(floatNode1.isShort());
      assertFalse(floatNode1.isArray());
      assertFalse(floatNode1.booleanValue());
      assertFalse(floatNode1.isInt());
      assertTrue(floatNode1.canConvertToLong());
      assertEquals((-3906L), floatNode1.longValue());
      assertEquals(0, floatNode1.size());
      assertTrue(floatNode1.canConvertToInt());
      assertNull(floatNode1.textValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertEquals((-3906.0400390625), floatNode1.doubleValue(), 0.01);
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isMissingNode());
      assertEquals((-3906), floatNode1.intValue());
      assertTrue(floatNode1.isFloat());
      assertEquals((short) (-3906), floatNode1.shortValue());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertEquals((-3906.04F), floatNode1.floatValue(), 0.01F);
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isObject());
      assertFalse(floatNode1.isLong());
      assertTrue(floatNode1.isEmpty());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isIntegralNumber());
      assertNotNull(floatNode1);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      boolean boolean0 = false;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      assertNotSame(floatNode0, floatNode1);
      assertFalse(floatNode0.equals((Object)floatNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.isNaN());
      assertEquals(0L, floatNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isInt());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.booleanValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isShort());
      assertEquals(0, floatNode0.intValue());
      assertTrue(floatNode0.isFloat());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader1._bindAndClose(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readTree((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xf8
         //  at [Source: (ByteArrayInputStream); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      System.setCurrentTimeMillis(3825L);
      ObjectReader objectReader2 = objectReader1.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader2.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      Iterator<ReferenceType> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(iterator0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) sequenceInputStream0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertNotNull(jsonNode0);
      
      DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNotNull(deserializationConfig0);
      
      System.setCurrentTimeMillis(0L);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FloatNode floatNode0 = FloatNode.valueOf(0.75F);
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isDouble());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isInt());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isNaN());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.intValue());
      assertTrue(floatNode0.isFloat());
      assertNotNull(floatNode0);
      
      FloatNode floatNode1 = new FloatNode(0.75F);
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isInt());
      assertEquals(0, floatNode1.intValue());
      assertFalse(floatNode1.isShort());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertEquals(0L, floatNode1.longValue());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertEquals((short)0, floatNode1.shortValue());
      assertEquals(0.75, floatNode1.doubleValue(), 0.01);
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isBigInteger());
      assertTrue(floatNode1.isFloat());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.booleanValue());
      assertEquals(0.75F, floatNode1.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isArray());
      assertTrue(floatNode1.canConvertToInt());
      assertNotNull(floatNode1);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(floatNode1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(floatNode1, floatNode0);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isInt());
      assertEquals(0, floatNode1.intValue());
      assertFalse(floatNode1.isShort());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertEquals(0L, floatNode1.longValue());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertEquals((short)0, floatNode1.shortValue());
      assertEquals(0.75, floatNode1.doubleValue(), 0.01);
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isBigInteger());
      assertTrue(floatNode1.isFloat());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.booleanValue());
      assertEquals(0.75F, floatNode1.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isArray());
      assertTrue(floatNode1.canConvertToInt());
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(floatNode0);
      assertNotSame(floatNode0, floatNode1);
      assertTrue(floatNode0.equals((Object)floatNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isDouble());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isInt());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isNaN());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.intValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNotNull(jsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      assertNotSame(floatNode0, floatNode1);
      assertTrue(floatNode0.equals((Object)floatNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isDouble());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isInt());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isNaN());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.intValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertNotNull(jsonParserSequence0);
      
      MappingIterator<FilteringParserDelegate> mappingIterator0 = objectReader1._bindAndReadValues((JsonParser) jsonParserSequence0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(floatNode0, floatNode1);
      assertNotSame(floatNode1, floatNode0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(floatNode0.equals((Object)floatNode1));
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0.75F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isDouble());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isInt());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isMissingNode());
      assertFalse(floatNode0.isNaN());
      assertEquals(0.75, floatNode0.doubleValue(), 0.01);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNull(floatNode0.textValue());
      assertEquals(0, floatNode0.intValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode1.isEmpty());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertNull(floatNode1.textValue());
      assertFalse(floatNode1.isInt());
      assertEquals(0, floatNode1.intValue());
      assertFalse(floatNode1.isShort());
      assertFalse(floatNode1.isMissingNode());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isDouble());
      assertEquals(0L, floatNode1.longValue());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertEquals((short)0, floatNode1.shortValue());
      assertEquals(0.75, floatNode1.doubleValue(), 0.01);
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertFalse(floatNode1.isBigInteger());
      assertTrue(floatNode1.isFloat());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.booleanValue());
      assertEquals(0.75F, floatNode1.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertFalse(floatNode1.isArray());
      assertTrue(floatNode1.canConvertToInt());
      assertFalse(jsonParser0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(8, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(8, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3027), 3);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.mark(1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)2;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)2);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(placeholderForType0);
      
      BinaryNode binaryNode0 = new BinaryNode(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)101, (byte)4, (byte)3, (byte)1, (byte)2}, byteArray0);
      assertEquals(0, binaryNode0.size());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isLong());
      assertNull(binaryNode0.textValue());
      assertFalse(binaryNode0.isBigInteger());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertFalse(binaryNode0.isDouble());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isArray());
      assertTrue(binaryNode0.isEmpty());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.numberType());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertFalse(binaryNode0.booleanValue());
      assertFalse(binaryNode0.isIntegralNumber());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isBigDecimal());
      assertNotNull(binaryNode0);
      
      InjectableValues injectableValues0 = objectReader0.getInjectableValues();
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(injectableValues0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) dataInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNotNull(objectNode0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isFloat());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertNotNull(bigIntegerNode0);
      
      Stack<JsonNode> stack0 = new Stack<JsonNode>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      List<JsonNode> list0 = bigIntegerNode0.findParents(">{wRlIja!#", (List<JsonNode>) stack0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isFloat());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<JsonNode> list1 = objectNode0.findValues(">{wRlIja!#", list0);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isFloat());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, list1);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isFloat());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode1 = arrayNode0.findParent("");
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isArray());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isFloat());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertNull(objectNode1);
      
      // Undeclared exception!
      try { 
        objectReader0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-118);
      // Undeclared exception!
      try { 
        objectReader0.readValues(byteArray0, (-2479), (int) 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2479
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.without((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-76);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0, (int) (byte)0, (-860));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte)0, (byte)0, (byte)109, (byte)42, (byte)1, (byte) (-76)}, byteArray0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNotNull(uTF8StreamJsonParser0);
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      try { 
        objectReader0.readValue((JsonParser) uTF8StreamJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u001F\u0000\u0000m*\u0001\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      assertFalse(stack0.contains(objectReader0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(stack0.contains(objectReader0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(dataFormatReaders0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(stack0.contains(objectReader0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertNotNull(dataFormatReaders_Match0);
      
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, 1734, (-2585));
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(1, byteArray0.length);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader1 = objectMapper1.readerForUpdating(jsonNode0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(1, byteArray0.length);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(objectReader1);
      
      MappingIterator<ResolvedRecursiveType> mappingIterator0 = objectReader1.readValues((InputStream) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(1, byteArray0.length);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(mappingIterator0);
      
      JsonNode jsonNode1 = objectReader1.createObjectNode();
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(1, byteArray0.length);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode1.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isArray());
      assertNull(jsonNode1.textValue());
      assertEquals("", jsonNode1.asText());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertTrue(jsonNode1.isObject());
      assertFalse(jsonNode1.isBigDecimal());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.booleanValue());
      assertNull(jsonNode1.numberType());
      assertNotNull(jsonNode1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readTree((byte[]) null, (int) (byte)0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectReader objectReader2 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-27);
      try { 
        objectReader2.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFD\u0001Q\uFFFD\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader1._prefetchRootDeserializer((JavaType) null);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonDeserializer0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      DoubleNode doubleNode0 = new DoubleNode((-9.223372036854776E18));
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.canConvertToInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals((-9.223372E18F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(Integer.MIN_VALUE, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertEquals((-9223372036854775808L), doubleNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals((-9.223372036854776E18), doubleNode0.doubleValue(), 0.01);
      assertNotNull(doubleNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.canConvertToInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals((-9.223372E18F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(Integer.MIN_VALUE, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertEquals((-9223372036854775808L), doubleNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals((-9.223372036854776E18), doubleNode0.doubleValue(), 0.01);
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNotNull(jsonParser0);
      
      DoubleNode doubleNode1 = (DoubleNode)objectReader0._bindAndCloseAsTree(jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(doubleNode0, doubleNode1);
      assertNotSame(doubleNode1, doubleNode0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(doubleNode1.equals((Object)doubleNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(doubleNode0.textValue());
      assertEquals((short)0, doubleNode0.shortValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.canConvertToInt());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals((-9.223372E18F), doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isFloat());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(Integer.MIN_VALUE, doubleNode0.intValue());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isObject());
      assertFalse(doubleNode0.isShort());
      assertEquals((-9223372036854775808L), doubleNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals((-9.223372036854776E18), doubleNode0.doubleValue(), 0.01);
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals((-9223372036854775808L), doubleNode1.longValue());
      assertEquals(0, doubleNode1.size());
      assertFalse(doubleNode1.isLong());
      assertFalse(doubleNode1.isMissingNode());
      assertFalse(doubleNode1.booleanValue());
      assertFalse(doubleNode1.isNaN());
      assertEquals(JsonNodeType.NUMBER, doubleNode1.getNodeType());
      assertTrue(doubleNode1.isFloatingPointNumber());
      assertFalse(doubleNode1.isBigDecimal());
      assertNull(doubleNode1.textValue());
      assertTrue(doubleNode1.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode1.numberType());
      assertFalse(doubleNode1.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode1.asToken());
      assertFalse(doubleNode1.isShort());
      assertEquals((-9.223372036854776E18), doubleNode1.doubleValue(), 0.01);
      assertFalse(doubleNode1.isObject());
      assertFalse(doubleNode1.isInt());
      assertFalse(doubleNode1.isFloat());
      assertEquals(Integer.MIN_VALUE, doubleNode1.intValue());
      assertFalse(doubleNode1.isBigInteger());
      assertEquals((short)0, doubleNode1.shortValue());
      assertTrue(doubleNode1.canConvertToLong());
      assertEquals((-9.223372E18F), doubleNode1.floatValue(), 0.01F);
      assertFalse(doubleNode1.isIntegralNumber());
      assertFalse(doubleNode1.canConvertToInt());
      assertTrue(doubleNode1.isEmpty());
      assertNotNull(doubleNode1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader2 = objectReader1.withType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      MissingNode missingNode0 = (MissingNode)objectReader1.readTree((Reader) stringReader0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertTrue(missingNode0.isMissingNode());
      assertEquals("", missingNode0.asText());
      assertEquals(0, missingNode0.size());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertNotNull(missingNode0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      assertFalse(dataInputStream1.equals((Object)dataInputStream0));
      assertNotNull(dataInputStream1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      Class<NullNode> class0 = NullNode.class;
      Class<BooleanNode> class1 = BooleanNode.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class2 = HashMap.class;
      Class<NullNode> class3 = NullNode.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class1, class3);
      assertSame(class3, class0);
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertNotNull(mapType0);
      
      Class<CoreXMLDeserializers.Std> class4 = CoreXMLDeserializers.Std.class;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class4, typeBindings0, (JavaType) mapType0, (JavaType[]) null, (JavaType) mapType0);
      assertSame(class3, class0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertNotNull(referenceType0);
      
      MapLikeType mapLikeType0 = mapType0.withKeyType(referenceType0);
      assertNotSame(mapLikeType0, mapType0);
      assertSame(class3, class0);
      assertNotSame(mapType0, mapLikeType0);
      assertFalse(mapLikeType0.equals((Object)mapType0));
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertNotNull(mapLikeType0);
      
      MapType mapType1 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, (JavaType[]) null, (JavaType) mapType0, (JavaType) mapLikeType0);
      assertNotSame(mapLikeType0, mapType0);
      assertNotSame(mapLikeType0, mapType1);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType1, mapType0);
      assertSame(class0, class3);
      assertSame(class3, class0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapType0, mapType1);
      assertFalse(mapLikeType0.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapLikeType0));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType0.equals((Object)mapLikeType0));
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.isFinal());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertNotNull(mapType1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Class<CollectionType> class5 = CollectionType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class5, 3);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLDeserializers_Std0, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 951, objectReader0, byteArrayOutputStream0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(951, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNotNull(uTF8JsonGenerator0);
      
      FormatSchema formatSchema0 = uTF8JsonGenerator0.getSchema();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(951, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(formatSchema0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectMapper0, (DeserializationConfig) null, mapType1, objectReader0, (FormatSchema) null, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      POJONode pOJONode0 = new POJONode(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isMissingNode());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isFloat());
      assertNotNull(pOJONode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayBuilder0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertNotNull(uTF8JsonGenerator0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-548), 1, false);
      assertEquals(1, charArray0.length);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertEquals(1, charArray0.length);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(formatSchema0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null, (JavaType) null, pipedInputStream0, (FormatSchema) null, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertNotNull(objectWriter0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, (-1891), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders2);
      
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertNotNull(dataFormatReaders3);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      InputDecorator inputDecorator0 = jsonFactory0.getInputDecorator();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(inputDecorator0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders3.findFormat((InputStream) pipedInputStream0);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      MatchStrength matchStrength0 = MatchStrength.SOLID_MATCH;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders2);
      
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertNotNull(dataFormatReaders3);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      InputDecorator inputDecorator0 = jsonFactory0.getInputDecorator();
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(inputDecorator0);
      
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.inputDecorator((InputDecorator) null);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder1);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders3.findFormat((InputStream) pipedInputStream0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataFormatReaders_Match0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory3);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFD\uFFFD\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectReader objectReader2 = objectReader1.with(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      
      ObjectReader objectReader2 = objectReader0.with(jsonFactory2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      
      ShortNode shortNode0 = new ShortNode((byte)116);
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((short)116, shortNode0.shortValue());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertNull(shortNode0.textValue());
      assertEquals(116L, shortNode0.longValue());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals(116.0F, shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.isInt());
      assertEquals(116, shortNode0.intValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(116.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isDouble());
      assertTrue(shortNode0.isEmpty());
      assertNotNull(shortNode0);
      
      // Undeclared exception!
      try { 
        objectReader2.writeValue((JsonGenerator) null, shortNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(10241, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature1, true);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(541, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(541, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(541, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(10241, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(541, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(10241, jsonFactory3.getParserFeatures());
      assertNotNull(jsonFactory3);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser((Reader) pipedReader0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(10241, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(541, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(10241, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(541, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(541, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(10241, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(541, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(10241, jsonFactory3.getParserFeatures());
      assertEquals(10241, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNotNull(readerBasedJsonParser0);
      
      Class<CollectionType> class0 = CollectionType.class;
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[3];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(3, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(arrayType0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(3, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withType(arrayType0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertEquals(3, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(dataFormatReaders2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)106;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00F1\u0014': was expecting ('true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\u0014\f\uFFFDj\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(arrayType0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isEnumType());
      assertNotNull(dataFormatReaders1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)0}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(uTF8StreamJsonParser0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = (UTF8StreamJsonParser)objectReader0._considerFilter(uTF8StreamJsonParser0, false);
      assertSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      assertSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)0}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser1.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(0, uTF8StreamJsonParser1.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.canParseAsync());
      assertFalse(uTF8StreamJsonParser1.isNaN());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser1.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser1.currentToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(uTF8StreamJsonParser1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      try { 
        objectReader0.readValues(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      POJONode pOJONode0 = new POJONode("d%5(");
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertNotNull(pOJONode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1007, objectMapper0, byteArrayBuilder0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1007, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNotNull(uTF8JsonGenerator0);
      
      FormatSchema formatSchema0 = uTF8JsonGenerator0.getSchema();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isDouble());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1007, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValue((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonDeserializer<SimpleType> jsonDeserializer0 = (JsonDeserializer<SimpleType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      MappingIterator<NullNode> mappingIterator0 = objectReader1._newIterator((JsonParser) null, (DeserializationContext) null, (JsonDeserializer<?>) jsonDeserializer0, false);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
      
      byte[] byteArray0 = new byte[5];
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(objectMapper0, objectReader1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(contextAttributes1);
      
      byte byte0 = (byte)108;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer(defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isNaN());
      assertNotNull(bigIntegerNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigIntegerNode0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectReader0, byteQuadsCanonicalizer1, byteArray0, 3, (byte)37, true);
      assertEquals(6, byteArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertArrayEquals(new byte[] {(byte)9, (byte)1, (byte)1, (byte) (-1), (byte)37, (byte)1}, byteArray0);
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(uTF8StreamJsonParser0);
      
      objectReader0._initForMultiRead(defaultDeserializationContext0, uTF8StreamJsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(6, byteArray0.length);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertArrayEquals(new byte[] {(byte)9, (byte)1, (byte)1, (byte) (-1), (byte)37, (byte)1}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isObject());
      assertTrue(bigIntegerNode0.isEmpty());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isFloat());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isDouble());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isShort());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      assertEquals('/', JsonPointer.SEPARATOR);
      assertTrue(jsonPointer0.matches());
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("", jsonPointer0.toString());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertNotNull(jsonPointer0);
      
      ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(jsonPointer0.matches());
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("", jsonPointer0.toString());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, (ConfigOverrides) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null, 1283, 1283);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      BufferRecycler bufferRecycler0 = null;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 33, 33, true);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideFormatFeatures(33, 1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser1);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser1, (JsonParser) readerBasedJsonParser1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertNotNull(jsonParserSequence0);
      
      int int0 = jsonParserSequence0.getTextOffset();
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, int0);
      assertEquals(0, charArray0.length);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canParseAsync());
      
      try { 
        objectReader0._bindAndClose(jsonParserSequence0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertNotNull(jsonNodeFactory1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertNotNull(jsonNode0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0._reportUndetectableSource(objectMapper2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.databind.ObjectMapper with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = new IntNode(15);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(15L, intNode0.longValue());
      assertTrue(intNode0.canConvertToInt());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isObject());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isArray());
      assertEquals((short)15, intNode0.shortValue());
      assertEquals(0, intNode0.size());
      assertTrue(intNode0.isInt());
      assertNotNull(intNode0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      Class<DecimalNode> class0 = DecimalNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(coreXMLDeserializers_Std0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader1 = objectMapper0.reader(contextAttributes0);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(intNode0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(15L, intNode0.longValue());
      assertTrue(intNode0.canConvertToInt());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isObject());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isArray());
      assertEquals((short)15, intNode0.shortValue());
      assertEquals(0, intNode0.size());
      assertTrue(intNode0.isInt());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader2 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNotNull(deserializationConfig0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      StringReader stringReader0 = new StringReader("read(buf,");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'U';
      charArray0[2] = 'P';
      charArray0[3] = '.';
      charArray0[4] = 'g';
      charArray0[5] = 'h';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-473), stringReader0, objectReader2, charsToNameCanonicalizer0, charArray0, 0, (-473), false);
      assertEquals(6, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertArrayEquals(new char[] {'\\', 'U', 'P', '.', 'g', 'h'}, charArray0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals((-473), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(0, 15);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(6, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertArrayEquals(new char[] {'\\', 'U', 'P', '.', 'g', 'h'}, charArray0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals((-480), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals((-480), readerBasedJsonParser1.getFeatureMask());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(readerBasedJsonParser1);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser1, injectableValues_Std0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertEquals(6, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertArrayEquals(new char[] {'\\', 'U', 'P', '.', 'g', 'h'}, charArray0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals((-480), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals((-480), readerBasedJsonParser1.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertNotNull(defaultDeserializationContext_Impl1);
      
      try { 
        objectReader1._initForReading(defaultDeserializationContext_Impl1, readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'read': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.databind.deser.BeanDeserializerFactory); line: 1, column: -468]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(352.0270267473);
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToLong());
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isLong());
      assertEquals(352, doubleNode0.intValue());
      assertEquals(352.0270267473, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isEmpty());
      assertFalse(doubleNode0.isInt());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.isShort());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(0, doubleNode0.size());
      assertEquals(352L, doubleNode0.longValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(352.02704F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.booleanValue());
      assertEquals((short)352, doubleNode0.shortValue());
      assertNotNull(doubleNode0);
      
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(true);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertNotNull(jsonNodeFactory1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(jsonNodeFactory0, jsonNodeFactory1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(jsonNodeFactory0.equals((Object)jsonNodeFactory1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(jsonNodeFactory0, jsonNodeFactory1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(jsonNodeFactory0.equals((Object)jsonNodeFactory1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(jsonNodeFactory0, jsonNodeFactory1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(jsonNodeFactory0.equals((Object)jsonNodeFactory1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("OKiyTo2%");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      TypeReference<LongNode> typeReference0 = (TypeReference<LongNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      JsonPointer jsonPointer0 = JsonPointer.compile("");
      assertEquals('/', JsonPointer.SEPARATOR);
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.matches());
      assertEquals("", jsonPointer0.toString());
      assertNotNull(jsonPointer0);
      
      ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.matches());
      assertEquals("", jsonPointer0.toString());
      assertNotNull(objectReader1);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(352.0270267473);
      assertFalse(doubleNode0.isObject());
      assertEquals(352.0270267473, doubleNode0.doubleValue(), 0.01);
      assertEquals(352.02704F, doubleNode0.floatValue(), 0.01F);
      assertTrue(doubleNode0.isEmpty());
      assertEquals(352, doubleNode0.intValue());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isBigDecimal());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertEquals((short)352, doubleNode0.shortValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isBigInteger());
      assertFalse(doubleNode0.isMissingNode());
      assertTrue(doubleNode0.canConvertToInt());
      assertFalse(doubleNode0.isInt());
      assertEquals(352L, doubleNode0.longValue());
      assertNotNull(doubleNode0);
      
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertNotNull(jsonNodeFactory1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertNotNull(jsonNode0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(typeFactory0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0.0);
      assertEquals(0L, numericNode0.longValue());
      assertFalse(numericNode0.isMissingNode());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isLong());
      assertTrue(numericNode0.canConvertToInt());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isBigDecimal());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isNaN());
      assertNull(numericNode0.textValue());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertFalse(numericNode0.isArray());
      assertTrue(numericNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isBigInteger());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isFloat());
      assertEquals(0, numericNode0.intValue());
      assertEquals((short)0, numericNode0.shortValue());
      assertFalse(numericNode0.isIntegralNumber());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(0.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(0.0, numericNode0.doubleValue(), 0.01);
      assertNotNull(numericNode0);
      
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertNotNull(jsonNodeFactory1);
      
      NumericNode numericNode1 = jsonNodeFactory1.numberNode((byte)1);
      assertNotSame(jsonNodeFactory1, jsonNodeFactory0);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertFalse(numericNode1.isDouble());
      assertEquals(JsonNodeType.NUMBER, numericNode1.getNodeType());
      assertFalse(numericNode1.isArray());
      assertFalse(numericNode1.isNaN());
      assertEquals((short)1, numericNode1.shortValue());
      assertNull(numericNode1.textValue());
      assertEquals(JsonParser.NumberType.INT, numericNode1.numberType());
      assertFalse(numericNode1.isMissingNode());
      assertTrue(numericNode1.isInt());
      assertFalse(numericNode1.booleanValue());
      assertEquals(0, numericNode1.size());
      assertFalse(numericNode1.isFloatingPointNumber());
      assertEquals(1, numericNode1.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode1.asToken());
      assertFalse(numericNode1.isShort());
      assertEquals(1.0, numericNode1.doubleValue(), 0.01);
      assertFalse(numericNode1.isBigInteger());
      assertEquals(1L, numericNode1.longValue());
      assertEquals(1.0F, numericNode1.floatValue(), 0.01F);
      assertTrue(numericNode1.canConvertToInt());
      assertTrue(numericNode1.canConvertToLong());
      assertFalse(numericNode1.isBigDecimal());
      assertTrue(numericNode1.isEmpty());
      assertFalse(numericNode1.isObject());
      assertTrue(numericNode1.isIntegralNumber());
      assertFalse(numericNode1.isFloat());
      assertFalse(numericNode1.isLong());
      assertNotNull(numericNode1);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader1 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory1);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertNotNull(objectNode0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader2 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectNode objectNode1 = objectNode0.put(" for format ", (byte[]) null);
      assertNotSame(jsonNodeFactory1, jsonNodeFactory0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(1, objectNode1.size());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertNotNull(objectNode1);
      
      ObjectReader objectReader3 = objectReader1.withValueToUpdate(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)1, (byte)0, (byte)120, (byte)1}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00F5\u0001\u0000x\u0001': was expecting ('true', 'false' or 'null')
         //  at [Source: (ByteArrayInputStream); line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<MissingNode> class0 = MissingNode.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)35;
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfe
         //  at [Source: (byte[])\"R\uFFFD#\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertNotNull(jsonNode0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode1 = objectReader0.readTree((Reader) stringReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isBigInteger());
      assertFalse(jsonNode1.isFloat());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isBigDecimal());
      assertTrue(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.booleanValue());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode1.asToken());
      assertEquals(JsonNodeType.MISSING, jsonNode1.getNodeType());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isIntegralNumber());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isArray());
      assertNotNull(jsonNode1);
      
      // Undeclared exception!
      try { 
        objectReader1.withType((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonParser0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNotNull(filteringParserDelegate0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) filteringParserDelegate0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isDouble());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isFloat());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isIntegralNumber());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(0, missingNode0.size());
      assertNotNull(missingNode0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertEquals(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(8, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(8, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertNotNull(objectReader2);
      
      JsonNode jsonNode0 = objectReader1.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertNotNull(jsonNode0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      ObjectReader objectReader3 = objectReader1.withFeatures(deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertEquals(2, deserializationFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader3);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ",!");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      try { 
        objectReader2._inputStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = null;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.disable(jsonWriteFeature0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(23, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(23, jsonFactoryBuilder1.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder1);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      assertEquals(23, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(23, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = 'A';
      charArray0[2] = 'z';
      charArray0[3] = 'G';
      charArray0[4] = '>';
      charArray0[5] = 'N';
      charArray0[6] = '*';
      charArray0[7] = '~';
      charArray0[8] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, (-2070), 1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'L', 'A', 'z', 'G', '>', 'N', '*', '~', 'j'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(23, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(23, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(readerBasedJsonParser0);
      
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotNull(simpleType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.useStaticType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isAbstract());
      assertNotNull(referenceType1);
      
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.useStaticType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertNotNull(referenceType2);
      
      ReferenceType referenceType3 = (ReferenceType)referenceType2.getAnchorType();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(referenceType0, referenceType2);
      assertSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType1);
      assertSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isReferenceType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.useStaticType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isCollectionLikeType());
      assertTrue(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.isFinal());
      assertEquals(0, referenceType3.containedTypeCount());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isAbstract());
      assertFalse(referenceType3.isMapLikeType());
      assertTrue(referenceType3.hasContentType());
      assertFalse(referenceType3.hasHandlers());
      assertFalse(referenceType3.useStaticType());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isInterface());
      assertTrue(referenceType3.isAnchorType());
      assertFalse(referenceType3.isEnumType());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isPrimitive());
      assertNotNull(referenceType3);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, (JavaType) referenceType3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2070
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(mappingIterator0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      TypeReference<DoubleNode> typeReference0 = (TypeReference<DoubleNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.forType(typeReference0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValues((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[10] = (byte) (-120);
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(arrayType0);
      
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean1 = arrayType0.isTypeOrSubTypeOf(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(arrayType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(dataFormatReaders2);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((double) 64);
      assertFalse(numericNode0.isObject());
      assertFalse(numericNode0.isInt());
      assertEquals(64.0F, numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isShort());
      assertEquals((short)64, numericNode0.shortValue());
      assertFalse(numericNode0.isFloat());
      assertTrue(numericNode0.canConvertToLong());
      assertTrue(numericNode0.isEmpty());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isArray());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isLong());
      assertEquals(64, numericNode0.intValue());
      assertEquals(0, numericNode0.size());
      assertEquals(64.0, numericNode0.doubleValue(), 0.01);
      assertTrue(numericNode0.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertFalse(numericNode0.isNaN());
      assertEquals(64L, numericNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertNull(numericNode0.textValue());
      assertNotNull(numericNode0);
      
      NumericNode numericNode1 = jsonNodeFactory0.numberNode((byte) (-120));
      assertTrue(numericNode1.canConvertToInt());
      assertTrue(numericNode1.isInt());
      assertFalse(numericNode1.booleanValue());
      assertEquals(JsonNodeType.NUMBER, numericNode1.getNodeType());
      assertFalse(numericNode1.isBigDecimal());
      assertEquals(0, numericNode1.size());
      assertNull(numericNode1.textValue());
      assertEquals(JsonParser.NumberType.INT, numericNode1.numberType());
      assertFalse(numericNode1.isArray());
      assertTrue(numericNode1.isIntegralNumber());
      assertTrue(numericNode1.canConvertToLong());
      assertEquals((-120), numericNode1.intValue());
      assertFalse(numericNode1.isShort());
      assertFalse(numericNode1.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode1.asToken());
      assertFalse(numericNode1.isNaN());
      assertEquals((-120L), numericNode1.longValue());
      assertFalse(numericNode1.isFloatingPointNumber());
      assertFalse(numericNode1.isFloat());
      assertEquals((-120.0F), numericNode1.floatValue(), 0.01F);
      assertFalse(numericNode1.isBigInteger());
      assertEquals((-120.0), numericNode1.doubleValue(), 0.01);
      assertFalse(numericNode1.isLong());
      assertFalse(numericNode1.isMissingNode());
      assertFalse(numericNode1.isDouble());
      assertEquals((short) (-120), numericNode1.shortValue());
      assertTrue(numericNode1.isEmpty());
      assertNotNull(numericNode1);
      
      ObjectReader objectReader3 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertNotNull(objectNode0);
      
      ObjectReader objectReader4 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      ObjectNode objectNode1 = objectNode0.put((String) null, byteArray0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertEquals(17, byteArray0.length);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertNotNull(objectNode1);
      
      ObjectReader objectReader5 = objectReader1.withValueToUpdate(objectNode1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader5);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader5, objectReader4);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader1);
      assertEquals(17, byteArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertNotNull(objectReader5);
      
      // Undeclared exception!
      try { 
        objectReader5.readTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(jsonFactory3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)100;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser(byteArray0, (int) (byte)1, 2705);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-101), (byte)1, (byte) (-118), (byte)0, (byte)1, (byte)44, (byte)100}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(uTF8StreamJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1.createDeserializationContext(uTF8StreamJsonParser0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-101), (byte)1, (byte) (-118), (byte)0, (byte)1, (byte)44, (byte)100}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)100);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      Integer integer0 = new Integer((byte) (-52));
      assertEquals((-52), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature1, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory3);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (StringReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = new IntNode(15);
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isDouble());
      assertEquals((short)15, intNode0.shortValue());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isShort());
      assertEquals(15L, intNode0.longValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(15, intNode0.intValue());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertNotNull(intNode0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      try { 
        objectReader0.readValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      try { 
        objectReader0.readValues("h4m0l,4&ZH_Gn{");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'h4m0l': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"h4m0l,4&ZH_Gn{\"; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      DeserializationConfig deserializationConfig0 = objectReader1.getConfig();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237036688, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertTrue(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNotNull(deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[1];
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      assertFalse(stack0.contains(objectReader0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(stack0.contains(objectReader0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(dataFormatReaders0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(stack0.contains(objectReader0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<MatchStrength> class0 = MatchStrength.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertNotNull(resolvedRecursiveType0);
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertNotNull(nioPathDeserializer0);
      
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(nioPathDeserializer0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isEnumType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertNotNull(javaType0);
      
      ObjectReader objectReader0 = objectMapper1.readerFor(javaType0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isEnumType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = new IntNode(1);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(1, intNode0.intValue());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertEquals(1.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isInt());
      assertEquals(1L, intNode0.longValue());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short)1, intNode0.shortValue());
      assertEquals(1.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.canConvertToInt());
      assertNotNull(intNode0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      deserializationFeatureArray0[4] = deserializationFeature1;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(5, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.withRootName("Not implemented for ObjectReader");
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(5, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      int int0 = 1910;
      PipedInputStream pipedInputStream0 = new PipedInputStream(15);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readTree((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      Class<DoubleNode> class0 = DoubleNode.class;
      Iterator<DoubleNode> iterator0 = objectReader0.readValues((JsonParser) null, class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(iterator0);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)61;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(512, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) null);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(contextAttributes0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertNotNull(deserializationConfig0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null);
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNotNull(deserializationConfig1);
      
      Base64Variant base64Variant0 = deserializationConfig1.getBase64Variant();
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals((-2), Base64Variant.BASE64_VALUE_PADDING);
      assertEquals((-1), Base64Variant.BASE64_VALUE_INVALID);
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertEquals(Integer.MAX_VALUE, base64Variant0.getMaxLineLength());
      assertEquals('=', base64Variant0.getPaddingChar());
      assertTrue(base64Variant0.usesPadding());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.toString());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.getName());
      assertEquals((byte)61, base64Variant0.getPaddingByte());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNotNull(base64Variant0);
      
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", (-1));
      assertEquals((-2), Base64Variant.BASE64_VALUE_PADDING);
      assertEquals((-1), Base64Variant.BASE64_VALUE_INVALID);
      assertEquals((-1), Base64Variant.BASE64_VALUE_INVALID);
      assertEquals((-2), Base64Variant.BASE64_VALUE_PADDING);
      assertFalse(base64Variant1.equals((Object)base64Variant0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertEquals(Integer.MAX_VALUE, base64Variant0.getMaxLineLength());
      assertEquals('=', base64Variant0.getPaddingChar());
      assertTrue(base64Variant0.usesPadding());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.toString());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.getName());
      assertEquals((byte)61, base64Variant0.getPaddingByte());
      assertEquals((-1), base64Variant1.getMaxLineLength());
      assertEquals("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", base64Variant1.getName());
      assertEquals('=', base64Variant1.getPaddingChar());
      assertTrue(base64Variant1.usesPadding());
      assertEquals("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", base64Variant1.toString());
      assertEquals((byte)61, base64Variant1.getPaddingByte());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNotNull(base64Variant1);
      
      ObjectReader objectReader1 = objectReader0.with(base64Variant1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertNotSame(base64Variant0, base64Variant1);
      assertNotSame(base64Variant1, base64Variant0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals((-2), Base64Variant.BASE64_VALUE_PADDING);
      assertEquals((-1), Base64Variant.BASE64_VALUE_INVALID);
      assertEquals((-1), Base64Variant.BASE64_VALUE_INVALID);
      assertEquals((-2), Base64Variant.BASE64_VALUE_PADDING);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(base64Variant0.equals((Object)base64Variant1));
      assertFalse(base64Variant1.equals((Object)base64Variant0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(Integer.MAX_VALUE, base64Variant0.getMaxLineLength());
      assertEquals('=', base64Variant0.getPaddingChar());
      assertTrue(base64Variant0.usesPadding());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.toString());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.getName());
      assertEquals((byte)61, base64Variant0.getPaddingByte());
      assertEquals((-1), base64Variant1.getMaxLineLength());
      assertEquals("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", base64Variant1.getName());
      assertEquals('=', base64Variant1.getPaddingChar());
      assertTrue(base64Variant1.usesPadding());
      assertEquals("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", base64Variant1.toString());
      assertEquals((byte)61, base64Variant1.getPaddingByte());
      assertNotNull(objectReader1);
      
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      assertFalse(stack0.contains(objectReader1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(stack0.contains(objectReader1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.INCONCLUSIVE;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(stack0.contains(objectReader1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(deserializationConfig1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(stack0.contains(objectReader1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNotNull(dataFormatReaders2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-11);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat(byteArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(5, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertArrayEquals(new byte[] {(byte)4, (byte) (-8), (byte)0, (byte)53, (byte) (-11)}, byteArray0);
      assertFalse(stack0.contains(objectReader1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(deserializationConfig0, deserializationConfig1);
      assertNotSame(deserializationConfig1, deserializationConfig0);
      assertEquals(5, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertArrayEquals(new byte[] {(byte)4, (byte) (-8), (byte)0, (byte)53, (byte) (-11)}, byteArray0);
      assertFalse(stack0.contains(objectReader1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndCloseAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(mappingIterator0);
      
      byte[] byteArray0 = new byte[0];
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0, 699, 1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(inputAccessor_Std0);
      
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, byteArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader2 = objectReader0.withHandler(deserializationProblemHandler0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader2);
      
      HashMap<BooleanNode, ShortNode> hashMap0 = new HashMap<BooleanNode, ShortNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ObjectReader objectReader3 = objectReader0.withAttributes(hashMap0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(objectReader3);
      
      try { 
        objectReader0.readValue((byte[]) null, 373, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(3, deserializationFeatureArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[10] = (byte) (-120);
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(arrayType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertNotNull(dataFormatReaders2);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((double) 64);
      assertEquals((short)64, numericNode0.shortValue());
      assertNull(numericNode0.textValue());
      assertTrue(numericNode0.isDouble());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isLong());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isObject());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isArray());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertEquals(64L, numericNode0.longValue());
      assertFalse(numericNode0.isShort());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isBigInteger());
      assertEquals(64, numericNode0.intValue());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(64.0, numericNode0.doubleValue(), 0.01);
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isIntegralNumber());
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isMissingNode());
      assertTrue(numericNode0.canConvertToLong());
      assertEquals(64.0F, numericNode0.floatValue(), 0.01F);
      assertNotNull(numericNode0);
      
      NumericNode numericNode1 = jsonNodeFactory0.numberNode((byte) (-120));
      assertEquals(JsonNodeType.NUMBER, numericNode1.getNodeType());
      assertFalse(numericNode1.isBigDecimal());
      assertFalse(numericNode1.isArray());
      assertFalse(numericNode1.isDouble());
      assertFalse(numericNode1.isLong());
      assertFalse(numericNode1.booleanValue());
      assertEquals((-120.0), numericNode1.doubleValue(), 0.01);
      assertTrue(numericNode1.isInt());
      assertEquals(0, numericNode1.size());
      assertFalse(numericNode1.isFloat());
      assertEquals((-120), numericNode1.intValue());
      assertEquals((-120L), numericNode1.longValue());
      assertFalse(numericNode1.isFloatingPointNumber());
      assertEquals((short) (-120), numericNode1.shortValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode1.asToken());
      assertTrue(numericNode1.isEmpty());
      assertFalse(numericNode1.isMissingNode());
      assertFalse(numericNode1.isBigInteger());
      assertTrue(numericNode1.canConvertToInt());
      assertFalse(numericNode1.isNaN());
      assertEquals((-120.0F), numericNode1.floatValue(), 0.01F);
      assertFalse(numericNode1.isObject());
      assertFalse(numericNode1.isShort());
      assertTrue(numericNode1.isIntegralNumber());
      assertTrue(numericNode1.canConvertToLong());
      assertNull(numericNode1.textValue());
      assertEquals(JsonParser.NumberType.INT, numericNode1.numberType());
      assertNotNull(numericNode1);
      
      ObjectReader objectReader3 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertEquals(0, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNotNull(objectNode0);
      
      ObjectReader objectReader4 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      ObjectNode objectNode1 = objectNode0.put((String) null, byteArray0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertEquals(17, byteArray0.length);
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertNotNull(objectNode1);
      
      ObjectReader objectReader5 = objectReader1.withValueToUpdate(objectNode1);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader5);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectReader5, objectReader4);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader1);
      assertEquals(17, byteArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertNotNull(objectReader5);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.withFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader1;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader2;
      objectReaderArray0[4] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(javaType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders0.with(objectReaderArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertEquals(5, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders2);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((double) 64);
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.booleanValue());
      assertTrue(numericNode0.canConvertToInt());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(64L, numericNode0.longValue());
      assertFalse(numericNode0.isNaN());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isFloat());
      assertEquals((short)64, numericNode0.shortValue());
      assertEquals(64.0, numericNode0.doubleValue(), 0.01);
      assertEquals(64, numericNode0.intValue());
      assertTrue(numericNode0.isEmpty());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isObject());
      assertEquals(64.0F, numericNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertFalse(numericNode0.isInt());
      assertNull(numericNode0.textValue());
      assertTrue(numericNode0.isDouble());
      assertEquals(0, numericNode0.size());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertFalse(numericNode0.isArray());
      assertNotNull(numericNode0);
      
      NumericNode numericNode1 = jsonNodeFactory0.numberNode((byte)1);
      assertFalse(numericNode1.isShort());
      assertTrue(numericNode1.isIntegralNumber());
      assertEquals(1.0, numericNode1.doubleValue(), 0.01);
      assertTrue(numericNode1.isEmpty());
      assertFalse(numericNode1.isFloatingPointNumber());
      assertTrue(numericNode1.canConvertToLong());
      assertFalse(numericNode1.isFloat());
      assertEquals(1L, numericNode1.longValue());
      assertNull(numericNode1.textValue());
      assertEquals(JsonParser.NumberType.INT, numericNode1.numberType());
      assertEquals(1.0F, numericNode1.floatValue(), 0.01F);
      assertFalse(numericNode1.isBigDecimal());
      assertEquals(1, numericNode1.intValue());
      assertFalse(numericNode1.isObject());
      assertEquals(JsonNodeType.NUMBER, numericNode1.getNodeType());
      assertFalse(numericNode1.isDouble());
      assertFalse(numericNode1.isLong());
      assertFalse(numericNode1.booleanValue());
      assertFalse(numericNode1.isMissingNode());
      assertEquals(0, numericNode1.size());
      assertEquals((short)1, numericNode1.shortValue());
      assertFalse(numericNode1.isNaN());
      assertTrue(numericNode1.canConvertToInt());
      assertFalse(numericNode1.isArray());
      assertFalse(numericNode1.isBigInteger());
      assertTrue(numericNode1.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode1.asToken());
      assertNotNull(numericNode1);
      
      Class<ShortNode> class1 = ShortNode.class;
      JsonDeserializer<Object> jsonDeserializer0 = objectReader2._prefetchRootDeserializer(arrayType0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(jsonDeserializer0);
      
      ObjectReader objectReader3 = objectMapper0.readerFor(class1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNotNull(objectNode0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectReader objectReader4 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNotNull(simpleMixInResolver1);
      
      SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withOverrides(simpleMixInResolver0);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver0);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver1);
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertEquals(0, simpleMixInResolver2.localSize());
      assertNotNull(simpleMixInResolver2);
      
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, simpleMixInResolver2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertNotNull(jsonFactory3);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser((Reader) pipedReader0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(readerBasedJsonParser0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(bufferRecycler0);
      
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNotNull(jsonParserSequence0);
      
      try { 
        objectReader0.readValue((JsonParser) jsonParserSequence0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertNotNull(jsonFactory3);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser((Reader) pipedReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNotNull(readerBasedJsonParser0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializationConfig deserializationConfig0 = null;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(8, deserializationFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(30, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNotNull(jsonParserSequence0);
      
      try { 
        objectReader0.readValue((JsonParser) jsonParserSequence0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[10] = (byte) (-120);
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertNotNull(javaType0);
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertNotNull(objectNode0);
      
      boolean boolean1 = true;
      ObjectNode objectNode1 = objectNode0.put("\"--%S\"92", true);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isMissingNode());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.put("", (double) (byte) (-120));
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertNotNull(objectNode2);
      
      JsonNode jsonNode0 = objectNode2.set("", objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, jsonNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(jsonNode0, objectNode2);
      assertSame(jsonNode0, objectNode1);
      assertSame(jsonNode0, objectNode0);
      assertSame(objectNode0, jsonNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, jsonNode0);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertEquals(2, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertNotNull(jsonNode0);
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(jsonNode0);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, jsonNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(jsonNode0, objectNode2);
      assertSame(jsonNode0, objectNode1);
      assertSame(jsonNode0, objectNode0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectNode0, jsonNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, jsonNode0);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertEquals(2, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertNotNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndCloseAsTree(jsonParser0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      try { 
        objectReader1.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = new IntNode(15);
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isNaN());
      assertEquals((short)15, intNode0.shortValue());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isMissingNode());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloat());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(15L, intNode0.longValue());
      assertFalse(intNode0.isShort());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToLong());
      assertNotNull(intNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.objectNode();
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertNotNull(objectNode0);
      
      Long long0 = new Long(970L);
      assertEquals(970L, (long)long0);
      assertNotNull(long0);
      
      ObjectNode objectNode1 = objectNode0.put("VnNK|GX'LD;\"M+?QT", long0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertNotNull(objectNode1);
      
      ArrayNode arrayNode1 = objectNode1.putArray((String) null);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isLong());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertNotNull(arrayNode1);
      
      Float float0 = new Float((float) 970L);
      assertEquals(970.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FloatNode floatNode0 = (FloatNode)arrayNode1.numberNode(float0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertNull(arrayNode1.numberType());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isLong());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isShort());
      assertNull(arrayNode1.textValue());
      assertEquals(970.0, floatNode0.doubleValue(), 0.01);
      assertEquals(970, floatNode0.intValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isEmpty());
      assertNull(floatNode0.textValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0, floatNode0.size());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(970.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(970L, floatNode0.longValue());
      assertEquals((short)970, floatNode0.shortValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertNotNull(floatNode0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      ContextAttributes.Impl contextAttributes_Impl1 = (ContextAttributes.Impl)contextAttributes_Impl0.withoutSharedAttribute((Object) null);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertNotNull(contextAttributes_Impl1);
      
      ObjectReader objectReader1 = objectMapper0.reader((ContextAttributes) contextAttributes_Impl0);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader1.treeAsTokens(objectNode1);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNotNull(treeTraversingParser0);
      
      ObjectNode objectNode2 = (ObjectNode)objectReader1._bindAndCloseAsTree(treeTraversingParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloat());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertTrue(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertNotNull(objectNode2);
      
      System.setCurrentTimeMillis(0L);
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotSame(jsonNodeFactory1, jsonNodeFactory0);
      assertFalse(jsonNodeFactory1.equals((Object)jsonNodeFactory0));
      assertNotNull(jsonNodeFactory1);
      
      ObjectReader objectReader2 = objectReader1.with(jsonNodeFactory0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(jsonNodeFactory0, jsonNodeFactory1);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(jsonNodeFactory0.equals((Object)jsonNodeFactory1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertEquals(512, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature1);
      assertEquals(512, jsonReadFeature1.getMask());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature1.mappedFeature());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertEquals(1, jsonReadFeature2.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature2.mappedFeature());
      assertFalse(jsonReadFeature2.enabledByDefault());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ObjectReader objectReader3 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(mappingIterator0);
      
      byte[] byteArray0 = new byte[0];
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0, 699, 1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(inputAccessor_Std0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      MappingIterator<Module> mappingIterator1 = objectReader0.readValues(byteArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, byteArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(mappingIterator1);
      
      ObjectReader objectReader1 = objectReader0.withType((Type) class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      // Undeclared exception!
      try { 
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(integer0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedReader pipedReader0 = new PipedReader(2295);
      assertNotNull(pipedReader0);
      
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader2 = objectReader1.withType(class0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertEquals(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0);
      assertEquals(8, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      ObjectReader objectReader3 = objectReader0.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertNotNull(objectReader3);
      
      JsonNode jsonNode0 = objectReader2.createObjectNode();
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.booleanValue());
      assertNotNull(jsonNode0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader2._findRootDeserializer((DeserializationContext) null);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertNotNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        objectReader0._initForReading(defaultDeserializationContext0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues((JsonParser) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
      
      byte[] byteArray0 = new byte[1];
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0, (-4167), (-4167));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(inputAccessor_Std0);
      
      MatchStrength matchStrength0 = jsonFactory0.hasFormat(inputAccessor_Std0);
      assertEquals(MatchStrength.INCONCLUSIVE, matchStrength0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      byteArray0[0] = (byte)1;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      ObjectReader objectReader2 = objectReader0.withType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.withoutRootName();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ObjectReader objectReader4 = objectReader1.without(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      // Undeclared exception!
      try { 
        objectReader4.with((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[16];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertNotNull(tokenFilterContext0);
      
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer(false);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.matches());
      assertEquals("", jsonPointer0.toString());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertNotNull(jsonPointer0);
      
      ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals('/', JsonPointer.SEPARATOR);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.inObject());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inArray());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertFalse(jsonPointer0.mayMatchElement());
      assertTrue(jsonPointer0.matches());
      assertEquals("", jsonPointer0.toString());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertNotNull(objectReader1);
      
      try { 
        objectReader0.readValue(byteArray0, (-4006), (-4006));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1354));
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(placeholderForType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertNotNull(collectionLikeType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionLikeType0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertNotNull(objectReader0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, true, true);
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNotNull(filteringParserDelegate0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider0, defaultDeserializationContext0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader1 = objectMapper1.readerFor(class0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ObjectReader objectReader2 = objectReader1.with(locale0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.objectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode1 = objectNode0.putArray("I9ZH*qq/7\u0007");
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isLong());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertNotNull(arrayNode1);
      
      Float float0 = new Float(3764.0F);
      assertEquals(3764.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FloatNode floatNode0 = (FloatNode)arrayNode1.numberNode(float0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isLong());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.textValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertEquals(3764L, floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.canConvertToInt());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.booleanValue());
      assertEquals((short)3764, floatNode0.shortValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertEquals(3764.0F, floatNode0.floatValue(), 0.01F);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(3764, floatNode0.intValue());
      assertFalse(floatNode0.isObject());
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isLong());
      assertEquals(3764.0, floatNode0.doubleValue(), 0.01);
      assertNotNull(floatNode0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature1;
      deserializationFeatureArray0[5] = deserializationFeature1;
      deserializationFeatureArray0[6] = deserializationFeature1;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1, deserializationFeatureArray0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertEquals(7, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      try { 
        objectReader1.readTree((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = new IntNode(15);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(15L, intNode0.longValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals((short)15, intNode0.shortValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isBigDecimal());
      assertNotNull(intNode0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      Class<DecimalNode> class0 = DecimalNode.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(coreXMLDeserializers_Std0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader1 = objectMapper0.reader(contextAttributes0);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(intNode0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(15L, intNode0.longValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals((short)15, intNode0.shortValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader2 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader2);
      
      IntNode intNode1 = (IntNode)objectReader2._bindAndCloseAsTree(jsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(intNode0, intNode1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(intNode1, intNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertTrue(intNode1.equals((Object)intNode0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(15L, intNode0.longValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals((short)15, intNode0.shortValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(intNode1.isInt());
      assertFalse(intNode1.isBigInteger());
      assertFalse(intNode1.isBigDecimal());
      assertEquals(15, intNode1.intValue());
      assertTrue(intNode1.canConvertToInt());
      assertFalse(intNode1.isArray());
      assertFalse(intNode1.isFloat());
      assertFalse(intNode1.isFloatingPointNumber());
      assertFalse(intNode1.isDouble());
      assertEquals(15.0F, intNode1.floatValue(), 0.01F);
      assertFalse(intNode1.isMissingNode());
      assertEquals(0, intNode1.size());
      assertFalse(intNode1.isNaN());
      assertFalse(intNode1.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode1.asToken());
      assertTrue(intNode1.isEmpty());
      assertEquals((short)15, intNode1.shortValue());
      assertTrue(intNode1.canConvertToLong());
      assertEquals(15.0, intNode1.doubleValue(), 0.01);
      assertFalse(intNode1.isLong());
      assertTrue(intNode1.isIntegralNumber());
      assertEquals(15L, intNode1.longValue());
      assertFalse(intNode1.isObject());
      assertNull(intNode1.textValue());
      assertEquals(JsonNodeType.NUMBER, intNode1.getNodeType());
      assertFalse(intNode1.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode1.numberType());
      assertNotNull(intNode1);
      
      System.setCurrentTimeMillis(0L);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader3 = objectReader1.with(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader3);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertEquals(512, jsonReadFeature0.getMask());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertEquals(1, jsonReadFeature1.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature1.mappedFeature());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertSame(jsonReadFeature2, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(512, jsonReadFeature2.getMask());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature2.mappedFeature());
      
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertSame(jsonReadFeature3, jsonReadFeature1);
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature3.collectDefaults());
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(1, jsonReadFeature3.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature3.mappedFeature());
      
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertEquals(16, jsonReadFeature4.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature4.mappedFeature());
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      
      JsonReadFeature jsonReadFeature5 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertSame(jsonReadFeature5, jsonReadFeature1);
      assertNotSame(jsonReadFeature5, jsonReadFeature0);
      assertNotSame(jsonReadFeature5, jsonReadFeature4);
      assertNotSame(jsonReadFeature5, jsonReadFeature2);
      assertSame(jsonReadFeature5, jsonReadFeature3);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature5);
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature4));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature2));
      assertEquals(0, jsonReadFeature5.collectDefaults());
      assertEquals(1, jsonReadFeature5.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature5.mappedFeature());
      assertFalse(jsonReadFeature5.enabledByDefault());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(1, jsonWriteFeature0.getMask());
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      
      // Undeclared exception!
      try { 
        objectReader1.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(arrayType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertNotNull(dataFormatReaders2);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((double) 64);
      assertEquals(64.0F, numericNode0.floatValue(), 0.01F);
      assertTrue(numericNode0.isEmpty());
      assertFalse(numericNode0.isObject());
      assertEquals((short)64, numericNode0.shortValue());
      assertEquals(JsonParser.NumberType.DOUBLE, numericNode0.numberType());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertEquals(64L, numericNode0.longValue());
      assertFalse(numericNode0.isShort());
      assertTrue(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isIntegralNumber());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isArray());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isFloat());
      assertEquals(64, numericNode0.intValue());
      assertEquals(0, numericNode0.size());
      assertEquals(64.0, numericNode0.doubleValue(), 0.01);
      assertTrue(numericNode0.canConvertToInt());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isMissingNode());
      assertNotNull(numericNode0);
      
      NumericNode numericNode1 = jsonNodeFactory0.numberNode((byte)116);
      assertEquals(0, numericNode1.size());
      assertFalse(numericNode1.isLong());
      assertFalse(numericNode1.isMissingNode());
      assertFalse(numericNode1.isNaN());
      assertEquals(JsonNodeType.NUMBER, numericNode1.getNodeType());
      assertTrue(numericNode1.canConvertToLong());
      assertNull(numericNode1.textValue());
      assertEquals(JsonParser.NumberType.INT, numericNode1.numberType());
      assertTrue(numericNode1.isInt());
      assertEquals((short)116, numericNode1.shortValue());
      assertFalse(numericNode1.booleanValue());
      assertFalse(numericNode1.isArray());
      assertEquals(116.0, numericNode1.doubleValue(), 0.01);
      assertEquals(116, numericNode1.intValue());
      assertEquals(116L, numericNode1.longValue());
      assertFalse(numericNode1.isShort());
      assertFalse(numericNode1.isBigInteger());
      assertEquals(116.0F, numericNode1.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode1.asToken());
      assertTrue(numericNode1.canConvertToInt());
      assertFalse(numericNode1.isBigDecimal());
      assertTrue(numericNode1.isEmpty());
      assertFalse(numericNode1.isObject());
      assertTrue(numericNode1.isIntegralNumber());
      assertFalse(numericNode1.isFloat());
      assertFalse(numericNode1.isFloatingPointNumber());
      assertFalse(numericNode1.isDouble());
      assertNotNull(numericNode1);
      
      ObjectReader objectReader3 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertNotNull(objectNode0);
      
      TypeReference<BeanDeserializer> typeReference0 = (TypeReference<BeanDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonInclude.Value jsonInclude_Value0 = BeanProperty.EMPTY_INCLUDE;
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertNotNull(jsonInclude_Value0);
      
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      
      byte[] byteArray0 = new byte[1];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (int) (byte)0, (int) (byte)0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(1, byteArray0.length);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertNotNull(jsonNode0);
      
      JsonNode jsonNode1 = objectReader0.createArrayNode();
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(JsonNodeType.ARRAY, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isMissingNode());
      assertEquals(0, jsonNode1.size());
      assertEquals(JsonToken.START_ARRAY, jsonNode1.asToken());
      assertTrue(jsonNode1.isArray());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isFloat());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isBigDecimal());
      assertFalse(jsonNode1.isObject());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.booleanValue());
      assertFalse(jsonNode1.isBigInteger());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isInt());
      assertNull(jsonNode1.textValue());
      assertNotNull(jsonNode1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = new IntNode(15);
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.isEmpty());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertEquals(15L, intNode0.longValue());
      assertFalse(intNode0.isFloat());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((short)15, intNode0.shortValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertNotNull(intNode0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      try { 
        objectReader0.readValue("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader2 = objectReader1.withHandler(deserializationProblemHandler0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertNotNull(nioPathDeserializer0);
      
      ObjectReader objectReader3 = objectMapper0.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertNotNull(objectReader3);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1));
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNotNull(charsToNameCanonicalizer1);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader4 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertEquals(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(8, jsonReadFeature0.getMask());
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      Class<ShortNode> class1 = ShortNode.class;
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withHandler((DeserializationProblemHandler) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      
      try { 
        MockURI.URI("<xqd", "", "", "2c");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: <xqd://#2c
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertEquals(2, deserializationFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("f-gShue U6S.qA{");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'f': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (StringReader); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = new IntNode(15);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertEquals(15L, intNode0.longValue());
      assertFalse(intNode0.isShort());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isMissingNode());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(15, intNode0.intValue());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals((short)15, intNode0.shortValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertNotNull(intNode0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1, deserializationFeatureArray0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      Class<MapType> class0 = MapType.class;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JsonNode jsonNode0 = objectReader1.readTree((Reader) stringReader0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader2 = objectReader1.withType(class0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(1, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader2.forType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.asText());
      assertEquals(0, missingNode0.size());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertNotNull(missingNode0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(512, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature1);
      assertEquals(512, jsonReadFeature1.getMask());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature1.mappedFeature());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature2.mappedFeature());
      assertEquals(1, jsonReadFeature2.getMask());
      
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature3, jsonReadFeature1);
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature3.mappedFeature());
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(16, jsonReadFeature3.getMask());
      assertEquals(0, jsonReadFeature3.collectDefaults());
      
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertSame(jsonReadFeature4, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertEquals(1, jsonReadFeature4.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature4.mappedFeature());
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      assertEquals(1, jsonWriteFeature0.getMask());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      formatFeatureArray0[1] = (FormatFeature) jsonWriteFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(2, formatFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader2 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader2);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader3 = objectReader1.without(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(2, formatFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader3);
      
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(objectNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader3._bindAndReadValues(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.objectNode();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode1 = objectNode0.putArray("");
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNotNull(arrayNode1);
      
      Float float0 = new Float(3764.0F);
      assertEquals(3764.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FloatNode floatNode0 = (FloatNode)arrayNode1.numberNode(float0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(floatNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals((short)3764, floatNode0.shortValue());
      assertFalse(floatNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isBigInteger());
      assertTrue(floatNode0.isFloat());
      assertEquals(0, floatNode0.size());
      assertEquals(3764.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isArray());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(3764.0, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isEmpty());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isObject());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isLong());
      assertEquals(3764L, floatNode0.longValue());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(3764, floatNode0.intValue());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isNaN());
      assertNotNull(floatNode0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      ContextAttributes.Impl contextAttributes_Impl1 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertNotNull(contextAttributes_Impl1);
      
      ContextAttributes.Impl contextAttributes_Impl2 = (ContextAttributes.Impl)contextAttributes_Impl1.withoutSharedAttribute((Object) null);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl2);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl0);
      assertNotNull(contextAttributes_Impl2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader((ContextAttributes) contextAttributes_Impl2);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl2);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(arrayNode1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode1, arrayNode0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl2);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNotNull(treeTraversingParser0);
      
      ArrayNode arrayNode2 = (ArrayNode)objectReader0._bindAndCloseAsTree(treeTraversingParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode0, arrayNode2);
      assertNotSame(arrayNode1, arrayNode0);
      assertNotSame(arrayNode1, arrayNode2);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl2);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(arrayNode2, arrayNode1);
      assertNotSame(arrayNode2, arrayNode0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(arrayNode2.equals((Object)arrayNode0));
      assertTrue(arrayNode2.equals((Object)arrayNode1));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(arrayNode1.isBigInteger());
      assertFalse(arrayNode1.isFloat());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isInt());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isDouble());
      assertTrue(arrayNode1.isArray());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isShort());
      assertEquals("", arrayNode1.asText());
      assertNull(arrayNode1.textValue());
      assertFalse(arrayNode1.isIntegralNumber());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertTrue(treeTraversingParser0.isClosed());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(arrayNode2.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode2.getNodeType());
      assertEquals("", arrayNode2.asText());
      assertEquals(0, arrayNode2.size());
      assertTrue(arrayNode2.isEmpty());
      assertFalse(arrayNode2.isFloat());
      assertFalse(arrayNode2.booleanValue());
      assertFalse(arrayNode2.isDouble());
      assertFalse(arrayNode2.isLong());
      assertFalse(arrayNode2.isBigDecimal());
      assertFalse(arrayNode2.isIntegralNumber());
      assertNull(arrayNode2.numberType());
      assertFalse(arrayNode2.isObject());
      assertFalse(arrayNode2.isBigInteger());
      assertFalse(arrayNode2.isInt());
      assertFalse(arrayNode2.isShort());
      assertFalse(arrayNode2.isMissingNode());
      assertNull(arrayNode2.textValue());
      assertTrue(arrayNode2.isArray());
      assertEquals(JsonToken.START_ARRAY, arrayNode2.asToken());
      assertNotNull(arrayNode2);
      
      System.setCurrentTimeMillis(0L);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl2);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertEquals(512, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature1.mappedFeature());
      assertEquals(1, jsonReadFeature1.getMask());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(512, jsonReadFeature2.getMask());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature2.mappedFeature());
      
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertSame(jsonReadFeature3, jsonReadFeature1);
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature3.mappedFeature());
      assertEquals(1, jsonReadFeature3.getMask());
      assertEquals(0, jsonReadFeature3.collectDefaults());
      
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertEquals(16, jsonReadFeature4.getMask());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature4.mappedFeature());
      assertFalse(jsonReadFeature4.enabledByDefault());
      
      JsonReadFeature jsonReadFeature5 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertSame(jsonReadFeature5, jsonReadFeature3);
      assertNotSame(jsonReadFeature5, jsonReadFeature4);
      assertSame(jsonReadFeature5, jsonReadFeature1);
      assertNotSame(jsonReadFeature5, jsonReadFeature2);
      assertNotSame(jsonReadFeature5, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature5);
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature4));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature5.collectDefaults());
      assertFalse(jsonReadFeature5.enabledByDefault());
      assertEquals(1, jsonReadFeature5.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature5.mappedFeature());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(1, jsonWriteFeature0.getMask());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature1;
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature5;
      ObjectReader objectReader2 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl2);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl2, contextAttributes_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(2, formatFeatureArray0.length);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertNotNull(nioPathDeserializer0);
      
      ObjectReader objectReader2 = objectMapper0.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertNotNull(objectReader2);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1));
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNotNull(charsToNameCanonicalizer1);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader3 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<BigIntegerNode> mappingIterator0 = objectReader3.readValues(byteArray0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertEquals(0, byteArray0.length);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
      
      ObjectReader objectReader4 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader1);
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      // Undeclared exception!
      try { 
        objectReader2._new(objectReader1, (JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[24];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        objectReader0.readValue(byteArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(3, jsonParser_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(object0, arrayNode0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader1 = objectReader0.with(contextAttributes1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(objectReader1);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      BaseSettings baseSettings1 = baseSettings0.withAppendedAnnotationIntrospector(annotationIntrospector1);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertNotNull(baseSettings1);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, (ConfigOverrides) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader1, deserializationConfig0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNotNull(objectReader2);
      
      try { 
        objectReader2.readTree("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertNotNull(jsonNode0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "UTF32_LE");
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader2 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      try { 
        objectReader1.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      ObjectReader objectReader3 = objectReader2.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8449, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory3);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8449, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(8449, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(nonBlockingJsonParser0);
      
      TypeReference<LongNode> typeReference0 = (TypeReference<LongNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader3.readValues((JsonParser) nonBlockingJsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(102);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = ':';
      charArray0[2] = '-';
      charArray0[3] = 'F';
      charArray0[4] = 'k';
      charArray0[5] = 'L';
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(1, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature0.mappedFeature());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertEquals(512, jsonReadFeature1.getMask());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature1.mappedFeature());
      assertFalse(jsonReadFeature1.enabledByDefault());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertSame(jsonReadFeature2, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(1, jsonReadFeature2.getMask());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature2.mappedFeature());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertNotSame(jsonReadFeature3, jsonReadFeature1);
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertEquals(16, jsonReadFeature3.getMask());
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature3.mappedFeature());
      assertEquals(0, jsonReadFeature3.collectDefaults());
      
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertSame(jsonReadFeature4, jsonReadFeature0);
      assertSame(jsonReadFeature4, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature4.mappedFeature());
      assertEquals(1, jsonReadFeature4.getMask());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertEquals(1, jsonWriteFeature0.getMask());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[7];
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature4;
      formatFeatureArray0[1] = (FormatFeature) jsonWriteFeature0;
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature2;
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature2;
      formatFeatureArray0[4] = (FormatFeature) jsonReadFeature2;
      formatFeatureArray0[5] = (FormatFeature) jsonReadFeature3;
      formatFeatureArray0[6] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(7, formatFeatureArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      Class<ShortNode> class0 = ShortNode.class;
      // Undeclared exception!
      try { 
        objectReader1.treeToValue((TreeNode) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNotNull(nioPathDeserializer0);
      
      ObjectReader objectReader2 = objectMapper0.readerForUpdating(nioPathDeserializer0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNotNull(objectReader2);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1));
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader1, charsToNameCanonicalizer1);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(formatSchema0);
      
      ObjectReader objectReader3 = objectReader2.with((FormatSchema) null);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader3, objectReader0);
      assertSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNotNull(objectReader3);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader4 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<BigIntegerNode> mappingIterator0 = objectReader4.readValues(byteArray0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertEquals(0, byteArray0.length);
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
      
      ObjectReader objectReader5 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader1);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader4);
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader5);
      
      JsonNode jsonNode0 = objectReader4.readTree(byteArray0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader5);
      assertEquals(0, byteArray0.length);
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader5));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNotNull(jsonNode0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectReader objectReader6 = objectReader2.without(jsonParser_Feature0);
      assertNotSame(objectReader6, objectReader0);
      assertNotSame(objectReader6, objectReader1);
      assertNotSame(objectReader6, objectReader3);
      assertNotSame(objectReader6, objectReader5);
      assertNotSame(objectReader6, objectReader2);
      assertNotSame(objectReader6, objectReader4);
      assertNotSame(objectReader2, objectReader6);
      assertNotSame(objectReader2, objectReader4);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader5);
      assertFalse(objectReader6.equals((Object)objectReader0));
      assertFalse(objectReader6.equals((Object)objectReader1));
      assertFalse(objectReader6.equals((Object)objectReader3));
      assertFalse(objectReader6.equals((Object)objectReader5));
      assertFalse(objectReader6.equals((Object)objectReader2));
      assertFalse(objectReader6.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader5));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertNotNull(objectReader6);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      LongNode longNode0 = LongNode.valueOf(2747L);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertNotNull(longNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy((PropertyNamingStrategy) null);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      BigInteger bigInteger0 = longNode0.bigIntegerValue();
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((short)2747, bigInteger0.shortValue());
      assertEquals((byte) (-69), bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      
      charArray0[1] = 'Z';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1557), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 2, 84, false);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'W', 'Z'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-1557), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertSame(objectMapper0, objectMapper1);
      assertSame(iOContext0, iOContext1);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'W', 'Z'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-1557), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(formatSchema0);
      
      pipedWriter0.close();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withoutAttribute(readerBasedJsonParser0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(iOContext0, iOContext1);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'W', 'Z'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-1557), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.withValueToUpdate((Object) null);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertSame(iOContext0, iOContext1);
      assertEquals(2, charArray0.length);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertArrayEquals(new char[] {'W', 'Z'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isIntegralNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(0, longNode0.size());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertNull(longNode0.textValue());
      assertEquals(2747.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isMissingNode());
      assertEquals(2747.0F, longNode0.floatValue(), 0.01F);
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isObject());
      assertEquals(2747L, longNode0.longValue());
      assertEquals((short)2747, longNode0.shortValue());
      assertTrue(longNode0.isEmpty());
      assertEquals(2747, longNode0.intValue());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-1557), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNotNull(objectReader2);
      
      Class<Module> class0 = Module.class;
      ObjectReader objectReader3 = objectReader0.withType(class0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)3;
      try { 
        objectReader3.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (byte[])\"\u0000n\u0003\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertEquals("", missingNode0.asText());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.booleanValue());
      assertNotNull(missingNode0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(512, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(missingNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("", missingNode0.asText());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.booleanValue());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.JsonNode` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-2);
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int)  (-2), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isIntegralNumber());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.isBigDecimal());
      assertNotNull(missingNode0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(512, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature1.mappedFeature());
      assertEquals(1, jsonReadFeature1.getMask());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature2.mappedFeature());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(512, jsonReadFeature2.getMask());
      
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertSame(jsonReadFeature3, jsonReadFeature1);
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature3.mappedFeature());
      assertEquals(1, jsonReadFeature3.getMask());
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(0, jsonReadFeature3.collectDefaults());
      
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertEquals(16, jsonReadFeature4.getMask());
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature4.mappedFeature());
      
      JsonReadFeature jsonReadFeature5 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertSame(jsonReadFeature5, jsonReadFeature1);
      assertNotSame(jsonReadFeature5, jsonReadFeature0);
      assertSame(jsonReadFeature5, jsonReadFeature3);
      assertNotSame(jsonReadFeature5, jsonReadFeature4);
      assertNotSame(jsonReadFeature5, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature5);
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature4));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature2));
      assertEquals(0, jsonReadFeature5.collectDefaults());
      assertEquals(1, jsonReadFeature5.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature5.mappedFeature());
      assertFalse(jsonReadFeature5.enabledByDefault());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(1, jsonWriteFeature0.getMask());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature1;
      formatFeatureArray0[1] = (FormatFeature) jsonWriteFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(2, formatFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory2 = new JsonFactory();
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotNull(objectMapper2);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      assertNotNull(jacksonAnnotationIntrospector0);
      
      BaseSettings baseSettings1 = baseSettings0.withAppendedAnnotationIntrospector(jacksonAnnotationIntrospector0);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertNotNull(baseSettings1);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withOverrides((ClassIntrospector.MixInResolver) null);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNotNull(simpleMixInResolver1);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      assertNotSame(configOverrides1, configOverrides0);
      assertNotSame(configOverrides0, configOverrides1);
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertNull(configOverrides1.getDefaultMergeable());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides1);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver1, rootNameLookup0, configOverrides1);
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertNull(configOverrides1.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader2 = new ObjectReader(objectMapper2, deserializationConfig0);
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertNull(configOverrides1.getDefaultMergeable());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(objectReader2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader3 = objectReader2.without(jsonParser_Feature0);
      assertNotSame(configOverrides1, configOverrides0);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(baseSettings0, baseSettings1);
      assertNotSame(baseSettings1, baseSettings0);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertNotSame(configOverrides0, configOverrides1);
      assertFalse(configOverrides1.equals((Object)configOverrides0));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(baseSettings0.equals((Object)baseSettings1));
      assertFalse(baseSettings1.equals((Object)baseSettings0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(configOverrides0.equals((Object)configOverrides1));
      assertNull(configOverrides1.getDefaultMergeable());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      Iterable<AbstractTypeResolver> iterable0 = deserializerFactoryConfig0.abstractTypeResolvers();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(iterable0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory1);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory1);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactory0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(0);
      assertSame(tokenFilter0, tokenFilter1);
      assertSame(tokenFilter1, tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertNotNull(tokenFilter1);
      
      ObjectReader objectReader3 = new ObjectReader(objectReader1, tokenFilter0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(objectReader3);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((byte[]) null, (-1796), (int) 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType((JavaType) null);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertNotNull(dataFormatReaders2);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader3 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertNotNull(objectNode0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ObjectReader objectReader4 = objectReader1.without(jsonParser_Feature1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Vector<JsonNode> vector0 = new Vector<JsonNode>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.objectNode();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      ObjectNode objectNode1 = objectNode0.put("Tg,;.w2-o 5)61E", byteArray0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertNotNull(objectNode1);
      
      Short short0 = new Short((byte)30);
      assertEquals((short)30, (short)short0);
      assertNotNull(short0);
      
      ObjectNode objectNode2 = objectNode1.put("B/H.", short0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertTrue(objectNode2.isObject());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertNotNull(objectNode2);
      
      ArrayNode arrayNode1 = objectNode2.putArray((String) null);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertNotSame(arrayNode1, arrayNode0);
      assertEquals(1, byteArray0.length);
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(arrayNode1.isBigInteger());
      assertNull(arrayNode1.textValue());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.isBigDecimal());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isInt());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.booleanValue());
      assertFalse(arrayNode1.isShort());
      assertTrue(arrayNode1.isArray());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertEquals(0, arrayNode1.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertNotNull(arrayNode1);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      FloatNode floatNode0 = (FloatNode)arrayNode0.numberNode(float0);
      assertNotSame(arrayNode0, arrayNode1);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToInt());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.booleanValue());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isLong());
      assertNotNull(floatNode0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      ContextAttributes.Impl contextAttributes_Impl1 = (ContextAttributes.Impl)contextAttributes_Impl0.withoutSharedAttribute(objectNode2);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertEquals(1, byteArray0.length);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertNotNull(contextAttributes_Impl1);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) contextAttributes_Impl1);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertEquals(1, byteArray0.length);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertNotNull(objectReader0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(floatNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertEquals(1, byteArray0.length);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToInt());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.booleanValue());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isLong());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertNotNull(treeTraversingParser0);
      
      FloatNode floatNode1 = (FloatNode)objectReader0._bindAndCloseAsTree(treeTraversingParser0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertNotSame(floatNode0, floatNode1);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertNotSame(floatNode1, floatNode0);
      assertEquals(1, byteArray0.length);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertTrue(floatNode1.equals((Object)floatNode0));
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isNaN());
      assertFalse(floatNode0.isBigInteger());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToInt());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.booleanValue());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals(0, floatNode0.size());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isMissingNode());
      assertNull(floatNode0.textValue());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isLong());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertTrue(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertTrue(floatNode1.canConvertToLong());
      assertFalse(floatNode1.isObject());
      assertEquals((short) (-1), floatNode1.shortValue());
      assertEquals((-1.0), floatNode1.doubleValue(), 0.01);
      assertFalse(floatNode1.isInt());
      assertEquals((-1), floatNode1.intValue());
      assertFalse(floatNode1.isShort());
      assertEquals((-1L), floatNode1.longValue());
      assertFalse(floatNode1.isBigInteger());
      assertTrue(floatNode1.isEmpty());
      assertFalse(floatNode1.isBigDecimal());
      assertFalse(floatNode1.isIntegralNumber());
      assertFalse(floatNode1.isNaN());
      assertFalse(floatNode1.isDouble());
      assertFalse(floatNode1.isLong());
      assertFalse(floatNode1.isMissingNode());
      assertTrue(floatNode1.isFloat());
      assertEquals(0, floatNode1.size());
      assertFalse(floatNode1.booleanValue());
      assertNull(floatNode1.textValue());
      assertEquals(JsonNodeType.NUMBER, floatNode1.getNodeType());
      assertTrue(floatNode1.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode1.asToken());
      assertEquals((-1.0F), floatNode1.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode1.numberType());
      assertFalse(floatNode1.isArray());
      assertTrue(floatNode1.canConvertToInt());
      assertNotNull(floatNode1);
      
      System.setCurrentTimeMillis(516L);
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertNotSame(arrayNode0, arrayNode1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(contextAttributes_Impl0, contextAttributes_Impl1);
      assertSame(contextAttributes_Impl1, contextAttributes_Impl0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(1, byteArray0.length);
      assertTrue(arrayNode0.equals((Object)arrayNode1));
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isArray());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.textValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertEquals(512, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature1.mappedFeature());
      assertEquals(1, jsonReadFeature1.getMask());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature2.mappedFeature());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertEquals(512, jsonReadFeature2.getMask());
      
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertSame(jsonReadFeature3, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(1, jsonReadFeature3.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature3.mappedFeature());
      assertEquals(0, jsonReadFeature3.collectDefaults());
      
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature4.mappedFeature());
      assertEquals(16, jsonReadFeature4.getMask());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      
      JsonReadFeature jsonReadFeature5 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature5, jsonReadFeature4);
      assertNotSame(jsonReadFeature5, jsonReadFeature0);
      assertNotSame(jsonReadFeature5, jsonReadFeature2);
      assertSame(jsonReadFeature5, jsonReadFeature1);
      assertSame(jsonReadFeature5, jsonReadFeature3);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature5);
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature4));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature2));
      assertEquals(0, jsonReadFeature5.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature5.mappedFeature());
      assertEquals(1, jsonReadFeature5.getMask());
      assertFalse(jsonReadFeature5.enabledByDefault());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(1, jsonWriteFeature0.getMask());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      
      // Undeclared exception!
      try { 
        objectReader1.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[24];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      objectReader1._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isLong());
      assertEquals(0, missingNode0.size());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isArray());
      assertNotNull(missingNode0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(512, jsonReadFeature0.getMask());
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(1, jsonReadFeature1.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature1.mappedFeature());
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature2.mappedFeature());
      assertEquals(512, jsonReadFeature2.getMask());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertSame(jsonReadFeature3, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertEquals(0, jsonReadFeature3.collectDefaults());
      assertEquals(1, jsonReadFeature3.getMask());
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature3.mappedFeature());
      
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature4.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature4.mappedFeature());
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(16, jsonReadFeature4.getMask());
      
      JsonReadFeature jsonReadFeature5 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertSame(jsonReadFeature5, jsonReadFeature3);
      assertNotSame(jsonReadFeature5, jsonReadFeature4);
      assertNotSame(jsonReadFeature5, jsonReadFeature2);
      assertNotSame(jsonReadFeature5, jsonReadFeature0);
      assertSame(jsonReadFeature5, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature5);
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature4));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature5.collectDefaults());
      assertFalse(jsonReadFeature5.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature5.mappedFeature());
      assertEquals(1, jsonReadFeature5.getMask());
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(1, jsonWriteFeature0.getMask());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature1;
      formatFeatureArray0[1] = (FormatFeature) jsonWriteFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(2, formatFeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      Class<ShortNode> class0 = ShortNode.class;
      try { 
        objectReader0.treeToValue((TreeNode) missingNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.JsonNode` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isInt());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertNotNull(missingNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertNotNull(charsToNameCanonicalizer0);
      
      PipedReader pipedReader1 = new PipedReader();
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertNotNull(pipedReader1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader1, objectReader0, charsToNameCanonicalizer0, (char[]) null, 0, 33, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(pipedReader1, pipedReader0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(pipedReader1.equals((Object)pipedReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(512, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(512, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNotNull(readerBasedJsonParser1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      assertEquals(JsonWriteFeature.WRITE_NAN_AS_STRINGS, jsonWriteFeature0);
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      
      ObjectReader objectReader2 = objectReader0.without((FormatFeature) jsonWriteFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      String string0 = null;
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader2 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(1, jsonParser_FeatureArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[24];
      ObjectReader objectReader3 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader3);
      assertSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode0 = objectNode0.putArray("");
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      ValueNode valueNode0 = arrayNode0.numberNode((Float) null);
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isArray());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isLong());
      assertNotNull(valueNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(valueNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isArray());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isLong());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(jsonParser0);
      assertSame(valueNode0, jsonNode0);
      assertSame(jsonNode0, valueNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, valueNode0.asToken());
      assertEquals("null", valueNode0.asText());
      assertTrue(valueNode0.isEmpty());
      assertFalse(valueNode0.isBigDecimal());
      assertFalse(valueNode0.isMissingNode());
      assertNull(valueNode0.textValue());
      assertFalse(valueNode0.isBigInteger());
      assertFalse(valueNode0.isInt());
      assertFalse(valueNode0.isShort());
      assertEquals(JsonNodeType.NULL, valueNode0.getNodeType());
      assertFalse(valueNode0.booleanValue());
      assertFalse(valueNode0.isDouble());
      assertFalse(valueNode0.isObject());
      assertNull(valueNode0.numberType());
      assertFalse(valueNode0.isArray());
      assertEquals(0, valueNode0.size());
      assertFalse(valueNode0.isFloatingPointNumber());
      assertFalse(valueNode0.isIntegralNumber());
      assertFalse(valueNode0.isFloat());
      assertFalse(valueNode0.isLong());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonNodeType.NULL, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("null", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, jsonNode0.asToken());
      assertNotNull(jsonNode0);
      
      System.setCurrentTimeMillis(1L);
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[7];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(512, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature0.mappedFeature());
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertEquals(1, jsonReadFeature1.getMask());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature1.mappedFeature());
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertSame(jsonReadFeature2, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertFalse(jsonReadFeature2.enabledByDefault());
      assertEquals(512, jsonReadFeature2.getMask());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature2.mappedFeature());
      
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature2;
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertSame(jsonReadFeature3, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature3.collectDefaults());
      assertFalse(jsonReadFeature3.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature3.mappedFeature());
      assertEquals(1, jsonReadFeature3.getMask());
      
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature3;
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertEquals(16, jsonReadFeature4.getMask());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature4.mappedFeature());
      assertFalse(jsonReadFeature4.enabledByDefault());
      
      formatFeatureArray0[4] = (FormatFeature) jsonReadFeature4;
      JsonReadFeature jsonReadFeature5 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature5, jsonReadFeature0);
      assertNotSame(jsonReadFeature5, jsonReadFeature4);
      assertSame(jsonReadFeature5, jsonReadFeature1);
      assertSame(jsonReadFeature5, jsonReadFeature3);
      assertNotSame(jsonReadFeature5, jsonReadFeature2);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature5);
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature4));
      assertFalse(jsonReadFeature5.equals((Object)jsonReadFeature2));
      assertEquals(0, jsonReadFeature5.collectDefaults());
      assertFalse(jsonReadFeature5.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature5.mappedFeature());
      assertEquals(1, jsonReadFeature5.getMask());
      
      formatFeatureArray0[5] = (FormatFeature) jsonReadFeature5;
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      assertEquals(JsonWriteFeature.QUOTE_FIELD_NAMES, jsonWriteFeature0);
      assertEquals(JsonGenerator.Feature.QUOTE_FIELD_NAMES, jsonWriteFeature0.mappedFeature());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(1, jsonWriteFeature0.getMask());
      
      formatFeatureArray0[6] = (FormatFeature) jsonWriteFeature0;
      ObjectReader objectReader2 = objectReader1.withoutFeatures(formatFeatureArray0);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertEquals(7, formatFeatureArray0.length);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[5];
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      
      // Undeclared exception!
      try { 
        objectReader1.readTree(byteArray0, (int) (byte)108, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertNotNull(jsonNode0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertEquals(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0);
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertEquals(8, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      
      JsonNode jsonNode1 = objectReader0.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", jsonNode1.asText());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isFloat());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isBigInteger());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isArray());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isShort());
      assertTrue(jsonNode1.isObject());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isDouble());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isLong());
      assertFalse(jsonNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertFalse(jsonNode1.booleanValue());
      assertNotNull(jsonNode1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNode0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1722), objectMapper1, (OutputStream) null, byteArray0, 0, true);
      assertEquals(3, byteArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertArrayEquals(new byte[] {(byte)97, (byte) (-23), (byte)0}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1722), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertNotNull(uTF8JsonGenerator0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-23), (byte)0}, byteArray0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertNotNull(defaultPrettyPrinter0);
      
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0, defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertNotNull(defaultPrettyPrinter1);
      
      DefaultPrettyPrinter defaultPrettyPrinter2 = new DefaultPrettyPrinter(defaultPrettyPrinter1);
      assertFalse(defaultPrettyPrinter0.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
      assertFalse(defaultPrettyPrinter2.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter2.equals((Object)defaultPrettyPrinter0));
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertNotNull(defaultPrettyPrinter2);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertNotSame(defaultPrettyPrinter0, defaultPrettyPrinter1);
      assertNotSame(defaultPrettyPrinter0, defaultPrettyPrinter2);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter0);
      assertNotSame(defaultPrettyPrinter1, defaultPrettyPrinter2);
      assertNotSame(defaultPrettyPrinter2, defaultPrettyPrinter1);
      assertNotSame(defaultPrettyPrinter2, defaultPrettyPrinter0);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultPrettyPrinter0.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter0.equals((Object)defaultPrettyPrinter2));
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter0));
      assertFalse(defaultPrettyPrinter1.equals((Object)defaultPrettyPrinter2));
      assertFalse(defaultPrettyPrinter2.equals((Object)defaultPrettyPrinter1));
      assertFalse(defaultPrettyPrinter2.equals((Object)defaultPrettyPrinter0));
      assertArrayEquals(new byte[] {(byte)97, (byte) (-23), (byte)0}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-1722), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals((-1722), uTF8JsonGenerator1.getFeatureMask());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertNotNull(uTF8JsonGenerator1);
      
      // Undeclared exception!
      try { 
        objectReader0.writeTree(uTF8JsonGenerator1, jsonNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isObject());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isIntegralNumber());
      assertNotNull(missingNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(charsToNameCanonicalizer0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader1 = objectReader0.withType(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      assertEquals(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertEquals(8, jsonReadFeature0.getMask());
      
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, jsonReadFeature0.mappedFeature());
      assertEquals(8, jsonReadFeature0.getMask());
      assertNotNull(objectReader2);
      
      JsonNode jsonNode0 = objectReader1.createObjectNode();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(jsonNode0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, ",!");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      try { 
        objectReader2._inputStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader3 = objectReader2.withView(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<String> class1 = String.class;
      ObjectReader objectReader4 = objectMapper0.readerFor(class1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      String string0 = null;
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      ObjectReader objectReader3 = objectReader2.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      JsonNode jsonNode0 = objectReader1.readTree(byteArray0, 48, (-808));
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(17, byteArray0.length);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertNotNull(jsonNode0);
      
      JsonNode jsonNode1 = objectReader0.createObjectNode();
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertEquals(JsonNodeType.OBJECT, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, jsonNode1.asToken());
      assertFalse(jsonNode1.isFloat());
      assertFalse(jsonNode1.isDouble());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isArray());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isLong());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isShort());
      assertTrue(jsonNode1.isObject());
      assertFalse(jsonNode1.booleanValue());
      assertEquals(0, jsonNode1.size());
      assertNull(jsonNode1.numberType());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isBigDecimal());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(jsonNode1);
      
      try { 
        objectReader2.readValues(byteArray0, (-1950), (-1950));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"tt\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(arrayType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertNotNull(dataFormatReaders2);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader3 = objectMapper0.reader();
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectReader objectReader4 = objectReader3.with(jsonParser_Feature1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1392);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        objectReader3._findRootDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      ObjectReader objectReader1 = objectReader0.with(timeZone0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(objectReader1);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectReader objectReader2 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(3, jsonParser_FeatureArray0.length);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[5];
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      byte byte0 = (byte)108;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer(defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertNotNull(objectNode0);
      
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory1 = objectReader0.getFactory();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      assertEquals(JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS, jsonReadFeature0);
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(64, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      assertNotSame(jsonReadFeature1, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_TRAILING_COMMA, jsonReadFeature1);
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature0));
      assertEquals(0, jsonReadFeature1.collectDefaults());
      assertEquals(512, jsonReadFeature1.getMask());
      assertFalse(jsonReadFeature1.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_TRAILING_COMMA, jsonReadFeature1.mappedFeature());
      
      formatFeatureArray0[1] = (FormatFeature) jsonReadFeature1;
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature2);
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertEquals(1, jsonReadFeature2.getMask());
      assertEquals(0, jsonReadFeature2.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature2.mappedFeature());
      assertFalse(jsonReadFeature2.enabledByDefault());
      
      formatFeatureArray0[2] = (FormatFeature) jsonReadFeature2;
      JsonReadFeature jsonReadFeature3 = JsonReadFeature.ALLOW_YAML_COMMENTS;
      assertNotSame(jsonReadFeature3, jsonReadFeature0);
      assertNotSame(jsonReadFeature3, jsonReadFeature2);
      assertNotSame(jsonReadFeature3, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_YAML_COMMENTS, jsonReadFeature3);
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature3.equals((Object)jsonReadFeature1));
      assertEquals(0, jsonReadFeature3.collectDefaults());
      assertEquals(2, jsonReadFeature3.getMask());
      assertEquals(JsonParser.Feature.ALLOW_YAML_COMMENTS, jsonReadFeature3.mappedFeature());
      assertFalse(jsonReadFeature3.enabledByDefault());
      
      formatFeatureArray0[3] = (FormatFeature) jsonReadFeature3;
      JsonReadFeature jsonReadFeature4 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      assertNotSame(jsonReadFeature4, jsonReadFeature0);
      assertNotSame(jsonReadFeature4, jsonReadFeature3);
      assertNotSame(jsonReadFeature4, jsonReadFeature2);
      assertNotSame(jsonReadFeature4, jsonReadFeature1);
      assertEquals(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS, jsonReadFeature4);
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature3));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature4.equals((Object)jsonReadFeature1));
      assertEquals(16, jsonReadFeature4.getMask());
      assertEquals(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, jsonReadFeature4.mappedFeature());
      assertFalse(jsonReadFeature4.enabledByDefault());
      assertEquals(0, jsonReadFeature4.collectDefaults());
      
      formatFeatureArray0[4] = (FormatFeature) jsonReadFeature4;
      ObjectReader objectReader2 = objectReader1.withFeatures(formatFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(5, formatFeatureArray0.length);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MockFile mockFile0 = new MockFile("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", "V0!i(bDy~q");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("V0!i(bDy~q", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", mockFile0.getParent());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s/V0!i(bDy~q", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      ObjectReader objectReader3 = objectReader2.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader4 = objectReader3.with(jsonParser_Feature1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader4);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      ObjectReader objectReader5 = objectReader4.withRootName((PropertyName) null);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader1);
      assertSame(objectReader5, objectReader4);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader5);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader4);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(objectReader4, objectReader5);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader5);
      
      boolean boolean2 = objectReader4.isEnabled(jsonParser_Feature1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader5);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader4);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(objectReader4, objectReader5);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader5));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader5));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader5));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<Integer> class0 = Integer.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = typeBindings0.findBoundType("");
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNull(javaType0);
      
      // Undeclared exception!
      try { 
        objectReader3.withType((Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = IntNode.valueOf(15);
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(15.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertEquals((short)15, intNode0.shortValue());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isFloat());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(15.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isBigDecimal());
      assertNull(intNode0.textValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(15, intNode0.intValue());
      assertEquals(15L, intNode0.longValue());
      assertNotNull(intNode0);
      
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1, deserializationFeatureArray0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      try { 
        objectReader1.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (StringReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[5];
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader2, objectReader3);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectReader objectReader4 = objectMapper0.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader4);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader5 = objectReader4.with(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader4, objectReader5);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader5, objectReader4);
      assertNotSame(objectReader5, objectReader1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader5);
      
      try { 
        objectReader4.readValue(byteArray0, 48, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s/V0!i(bDy~q");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      assertTrue(boolean0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean1 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MockFile mockFile0 = new MockFile("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", "V0!i(bDy~q");
      assertNotNull(mockFile0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      jsonParser_FeatureArray0[2] = jsonParser_Feature0;
      jsonParser_FeatureArray0[3] = jsonParser_Feature0;
      jsonParser_FeatureArray0[4] = jsonParser_Feature0;
      ObjectReader objectReader3 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertEquals(5, jsonParser_FeatureArray0.length);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("V0!i(bDy~q", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s/V0!i(bDy~q", mockFile0.toString());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      int int0 = (-2264);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class0, (-2264));
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertNotNull(objectIdGenerators_IntSequenceGenerator0);
      
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(class0);
      assertEquals((-2264), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertNotNull(integer0);
      
      ObjectReader objectReader1 = objectReader0.withAttribute(jsonNodeFactory0, integer0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectIdGenerators_IntSequenceGenerator0.maySerializeAsObject());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.at("No value type configured for ObjectReader");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"No value type configured for ObjectReader\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertNotNull(deserializerFactoryConfig1);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(boolean0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader1 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      ObjectReader objectReader3 = objectReader2.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      // Undeclared exception!
      try { 
        objectReader2.readValue(byteArray0, 48, (int) 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      String string0 = null;
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader2.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      StringReader stringReader0 = new StringReader("OBJECT_AND_NON_CONCRETE");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'OBJECT_AND_NON_CONCRETE': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 47]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature1, false);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory3);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(30, jsonFactory4.getGeneratorFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory4);
      
      ObjectReader objectReader3 = objectReader2._new(objectReader1, jsonFactory4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(30, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(30, jsonFactory4.getGeneratorFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(objectReader3);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      // Undeclared exception!
      try { 
        objectReader1.readTree(byteArray0, (int) (byte) (-66), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -66
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute((Object) null);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.at((String) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (3412) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[14];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(14, objectReaderArray0.length);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null, 3, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      Class<FloatNode> class0 = FloatNode.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) class0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(injectableValues_Std1);
      
      ShortNode shortNode0 = ShortNode.valueOf((short)0);
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertNotNull(shortNode0);
      
      POJONode pOJONode0 = new POJONode(shortNode0);
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertNotNull(pOJONode0);
      
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue("", (Object) pOJONode0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertNotNull(injectableValues_Std2);
      
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertFalse(boolean0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, shortNode0.intValue());
      assertFalse(shortNode0.isFloat());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isObject());
      assertEquals(0.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.isEmpty());
      assertEquals(0.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isNaN());
      assertEquals(0, shortNode0.size());
      assertEquals((short)0, shortNode0.shortValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.canConvertToLong());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(0L, shortNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(shortNode0.isArray());
      assertNull(shortNode0.textValue());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)116;
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'tt\u0000v': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (byte[])\"t\u0000t\u0000\u0000\u0000v\u0000t\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      MockFile mockFile0 = new MockFile("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", "V0!i(bDy~q");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s/V0!i(bDy~q", mockFile0.toString());
      assertEquals("V0!i(bDy~q", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      MockFile mockFile0 = new MockFile("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", "V0!i(bDy~q");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s/V0!i(bDy~q", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertEquals("/experiment/Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("V0!i(bDy~q", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertNotNull(jsonNode0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1404), (-1404));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1404), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JsonNode jsonNode1 = objectReader0.readTree((InputStream) byteArrayInputStream0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonNode1, jsonNode0);
      assertEquals(0, byteArray0.length);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((-1404), byteArrayInputStream0.available());
      assertEquals("", jsonNode1.asText());
      assertFalse(jsonNode1.isDouble());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isFloat());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode1.asToken());
      assertFalse(jsonNode1.booleanValue());
      assertFalse(jsonNode1.isBigDecimal());
      assertFalse(jsonNode1.isArray());
      assertNull(jsonNode1.numberType());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isObject());
      assertFalse(jsonNode1.isInt());
      assertNull(jsonNode1.textValue());
      assertTrue(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isBigInteger());
      assertNotNull(jsonNode1);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)17;
      byteArray1[7] = (byte) (-9);
      byteArray1[8] = (byte)0;
      try { 
        objectReader0.readTree(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\u0000>q\u0000\u0001\u0001\u0011\uFFFD\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "";
      JsonNode jsonNode0 = objectReader0.readTree("");
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 518, 518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 518
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(contextAttributes0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectReader1);
      
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertTrue(boolean0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (int) (byte)56, (-905));
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(5, byteArray0.length);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertArrayEquals(new byte[] {(byte)52, (byte)56, (byte)3, (byte)112, (byte)112}, byteArray0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(jsonNode0);
      
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): Expected space separating root-level values
         //  at [Source: (byte[])\"48\u0003pp\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(contextAttributes0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.withType((JavaType) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      boolean boolean0 = objectReader1.isEnabled(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonParser_Feature1, jsonParser_Feature0);
      assertTrue(boolean0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      ObjectReader objectReader3 = objectReader0.with(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader3);
      
      byteArray0[5] = (byte) (-70);
      try { 
        objectReader0.readTree(byteArray0, (int) (byte)0, 297);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('p' (code 112)): Expected space separating root-level values
         //  at [Source: (byte[])\"4p\u0000\u0000\u057A\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      // Undeclared exception!
      try { 
        objectReader1.readTree(byteArray0, (int) (byte) (-66), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -66
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.at((String) null);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader2);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      Class<CollectionType> class0 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(arrayType0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType(arrayType0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertEquals(1, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(dataFormatReaders2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (byte)116);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReader0.withFormatDetection(objectReaderArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer.createRoot();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      objectReader0.with(jsonParser_Feature0);
      objectReader0.withRootName((PropertyName) null);
      objectReader0.isEnabled(jsonParser_Feature0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      objectReader0.isEnabled(deserializationFeature0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)62;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'P\u493C': was expecting ('true', 'false' or 'null')
         //  at [Source: (byte[])\"P\u0000<I>\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      objectReader0.readTree("");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      objectReader0.isEnabled(jsonParser_Feature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      objectReader0.isEnabled(jsonParser_Feature0);
      byte[] byteArray0 = new byte[17];
      objectReader0.at((String) null);
      // Undeclared exception!
      try { 
        objectReader0.readTree((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(264, 264);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory1.constructParametricType(class0, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ObjectReader objectReader1 = objectReader0.withoutAttribute(referenceType0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        objectReader1._bindAndClose((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      objectReader0.isEnabled(jsonParser_Feature0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ObjectReader[] objectReaderArray0 = new ObjectReader[3];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(decimalNode0);
      objectReaderArray0[2] = objectReader1;
      objectReader0.withFormatDetection(objectReaderArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMaxInputLookahead(2689);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        dataFormatReaders2.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature1);
      byte[] byteArray0 = new byte[0];
      int int0 = 19;
      TypeReference<NioPathDeserializer> typeReference0 = (TypeReference<NioPathDeserializer>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader1.withType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.getAttributes();
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      objectReader1.isEnabled(jsonParser_Feature1);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      StringReader stringReader0 = new StringReader("1x");
      ObjectReader objectReader2 = objectReader1.withType(class0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectReader objectReader3 = objectReader0.with((FormatFeature) jsonReadFeature0);
      objectReader1.createObjectNode();
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      IntNode.valueOf(15);
      HashMap<Integer, BigIntegerNode> hashMap0 = new HashMap<Integer, BigIntegerNode>();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1, deserializationFeatureArray0);
      Class<MapType> class0 = MapType.class;
      StringReader stringReader0 = new StringReader("");
      ObjectReader objectReader2 = objectReader1.withType(class0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectReader objectReader3 = objectReader1.with((FormatFeature) jsonReadFeature0);
      objectReader1.createObjectNode();
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      objectReader0.with((InjectableValues) injectableValues_Std0);
      objectReader0.version();
      JavaType javaType0 = objectMapper0.constructType(class0);
      objectReader0._prefetchRootDeserializer(javaType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      try { 
        MockURI.URI("", "", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.getAttributes();
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      objectReader1.isEnabled(jsonParser_Feature0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      objectReader0.withFormatDetection((DataFormatReaders) null);
      JsonFactory jsonFactory3 = new JsonFactory(objectReader1);
      ObjectReader objectReader2 = objectMapper0.reader();
      JsonFactory jsonFactory4 = new JsonFactory(objectReader2);
      try { 
        objectReader1.readTree("U<%U 13=et,=!.");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'U': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"U<%U 13=et,=!.\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(integer0);
      PipedReader pipedReader0 = new PipedReader(2295);
      StringReader stringReader0 = new StringReader("");
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader2 = objectReader1.withType(class0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectReader objectReader3 = objectReader0.with((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader3, objectReader0);
      
      objectReader2.createObjectNode();
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PipedReader pipedReader0 = new PipedReader(2295);
      ObjectReader objectReader1 = objectReader0.withFormatDetection((DataFormatReaders) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = new JsonFactory((ObjectCodec) null);
      JsonNode jsonNode0 = objectReader1.readTree("");
      assertTrue(jsonNode0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, 3, 0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      objectReader1.isEnabled(jsonParser_Feature0);
      DeserializationConfig deserializationConfig0 = objectReader0.getConfig();
      assertFalse(deserializationConfig0.requiresFullValue());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReader0.withFormatDetection(objectReaderArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, 3, 0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      try { 
        objectReader0.readValues((JsonParser) filteringParserDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      try { 
        objectReader0.readTree((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      TypeReference<PlaceholderForType> typeReference0 = (TypeReference<PlaceholderForType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValue(jsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory4.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        objectReader0.readValue(jsonParser0, (TypeReference<BeanDeserializer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      Integer integer0 = new Integer(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(integer0);
      PipedReader pipedReader0 = new PipedReader(2269);
      Integer.valueOf(0);
      objectReader1.withFormatDetection((DataFormatReaders) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0, 58, (-170));
      jsonFactory0.hasFormat(inputAccessor_Std0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      objectReader0.with((FormatFeature) jsonReadFeature0);
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'a';
      charArray0[2] = '8';
      jsonFactory0.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(integer1, deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("`typeFromId(DatabindContext,String)");
      jsonFactory3.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader1 = objectMapper1.reader(deserializationFeature0);
      objectReader1.getAttributes();
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      objectReader0.forType(class0);
      objectReader0.isEnabled(jsonParser_Feature0);
      byte[] byteArray0 = new byte[0];
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0, 0, 248);
      // Undeclared exception!
      try { 
        jsonFactory1.hasFormat(inputAccessor_Std0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.format.InputAccessor$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory1);
      jsonFactoryBuilder0.rootValueSeparator(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      JsonFactory jsonFactory2 = new JsonFactory(jsonFactoryBuilder0);
      jsonFactory1.createNonBlockingByteArrayParser();
      objectReader0.createObjectNode();
      // Undeclared exception!
      try { 
        objectReader0._inputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      Class<DecimalNode> class0 = DecimalNode.class;
      objectReader0.withType(class0);
      // Undeclared exception!
      try { 
        objectReader0.forType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      // Undeclared exception!
      try { 
        objectReader0._bindAndCloseAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedHashSet> class1 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(collectionType0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-98);
      PipedReader pipedReader0 = new PipedReader((byte)101);
      ObjectReader objectReader2 = objectReader0.withFormatDetection((DataFormatReaders) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader1);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory1);
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.highestNonEscapedChar(1880);
      JsonFactory jsonFactory2 = new JsonFactory(jsonFactoryBuilder1);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      try { 
        objectReader2._bindAndCloseAsTree(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 158)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.getAttributes();
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      objectReader1.isEnabled(jsonParser_Feature1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-70);
      int int0 = 58;
      try { 
        objectReader0.readTree(byteArray0, (int) (byte)0, 297);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('p' (code 112)): Expected space separating root-level values
         //  at [Source: (byte[])\"4p\u0000\u0000\u057A\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      assertNotSame(objectReader0, objectReader1);
      
      Version version0 = objectReader0.version();
      assertEquals(0, version0.getPatchLevel());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      PropertyName propertyName0 = null;
      PropertyName propertyName1 = PropertyName.NO_NAME;
      objectReader0.withRootName(propertyName1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      objectReader0.isEnabled(jsonParser_Feature0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader1 = objectMapper0.reader(jsonNodeFactory0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      objectReader2.with(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      objectReader0.isEnabled(jsonParser_Feature0);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      objectReader0.at((String) null);
      byteArray0[2] = (byte)0;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unexpected EOF in the middle of a 4-byte UTF-32 char: got 1, needed 4, at char #4, byte #17)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      try { 
        objectReader0.readTree("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (2143) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.getAttributes();
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      objectReader1.isEnabled(jsonParser_Feature1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-70);
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0, 58, (byte)0);
      jsonFactory0.hasFormat(inputAccessor_Std0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      objectReader0.with((FormatFeature) jsonReadFeature0);
      objectReader1.createObjectNode();
      char[] charArray0 = new char[0];
      jsonFactory2.createParser(charArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JavaType javaType0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BeanDeserializer beanDeserializer0 = null;
      try {
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBase) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonReadFeature0);
      objectReader0.createObjectNode();
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedHashSet> class1 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(collectionType0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      objectReader0.with(deserializationFeature0);
      byteArray0[8] = (byte)71;
      // Undeclared exception!
      try { 
        objectReader1._detectBindAndClose(byteArray0, 0, (-2201));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      PipedReader pipedReader0 = new PipedReader();
      Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      MissingNode missingNode0 = MissingNode.getInstance();
      try { 
        objectReader0.readValue((JsonNode) missingNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.ext.NioPathDeserializer` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedHashSet> class1 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(collectionType0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-98);
      PipedReader pipedReader0 = new PipedReader((byte)101);
      try { 
        objectReader1.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      IntNode intNode0 = IntNode.valueOf(15);
      try { 
        objectReader0.readValue((JsonNode) intNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      IntNode intNode0 = IntNode.valueOf(720);
      try { 
        objectReader0.readValue((JsonNode) intNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NullNode nullNode0 = NullNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, nullNode0, true);
      int int0 = 0;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      String string0 = null;
      objectReader0.createObjectNode();
      // Undeclared exception!
      try { 
        typeFactory0.constructFromCanonical((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader((FormatSchema) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)0;
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'o': was expecting ('true', 'false' or 'null')
         //  at [Source: (byte[])\"\u0000o\uFFFD\uFFFD\u0019f\uFFFD\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      jsonFactory0.createGenerator((DataOutput) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonFactory1.disable(jsonParser_Feature0);
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, jsonFactory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.getAttributes();
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      objectReader1.isEnabled(jsonParser_Feature1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-70);
      InputAccessor.Std inputAccessor_Std0 = new InputAccessor.Std(byteArray0, 58, (byte)112);
      // Undeclared exception!
      try { 
        jsonFactory0.hasFormat(inputAccessor_Std0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("com.fasterxml.jackson.core.format.InputAccessor$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<InputStream> class0 = InputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("E5tb");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory3);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      objectMapper0.reader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<SimpleType> class0 = SimpleType.class;
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, integer0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)17;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1), (InputStream) null, objectMapper1, byteQuadsCanonicalizer0, byteArray0, 1460, (-1378), true);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      // Undeclared exception!
      try { 
        objectMapper0._readTreeAndClose(jsonParserSequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      jsonFactory0.setCodec(objectMapper0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withTypeHandler(defaultSerializerProvider_Impl1);
      CollectionLikeType collectionLikeType0 = collectionType2.withStaticTyping();
      BooleanNode booleanNode0 = BooleanNode.getFalse();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType1, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1354), objectMapper0, filterOutputStream0);
      uTF8JsonGenerator0.getSchema();
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      // Undeclared exception!
      try { 
        objectMapper0._newReader((DeserializationConfig) null, collectionLikeType0, booleanNode0, (FormatSchema) null, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ContextAttributes.getEmpty();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1910);
      ObjectReader objectReader0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      objectReader0.isEnabled(jsonParser_Feature0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)0;
      objectReader0.at((String) null);
      byteArray0[2] = (byte)0;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (byte[])\"t\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }
}
