/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 21:18:01 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamReadFeature;
import com.fasterxml.jackson.core.TSFBuilder;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.DOMSerializer;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.ext.NioPathSerializer;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharConversionException;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectReader_ESTest extends ObjectReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature1, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory2);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory3);
      
      File file0 = MockFile.createTempFile("JSON", "");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/JSON0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("JSON0", file0.getName());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser(file0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/JSON0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals("JSON0", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(uTF8StreamJsonParser0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withKeyValueHandler(jsonFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      
      MapType mapType2 = mapType1.withKeyTypeHandler(jsonGenerator_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(15, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isAbstract());
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) uTF8StreamJsonParser0, (JavaType) mapType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.JsonFactory cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[3];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      objectReaderArray0[0] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(3, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(3, objectReaderArray0.length);
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMaxInputLookahead(64);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertEquals(3, objectReaderArray0.length);
      assertNotNull(dataFormatReaders2);
      
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertEquals(3, objectReaderArray0.length);
      assertNotNull(dataFormatReaders3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)89;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders3.findFormat(byteArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)2, (byte)104, (byte)89}, byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertEquals(3, objectReaderArray0.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      ObjectReader objectReader1 = dataFormatReaders_Match0.getReader();
      assertSame(objectReader1, objectReader0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertArrayEquals(new byte[] {(byte) (-62), (byte)2, (byte)104, (byte)89}, byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertEquals(3, objectReaderArray0.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(objectReader1);
      
      objectReaderArray0[1] = objectReader1;
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(matchStrength0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader2 = objectMapper0.reader(contextAttributes1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      objectReaderArray0[2] = objectReader2;
      DataFormatReaders dataFormatReaders4 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders4.equals((Object)dataFormatReaders2));
      assertEquals(3, objectReaderArray0.length);
      assertNotNull(dataFormatReaders4);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      DataFormatReaders.Match dataFormatReaders_Match1 = dataFormatReaders3.findFormat(byteArray1);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders4);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(byteArray1, byteArray0);
      assertSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders4);
      assertNotSame(dataFormatReaders_Match1, dataFormatReaders_Match0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders4);
      assertNotSame(dataFormatReaders3, dataFormatReaders4);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match1.getMatchStrength());
      assertTrue(dataFormatReaders_Match1.hasMatch());
      assertEquals("JSON", dataFormatReaders_Match1.getMatchedFormatName());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders_Match1.equals((Object)dataFormatReaders_Match0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders4));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertEquals(3, objectReaderArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(dataFormatReaders_Match1);
      
      try { 
        objectReader2._detectBindAndReadValues(dataFormatReaders_Match1, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isBigInteger());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isLong());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isBigDecimal());
      assertNotNull(missingNode0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      String string0 = objectMapper1.updateValue("8jB6lcWE``FC}", (Object) missingNode0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(missingNode0.isBigInteger());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isLong());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("8jB6lcWE``FC}", string0);
      assertNotNull(string0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNotNull(arrayNode0);
      
      NumericNode numericNode0 = arrayNode0.numberNode((byte)1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertFalse(numericNode0.isShort());
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals(1, numericNode0.intValue());
      assertFalse(numericNode0.isObject());
      assertTrue(numericNode0.isEmpty());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isDouble());
      assertEquals((short)1, numericNode0.shortValue());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isArray());
      assertNull(numericNode0.textValue());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertNotNull(numericNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(numericNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(numericNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.INT, numericNode0.numberType());
      assertFalse(numericNode0.isShort());
      assertTrue(numericNode0.isIntegralNumber());
      assertEquals(1, numericNode0.intValue());
      assertFalse(numericNode0.isObject());
      assertTrue(numericNode0.isEmpty());
      assertEquals(1.0F, numericNode0.floatValue(), 0.01F);
      assertFalse(numericNode0.isBigInteger());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.isNaN());
      assertTrue(numericNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertFalse(numericNode0.isLong());
      assertFalse(numericNode0.isMissingNode());
      assertFalse(numericNode0.isDouble());
      assertEquals((short)1, numericNode0.shortValue());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, numericNode0.asToken());
      assertTrue(numericNode0.canConvertToLong());
      assertFalse(numericNode0.isBigDecimal());
      assertEquals(1L, numericNode0.longValue());
      assertTrue(numericNode0.isInt());
      assertFalse(numericNode0.isArray());
      assertNull(numericNode0.textValue());
      assertEquals(1.0, numericNode0.doubleValue(), 0.01);
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertTrue(missingNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isObject());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isLong());
      assertNull(missingNode0.textValue());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isArray());
      assertNotNull(missingNode0);
      
      String string0 = objectMapper0.updateValue("8jB6lcWE``FC}", (Object) missingNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(missingNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.booleanValue());
      assertNull(missingNode0.numberType());
      assertTrue(missingNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isObject());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isLong());
      assertNull(missingNode0.textValue());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isIntegralNumber());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isArray());
      assertEquals("8jB6lcWE``FC}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)54;
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001\uFFFD\uFFFD\u0003\uFFFDk6\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, serializationConfig0.mixInCount());
      assertNotNull(serializationConfig0);
      
      SimpleMixInResolver simpleMixInResolver1 = new SimpleMixInResolver(serializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, serializationConfig0.mixInCount());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(simpleMixInResolver1);
      
      SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withoutLocalDefinitions();
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, serializationConfig0.mixInCount());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertEquals(0, simpleMixInResolver2.localSize());
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertNotNull(simpleMixInResolver2);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver2, rootNameLookup0, configOverrides0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, serializationConfig0.mixInCount());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertEquals(0, simpleMixInResolver2.localSize());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader1 = new ObjectReader(objectMapper0, deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, serializationConfig0.mixInCount());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertEquals(0, simpleMixInResolver2.localSize());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DOMSerializer dOMSerializer0 = new DOMSerializer();
      assertFalse(dOMSerializer0.usesObjectId());
      assertFalse(dOMSerializer0.isUnwrappingSerializer());
      assertNotNull(dOMSerializer0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedInputStream0.connect(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Class<TextNode> class1 = TextNode.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class1, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(objectIdGenerator_IdKey0);
      
      Class<?> class2 = objectIdGenerator_IdKey0.type;
      assertEquals("class com.fasterxml.jackson.databind.type.ResolvedRecursiveType", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      JsonNode jsonNode0 = dOMSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl1, (Type) class2);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("class com.fasterxml.jackson.databind.type.ResolvedRecursiveType", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isEmpty());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(dOMSerializer0.usesObjectId());
      assertFalse(dOMSerializer0.isUnwrappingSerializer());
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader1.treeToValue((TreeNode) jsonNode0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)95;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0, (-153), (int) (byte) (-1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)58, (byte)95}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)58, (byte)95}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)58, (byte)95}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonDeserializer0);
      
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertNotNull(jsonNode0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertNotNull(objectNode0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      ObjectNode objectNode1 = objectNode0.put("", boolean1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(objectNode1);
      
      JsonParser jsonParser0 = objectNode1.traverse();
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(jsonParser0);
      
      ObjectReader objectReader1 = objectReader0.withAttribute(objectMapper0, objectNode1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.with(jsonNodeFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(simpleMixInResolver1);
      
      SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withoutLocalDefinitions();
      assertNotSame(simpleMixInResolver2, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver0);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertEquals(0, simpleMixInResolver2.localSize());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(simpleMixInResolver2);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver2, rootNameLookup0, configOverrides0);
      assertEquals(0, simpleMixInResolver2.localSize());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(serializationConfig0);
      
      SimpleMixInResolver simpleMixInResolver3 = new SimpleMixInResolver(serializationConfig0);
      assertEquals(0, simpleMixInResolver2.localSize());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(0, simpleMixInResolver3.localSize());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(simpleMixInResolver3);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver3, rootNameLookup0, configOverrides0);
      assertEquals(0, simpleMixInResolver2.localSize());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(0, simpleMixInResolver3.localSize());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver3));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver3));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver3));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertNotNull(deserializationConfig0);
      
      ObjectReader objectReader3 = objectReader2.with(deserializationConfig0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver3);
      assertNotSame(simpleMixInResolver0, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver3);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver2);
      assertNotSame(simpleMixInResolver1, simpleMixInResolver0);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver0);
      assertNotSame(simpleMixInResolver2, simpleMixInResolver3);
      assertNotSame(simpleMixInResolver3, simpleMixInResolver1);
      assertNotSame(simpleMixInResolver3, simpleMixInResolver0);
      assertNotSame(simpleMixInResolver3, simpleMixInResolver2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isEmpty());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertEquals(0, simpleMixInResolver1.localSize());
      assertEquals(0, simpleMixInResolver2.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals(0, simpleMixInResolver3.localSize());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver3));
      assertFalse(simpleMixInResolver0.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver3));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver2));
      assertFalse(simpleMixInResolver1.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver2.equals((Object)simpleMixInResolver3));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver1));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver0));
      assertFalse(simpleMixInResolver3.equals((Object)simpleMixInResolver2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader3.readValues(jsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
      assertNotNull(serializerProvider0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (URL); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FloatNode floatNode0 = (FloatNode)jsonNodeFactory0.numberNode(float0);
      assertTrue(floatNode0.isFloatingPointNumber());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isEmpty());
      assertFalse(floatNode0.isMissingNode());
      assertEquals(Integer.MIN_VALUE, floatNode0.intValue());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isObject());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertFalse(floatNode0.isShort());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-9223372036854775808L), floatNode0.longValue());
      assertEquals(Double.NEGATIVE_INFINITY, floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.isNaN());
      assertEquals((short)0, floatNode0.shortValue());
      assertFalse(floatNode0.isArray());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.canConvertToLong());
      assertEquals(0, floatNode0.size());
      assertEquals(Float.NEGATIVE_INFINITY, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.canConvertToInt());
      assertFalse(floatNode0.booleanValue());
      assertNotNull(floatNode0);
      
      Class<Integer> class0 = Integer.class;
      try { 
        objectReader0.treeToValue((TreeNode) floatNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Numeric value (-Infinity) out of range of int (-2147483648 - 2147483647)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NioPathSerializer nioPathSerializer0 = new NioPathSerializer();
      assertFalse(nioPathSerializer0.isUnwrappingSerializer());
      assertFalse(nioPathSerializer0.usesObjectId());
      assertNotNull(nioPathSerializer0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(818, 818);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<FloatNode> class0 = FloatNode.class;
      MapLikeType mapLikeType0 = typeFactory1.constructRawMapLikeType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapLikeType0);
      
      JsonNode jsonNode0 = nioPathSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl1, (Type) mapLikeType0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(nioPathSerializer0.isUnwrappingSerializer());
      assertFalse(nioPathSerializer0.usesObjectId());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertEquals(1, jsonNode0.size());
      assertTrue(jsonNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(jsonNode0);
      
      Class<SimpleModule> class1 = SimpleModule.class;
      try { 
        objectReader0.treeToValue((TreeNode) jsonNode0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"type\" (class com.fasterxml.jackson.databind.module.SimpleModule), not marked as ignorable (10 known properties: \"deserializers\", \"keyDeserializers\", \"keySerializers\", \"valueInstantiators\", \"abstractTypes\", \"serializerModifier\", \"deserializerModifier\", \"namingStrategy\", \"serializers\", \"upModule\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.databind.module.SimpleModule[\"type\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders((ObjectReader[]) null);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      // Undeclared exception!
      try { 
        objectReader0._reportUnkownFormat(dataFormatReaders0, (DataFormatReaders.Match) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      objectReaderArray0[5] = objectReader0;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNotNull(nonBlockingJsonParser0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader0._considerFilter(nonBlockingJsonParser0, true);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertNotNull(nonBlockingJsonParser1);
      
      try { 
        objectReader0.readTree((JsonParser) nonBlockingJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4, (byte) (-1), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)4, (byte) (-1), (byte)0, (byte) (-119), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      InjectableValues.Std injectableValues_Std1 = new InjectableValues.Std(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(injectableValues_Std1.equals((Object)injectableValues_Std0));
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertNotSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(injectableValues_Std1.equals((Object)injectableValues_Std0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(86);
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertNotSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isMissingNode());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isArray());
      assertFalse(injectableValues_Std1.equals((Object)injectableValues_Std0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      DoubleNode doubleNode0 = objectReader1.readValue(jsonParser0, class0);
      assertNotSame(injectableValues_Std1, injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(arrayNode0, jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(injectableValues_Std1.equals((Object)injectableValues_Std0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(arrayNode0.equals((Object)jsonNode0));
      assertNull(doubleNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_MISSING_VALUES;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.enable(jsonReadFeature0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder1.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder1);
      
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_MISSING_VALUES;
      JsonReadFeature[] jsonReadFeatureArray0 = new JsonReadFeature[3];
      jsonReadFeatureArray0[0] = jsonReadFeature0;
      jsonReadFeatureArray0[1] = jsonReadFeature0;
      jsonReadFeatureArray0[2] = jsonReadFeature0;
      JsonFactoryBuilder jsonFactoryBuilder2 = jsonFactoryBuilder1.disable(jsonReadFeature1, jsonReadFeatureArray0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonReadFeature1, jsonReadFeature0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(3, jsonReadFeatureArray0.length);
      assertNotNull(jsonFactoryBuilder2);
      
      JsonReadFeature jsonReadFeature2 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JsonFactoryBuilder jsonFactoryBuilder3 = jsonFactoryBuilder2.disable(jsonReadFeature2);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertNotSame(jsonReadFeature0, jsonReadFeature2);
      assertSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonReadFeature1, jsonReadFeature0);
      assertNotSame(jsonReadFeature1, jsonReadFeature2);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(31, jsonFactoryBuilder3.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder3.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder3.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder3.highestNonEscapedChar());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(3, jsonReadFeatureArray0.length);
      assertNotNull(jsonFactoryBuilder3);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder3);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(31, jsonFactoryBuilder3.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder3.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder3.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder3.highestNonEscapedChar());
      assertEquals(8705, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(3, jsonReadFeatureArray0.length);
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertNotSame(jsonReadFeature0, jsonReadFeature2);
      assertSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonReadFeature1, jsonReadFeature0);
      assertNotSame(jsonReadFeature1, jsonReadFeature2);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder0);
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(31, jsonFactoryBuilder3.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder3.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder3.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder3.highestNonEscapedChar());
      assertEquals(8705, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8705, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(3, jsonReadFeatureArray0.length);
      assertNotNull(nonBlockingJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("[");
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertNotSame(jsonReadFeature0, jsonReadFeature2);
      assertSame(jsonReadFeature0, jsonReadFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonReadFeature1, jsonReadFeature0);
      assertNotSame(jsonReadFeature1, jsonReadFeature2);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder3);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertNotSame(jsonReadFeature2, jsonReadFeature0);
      assertNotSame(jsonReadFeature2, jsonReadFeature1);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder3, jsonFactoryBuilder0);
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(8705, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8705, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(31, jsonFactoryBuilder3.streamWriteFeatures());
      assertEquals(8705, jsonFactoryBuilder3.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder3.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder3.highestNonEscapedChar());
      assertEquals(8705, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonReadFeature0.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature1.equals((Object)jsonReadFeature2));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature0));
      assertFalse(jsonReadFeature2.equals((Object)jsonReadFeature1));
      assertEquals(3, jsonReadFeatureArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: expected close marker for Array (start marker at [Source: (String)\"[\"; line: 1, column: 1])
         //  at [Source: (String)\"[\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      MockFile mockFile0 = new MockFile("JSON");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("JSON", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("JSON", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("JSON", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("JSON", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short)3230);
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(3230, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isObject());
      assertEquals(3230.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertTrue(shortNode0.isEmpty());
      assertEquals(3230L, shortNode0.longValue());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloat());
      assertEquals(3230.0F, shortNode0.floatValue(), 0.01F);
      assertEquals((short)3230, shortNode0.shortValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToInt());
      assertNotNull(shortNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, shortNode0, true);
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(3230, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isObject());
      assertEquals(3230.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertTrue(shortNode0.isEmpty());
      assertEquals(3230L, shortNode0.longValue());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloat());
      assertEquals(3230.0F, shortNode0.floatValue(), 0.01F);
      assertEquals((short)3230, shortNode0.shortValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToInt());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(3230, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isObject());
      assertEquals(3230.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertTrue(shortNode0.isEmpty());
      assertEquals(3230L, shortNode0.longValue());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloat());
      assertEquals(3230.0F, shortNode0.floatValue(), 0.01F);
      assertEquals((short)3230, shortNode0.shortValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((short)3230);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-637), stringReader0, objectMapper0, charsToNameCanonicalizer1, charArray0, 0, 2, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals((-637), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(3230, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isObject());
      assertEquals(3230.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertTrue(shortNode0.isEmpty());
      assertEquals(3230L, shortNode0.longValue());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloat());
      assertEquals(3230.0F, shortNode0.floatValue(), 0.01F);
      assertEquals((short)3230, shortNode0.shortValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(33, 33);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals((-605), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals((-605), readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isMissingNode());
      assertEquals(3230, shortNode0.intValue());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isObject());
      assertEquals(3230.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertTrue(shortNode0.isEmpty());
      assertEquals(3230L, shortNode0.longValue());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertFalse(shortNode0.isFloat());
      assertEquals(3230.0F, shortNode0.floatValue(), 0.01F);
      assertEquals((short)3230, shortNode0.shortValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isArray());
      assertFalse(shortNode0.booleanValue());
      assertFalse(shortNode0.isInt());
      assertTrue(shortNode0.isShort());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToInt());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, charArray0.length);
      assertNotNull(readerBasedJsonParser1);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-193), 1, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(1, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(1, (-1862));
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(1, charArray0.length);
      assertNotNull(readerBasedJsonParser1);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -193
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IntNode intNode0 = (IntNode)objectReader0.readTree("7");
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(7.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(7.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertEquals(7, intNode0.intValue());
      assertEquals(7L, intNode0.longValue());
      assertEquals((short)7, intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertNotNull(intNode0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1553);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) pipedInputStream0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._reportUnkownFormat(dataFormatReaders0, dataFormatReaders_Match0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(jsonNode0, objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(2, jsonParser0.currentTokenId());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isLong());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertNotNull(jsonNode0);
      
      Class<DoubleNode> class0 = DoubleNode.class;
      DoubleNode doubleNode0 = objectReader1.readValue(jsonParser0, class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getLastClearedToken());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(objectNode0.equals((Object)jsonNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNull(doubleNode0);
      
      JsonParser jsonParser1 = objectReader1._considerFilter(jsonParser0, false);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectNode0, jsonNode0);
      assertSame(jsonParser0, jsonParser1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonParser1, jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getLastClearedToken());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertEquals(JsonToken.END_OBJECT, jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.canReadTypeId());
      assertEquals(0, jsonParser1.currentTokenId());
      assertFalse(jsonParser1.isClosed());
      assertNull(jsonParser1.getCurrentToken());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.canReadObjectId());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertFalse(jsonParser1.canParseAsync());
      assertFalse(jsonParser1.hasCurrentToken());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(objectNode0.equals((Object)jsonNode0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonParser1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((Base64Variant) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, jsonGenerator_FeatureArray0.length);
      assertNotNull(objectMapper1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 'o';
      charArray0[2] = 'Q';
      charArray0[3] = 'P';
      charArray0[4] = '2';
      charArray0[5] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertArrayEquals(new char[] {',', 'o', 'Q', 'P', '2', '7'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndClose(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (char[])\",oQP27\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isShort());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isMissingNode());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isFloat());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals(0, nullNode0.size());
      assertNotNull(nullNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.without((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(3);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      Double double0 = new Double(3);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      DoubleNode doubleNode0 = (DoubleNode)arrayNode0.numberNode(double0);
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertEquals(3, doubleNode0.intValue());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isNaN());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(3.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals((short)3, doubleNode0.shortValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(3L, doubleNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(3.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertNotNull(doubleNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectReader0.treeAsTokens(doubleNode0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertEquals(3, doubleNode0.intValue());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isNaN());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(3.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals((short)3, doubleNode0.shortValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(3L, doubleNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(3.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNotNull(treeTraversingParser0);
      
      DoubleNode doubleNode1 = (DoubleNode)objectReader0._bindAsTree(treeTraversingParser0);
      assertNotSame(doubleNode0, doubleNode1);
      assertNotSame(doubleNode1, doubleNode0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(doubleNode0.isInt());
      assertFalse(doubleNode0.isShort());
      assertFalse(doubleNode0.isObject());
      assertEquals(3, doubleNode0.intValue());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertFalse(doubleNode0.isNaN());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertEquals(3.0, doubleNode0.doubleValue(), 0.01);
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.booleanValue());
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(doubleNode0.isArray());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isBigDecimal());
      assertEquals((short)3, doubleNode0.shortValue());
      assertFalse(doubleNode0.isLong());
      assertFalse(doubleNode0.isFloat());
      assertTrue(doubleNode0.canConvertToLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertTrue(doubleNode0.canConvertToInt());
      assertEquals(3L, doubleNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(3.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isBigInteger());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(8, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.currentToken());
      assertEquals(8, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertTrue(doubleNode1.isDouble());
      assertFalse(doubleNode1.isMissingNode());
      assertTrue(doubleNode1.isEmpty());
      assertEquals(JsonNodeType.NUMBER, doubleNode1.getNodeType());
      assertTrue(doubleNode1.canConvertToInt());
      assertNull(doubleNode1.textValue());
      assertFalse(doubleNode1.isObject());
      assertTrue(doubleNode1.isFloatingPointNumber());
      assertEquals(3.0F, doubleNode1.floatValue(), 0.01F);
      assertFalse(doubleNode1.isIntegralNumber());
      assertFalse(doubleNode1.isShort());
      assertFalse(doubleNode1.isBigDecimal());
      assertFalse(doubleNode1.isNaN());
      assertEquals(3.0, doubleNode1.doubleValue(), 0.01);
      assertFalse(doubleNode1.isLong());
      assertTrue(doubleNode1.canConvertToLong());
      assertFalse(doubleNode1.isFloat());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode1.numberType());
      assertEquals(3L, doubleNode1.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode1.asToken());
      assertFalse(doubleNode1.isBigInteger());
      assertFalse(doubleNode1.booleanValue());
      assertFalse(doubleNode1.isInt());
      assertFalse(doubleNode1.isArray());
      assertEquals((short)3, doubleNode1.shortValue());
      assertEquals(0, doubleNode1.size());
      assertEquals(3, doubleNode1.intValue());
      assertTrue(doubleNode1.equals((Object)doubleNode0));
      assertNotNull(doubleNode1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertNotNull(arrayNode0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertNotNull(objectNode0);
      
      ArrayNode arrayNode1 = objectNode0.withArray(") as character #");
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isMissingNode());
      assertEquals(0, arrayNode1.size());
      assertFalse(arrayNode1.isLong());
      assertTrue(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isInt());
      assertNull(arrayNode1.textValue());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertTrue(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(arrayNode1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ArrayNode arrayNode2 = arrayNode1.insert((-597), (JsonNode) arrayNode0);
      assertNotSame(arrayNode0, arrayNode1);
      assertNotSame(arrayNode0, arrayNode2);
      assertSame(arrayNode1, arrayNode2);
      assertNotSame(arrayNode1, arrayNode0);
      assertNotSame(arrayNode2, arrayNode0);
      assertSame(arrayNode2, arrayNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertEquals(1, arrayNode1.size());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isInt());
      assertNull(arrayNode1.textValue());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertFalse(arrayNode2.isFloatingPointNumber());
      assertFalse(arrayNode2.isEmpty());
      assertFalse(arrayNode2.isLong());
      assertEquals(1, arrayNode2.size());
      assertFalse(arrayNode2.isMissingNode());
      assertFalse(arrayNode2.isDouble());
      assertFalse(arrayNode2.isShort());
      assertNull(arrayNode2.textValue());
      assertFalse(arrayNode2.isBigInteger());
      assertEquals("", arrayNode2.asText());
      assertTrue(arrayNode2.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode2.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode2.asToken());
      assertFalse(arrayNode2.isBigDecimal());
      assertFalse(arrayNode2.isIntegralNumber());
      assertFalse(arrayNode2.isFloat());
      assertFalse(arrayNode2.booleanValue());
      assertFalse(arrayNode2.isInt());
      assertNull(arrayNode2.numberType());
      assertFalse(arrayNode2.isObject());
      assertFalse(arrayNode0.equals((Object)arrayNode1));
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertFalse(arrayNode2.equals((Object)arrayNode0));
      assertNotNull(arrayNode2);
      
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-82), (byte) (-65), (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      JsonParser jsonParser0 = arrayNode1.traverse();
      assertSame(arrayNode1, arrayNode2);
      assertNotSame(arrayNode1, arrayNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode1.asToken());
      assertFalse(arrayNode1.isBigDecimal());
      assertFalse(arrayNode1.isIntegralNumber());
      assertFalse(arrayNode1.isFloat());
      assertFalse(arrayNode1.booleanValue());
      assertNull(arrayNode1.numberType());
      assertFalse(arrayNode1.isObject());
      assertFalse(arrayNode1.isFloatingPointNumber());
      assertFalse(arrayNode1.isEmpty());
      assertFalse(arrayNode1.isMissingNode());
      assertFalse(arrayNode1.isLong());
      assertEquals(1, arrayNode1.size());
      assertFalse(arrayNode1.isDouble());
      assertFalse(arrayNode1.isInt());
      assertNull(arrayNode1.textValue());
      assertEquals("", arrayNode1.asText());
      assertFalse(arrayNode1.isShort());
      assertFalse(arrayNode1.isBigInteger());
      assertTrue(arrayNode1.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode1.getNodeType());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(arrayNode1.equals((Object)arrayNode0));
      assertNotNull(jsonParser0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as `com.fasterxml.jackson.databind.node.JsonNodeFactory`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      TextNode textNode0 = arrayNode0.textNode((String) null);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertNull(textNode0);
      
      // Undeclared exception!
      try { 
        objectReader0._reportUndetectableSource((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAndCloseAsTree(jsonParser0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertTrue(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isMissingNode());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
      
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)1;
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001\u001B3\u0001\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'W';
      charArray0[2] = 'I';
      charArray0[3] = 'j';
      charArray0[4] = 'e';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, (int) 'e', (int) 'e');
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertArrayEquals(new char[] {'o', 'W', 'I', 'j', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertArrayEquals(new char[] {'o', 'W', 'I', 'j', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl0, readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("bI|X^8E.{Q-3[7}{Zt");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "9\u0002x>wRtD}U");
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockFile mockFile0 = new MockFile("bI|X^8E.{Q-3[7}{Zt");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNull(jsonParser0);
      
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertNotNull(simpleType0);
      
      Iterator<MapLikeType> iterator0 = objectReader0.readValues((JsonParser) null, (ResolvedType) simpleType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertNotNull(iterator0);
      
      try { 
        objectReader0.readValue((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      ConcurrentHashMap<FilteringParserDelegate, DeserializationConfig> concurrentHashMap0 = new ConcurrentHashMap<FilteringParserDelegate, DeserializationConfig>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectReader objectReader1 = objectReader0.withAttributes(concurrentHashMap0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-45), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (3412) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[7] = (byte) (-16);
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFD\u0001\u0000v\u0000\u0001\u0000\uFFFD\"; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ConcurrentHashMap<String, CollectionLikeType> concurrentHashMap0 = new ConcurrentHashMap<String, CollectionLikeType>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = '#';
      charArray0[2] = 'l';
      charArray0[3] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader1, charsToNameCanonicalizer0, charArray0, 0, 2, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertArrayEquals(new char[] {'u', '#', 'l', 'L'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, deserializationFeatureArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(9, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(9, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertArrayEquals(new char[] {'u', '#', 'l', 'L'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(2, deserializationFeatureArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(readerBasedJsonParser1);
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'u': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)2;
      try { 
        objectReader0.readValues(byteArray0, 1, 497);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00A6' (code 166)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\u0726\u0000y\uFFFD\u0002\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0.createObjectNode();
      assertNotSame(jsonNode0, objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isObject());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertNotNull(jsonNode0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonToken jsonToken0 = objectReader0._initForReading(defaultDeserializationContext0, jsonParser0);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(1, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.START_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(1, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("{", jsonToken0.asString());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isScalarValue());
      assertEquals(1, jsonToken0.id());
      assertTrue(objectNode0.equals((Object)jsonNode0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(JsonToken.START_OBJECT, jsonToken0);
      
      objectReader0._initForMultiRead(defaultDeserializationContext0, jsonParser0);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(1, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.START_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonToken.START_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(1, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(objectNode0.equals((Object)jsonNode0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'W';
      charArray0[2] = 'I';
      charArray0[3] = 'j';
      charArray0[4] = 'e';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0, (-103), (-103));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertArrayEquals(new char[] {'o', 'W', 'I', 'j', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertArrayEquals(new char[] {'o', 'W', 'I', 'j', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        objectReader0._initForReading(defaultDeserializationContext_Impl0, readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (char[])\"oWIje\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      Enumeration<InputStream> enumeration0 = null;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(charArray0, 0, 3448);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8449, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8449, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8449, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8449, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndClose(readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MockFile mockFile0 = new MockFile("q+63Fb.hR");
      assertNotNull(mockFile0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNotNull(readerBasedJsonParser0);
      
      objectReader0._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext0, (JavaType) null);
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      ArrayNode arrayNode0 = (ArrayNode)objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNotNull(arrayNode0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(QFiJ9p{~E0Sy7Qg");
      assertFalse(boolean0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(30, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(30, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(deserializationConfig0);
      
      Class<ShortNode> class0 = ShortNode.class;
      Class<Integer> class1 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertNotNull(javaType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      JavaType javaType1 = typeFactory0.moreSpecificType(javaTypeArray0[3], javaTypeArray0[0]);
      assertSame(javaType1, javaType0);
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.hasHandlers());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.hasContentType());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasValueHandler());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isArrayType());
      assertTrue(javaType1.isJavaLangObject());
      assertEquals(8, javaTypeArray0.length);
      assertNotNull(javaType1);
      
      javaTypeArray0[5] = javaType1;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType1);
      assertSame(javaType1, javaType0);
      assertSame(javaType0, javaType1);
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.hasHandlers());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.hasContentType());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasValueHandler());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isArrayType());
      assertTrue(javaType1.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(8, javaTypeArray0.length);
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertSame(javaType1, javaType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertSame(javaType0, javaType1);
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.hasHandlers());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.hasContentType());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasValueHandler());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isArrayType());
      assertTrue(javaType1.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.useStaticType());
      assertFalse(referenceType1.isInterface());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertEquals(8, javaTypeArray0.length);
      assertNotNull(referenceType1);
      
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withContentType(javaTypeArray0[0]);
      assertSame(javaType1, javaType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertSame(javaType0, javaType1);
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.hasHandlers());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.hasContentType());
      assertFalse(javaType1.isFinal());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isCollectionLikeType());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isAbstract());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.hasValueHandler());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isArrayType());
      assertTrue(javaType1.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.useStaticType());
      assertFalse(referenceType1.isInterface());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.useStaticType());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertEquals(8, javaTypeArray0.length);
      assertNotNull(referenceType2);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isDouble());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isLong());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isInt());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertNotNull(missingNode0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper1, (DeserializationConfig) null, referenceType2, missingNode0, (FormatSchema) null, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 7, mockFileInputStream0, objectReader0, byteQuadsCanonicalizer0, byteArray0, 7, 1, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(fileDescriptor0.valid());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(7, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertArrayEquals(new byte[] {(byte)11}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        objectReader0._bind(uTF8StreamJsonParser0, byteQuadsCanonicalizer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      TSFBuilder<?, ?> tSFBuilder0 = jsonFactory0.rebuild();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(15, tSFBuilder0.factoryFeaturesMask());
      assertEquals(31, tSFBuilder0.streamWriteFeatures());
      assertEquals(8193, tSFBuilder0.streamReadFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertNotNull(tSFBuilder0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(boolean0);
      
      try { 
        objectReader0.readValue("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      InjectableValues injectableValues0 = objectReader1.getInjectableValues();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNull(injectableValues0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((InputStream) pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '?';
      charArray0[2] = '0';
      charArray0[3] = '6';
      charArray0[4] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1543, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, (-2811), 1, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1543, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertArrayEquals(new char[] {'e', '?', '0', '6', '0'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(5, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1799, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1799, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertArrayEquals(new char[] {'e', '?', '0', '6', '0'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(5, charArray0.length);
      assertNotNull(readerBasedJsonParser1);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser1, (TokenFilter) null, false, false);
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertEquals(1799, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1799, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1799, readerBasedJsonParser1.getFeatureMask());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertArrayEquals(new char[] {'e', '?', '0', '6', '0'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(5, charArray0.length);
      assertNotNull(filteringParserDelegate0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(simpleType0);
      
      // Undeclared exception!
      try { 
        objectReader1._verifyNoTrailingTokens(filteringParserDelegate0, defaultDeserializationContext_Impl0, simpleType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2811
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader0;
      objectReaderArray0[8] = objectReader0;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders2);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders3);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders3.findFormat(byteArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(3, byteArray0.length);
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)0;
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x596720ce (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.mark((-1103));
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isEmpty());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "wL]Un#");
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValue((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'wL': was expecting ('true', 'false' or 'null')
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mapType0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      MapType mapType1 = mapType0.withTypeHandler(arrayNode0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(mapType0, mapType1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(mapType1, mapType0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      
      MapType mapType2 = mapType1.withContentValueHandler(vector0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.hasHandlers());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((JavaType) mapType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<LongNode> class0 = LongNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<ArrayNode> class1 = ArrayNode.class;
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertNotNull(mapLikeType0);
      
      ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) mapLikeType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler(objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(mapLikeType1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      HashMap<Integer, NullNode> hashMap0 = new HashMap<Integer, NullNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withoutSharedAttribute(class0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes2);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttribute(mapLikeType0, class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes3);
      
      ObjectReader objectReader2 = objectMapper0.reader(contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.forType((JavaType) mapLikeType0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      
      ObjectReader objectReader4 = objectReader1.forType((JavaType) mapLikeType1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader4);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isMapLikeType());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotNull(objectReader4);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectReader objectReader5 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader5, objectReader4);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader5, objectReader1);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader5, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertEquals(5, jsonParser_FeatureArray0.length);
      assertNotNull(objectReader5);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      
      try { 
        objectReader0.readTree((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (ByteArrayInputStream); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1700);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(placeholderForType0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8201, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8201, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertFalse(jsonDeserializer0.isCachable());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((InputStream) sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = ')';
      charArray0[2] = '@';
      charArray0[3] = ',';
      charArray0[4] = 'Q';
      charArray0[5] = '{';
      charArray0[6] = '9';
      charArray0[7] = 'P';
      charArray0[8] = 'U';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertArrayEquals(new char[] {'d', ')', '@', ',', 'Q', '{', '9', 'P', 'U'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      TypeReference<IntNode> typeReference0 = (TypeReference<IntNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, typeReference0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'd': was expecting ('true', 'false' or 'null')
         //  at [Source: (char[])\"d)@,Q{9PU\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, defaultDeserializationContext0, true);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(iOContext1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)96;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1804, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer1, byteArray0, 1, (byte)0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1804, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)80, (byte)96}, byteArray0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotNull(defaultDeserializationContext1);
      
      try { 
        objectReader0._verifyNoTrailingTokens(uTF8StreamJsonParser0, defaultDeserializationContext1, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertNotNull(arrayNode0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertEquals(0, jsonNode0.size());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@%Cm_eqr?@%c$'q");
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertNotNull(objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndReadValues((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNotNull(uRI0);
      
      ObjectReader objectReader2 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-17);
      try { 
        objectReader1.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (byte[])\"\uFFFD\u0001y\u047D\uFFFD\"; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)76;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)58, (byte) (-113), (byte)1, (byte)111, (byte)1, (byte)2, (byte)1, (byte)115, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)58, (byte) (-113), (byte)1, (byte)111, (byte)1, (byte)2, (byte)1, (byte)115, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(128, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(nonBlockingJsonParser0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      TypeReference<FilteringParserDelegate> typeReference0 = (TypeReference<FilteringParserDelegate>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      Iterator<FilteringParserDelegate> iterator0 = objectReader0.readValues((JsonParser) nonBlockingJsonParser0, typeReference0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNode jsonNode0 = objectReader0.readTree((InputStream) null);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isDouble());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertNotNull(jsonNode0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 96);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1184));
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNull(javaType0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ObjectReader objectReader1 = objectMapper0.readerWithView(class0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-594), (-594));
      assertEquals((-594), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte)3}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals((-594), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte)3}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InputStream inputStream0 = null;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readTree((DataInput) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      String string0 = tokenFilter0.toString();
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", string0);
      assertNotNull(string0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      
      StringReader stringReader0 = new StringReader("TokenFilter.INCLUDE_ALL");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'D';
      charArray0[2] = 's';
      charArray0[3] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectReader1, charsToNameCanonicalizer0, charArray0, 0, (-1571), true);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertArrayEquals(new char[] {'N', 'D', 's', 'P'}, charArray0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(4, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndReadValues((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'TokenFilter': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -1559]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "com.fasterxml.jackson.annotation.OptBoolean";
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(4, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      // Undeclared exception!
      try { 
        dataFormatReaders0.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1);
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0._bindAndReadValues(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-84), (byte)96);
      assertEquals(90, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-84), (byte)96, (byte)3, (byte)45, (byte) (-81)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertEquals(90, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-84), (byte)96, (byte)3, (byte)45, (byte) (-81)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertEquals(90, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-84), (byte)96, (byte)3, (byte)45, (byte) (-81)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(5, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(5, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(5, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(5, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(5, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(5, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(5, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(readerBasedJsonParser0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<List> class0 = List.class;
      Class<DecimalNode> class1 = DecimalNode.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(jsonParser_Feature0);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType2.isArrayType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.useStaticType());
      assertTrue(collectionType2.hasHandlers());
      assertTrue(collectionType2.isAbstract());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.isInterface());
      assertFalse(collectionType2.isConcrete());
      assertFalse(collectionType2.isFinal());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertNotNull(collectionType2);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0, (JavaType) collectionType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.JsonParser$Feature cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<TextNode> class0 = TextNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      Class<ArrayNode> class1 = ArrayNode.class;
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(typeFactory0);
      
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertNotNull(mapLikeType0);
      
      ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) mapLikeType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)0;
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, 56319, (int) (byte) (-81));
      assertNotSame(objectReader0, objectReader1);
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {(byte)7, (byte)1, (byte)0, (byte)94, (byte)3, (byte) (-81), (byte)0}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(7, byteArray0.length);
      assertNotNull(jsonNode0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isArray());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isFloat());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isObject());
      assertFalse(nullNode0.isBigDecimal());
      assertNotNull(nullNode0);
      
      try { 
        objectReader1.readValue((JsonNode) nullNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [map-like type; class com.fasterxml.jackson.databind.node.ArrayNode, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      try { 
        objectReader0.readTree((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer((JavaType) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals("true", booleanNode0.asText());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertTrue(booleanNode0.asBoolean());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertNotNull(booleanNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals("true", booleanNode0.asText());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertTrue(booleanNode0.asBoolean());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNotNull(jsonParser0);
      
      Class<BooleanNode> class1 = BooleanNode.class;
      BooleanNode booleanNode1 = objectReader0.readValue(jsonParser0, class1);
      assertSame(booleanNode0, booleanNode1);
      assertSame(booleanNode1, booleanNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isMissingNode());
      assertFalse(booleanNode0.isLong());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isIntegralNumber());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isArray());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals("true", booleanNode0.asText());
      assertTrue(booleanNode0.isEmpty());
      assertFalse(booleanNode0.isBigInteger());
      assertNull(booleanNode0.textValue());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertTrue(booleanNode0.asBoolean());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.isObject());
      assertFalse(booleanNode0.isBigDecimal());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertEquals(JsonToken.VALUE_TRUE, jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(booleanNode1.isFloatingPointNumber());
      assertFalse(booleanNode1.isShort());
      assertFalse(booleanNode1.isInt());
      assertFalse(booleanNode1.isBigInteger());
      assertFalse(booleanNode1.isMissingNode());
      assertNull(booleanNode1.textValue());
      assertTrue(booleanNode1.booleanValue());
      assertTrue(booleanNode1.asBoolean());
      assertFalse(booleanNode1.isIntegralNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode1.getNodeType());
      assertFalse(booleanNode1.isArray());
      assertNull(booleanNode1.numberType());
      assertFalse(booleanNode1.isObject());
      assertFalse(booleanNode1.isBigDecimal());
      assertTrue(booleanNode1.isEmpty());
      assertEquals("true", booleanNode1.asText());
      assertFalse(booleanNode1.isDouble());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode1.asToken());
      assertFalse(booleanNode1.isLong());
      assertEquals(0, booleanNode1.size());
      assertFalse(booleanNode1.isFloat());
      assertNotNull(booleanNode1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      boolean boolean0 = true;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1685, pipedInputStream0, objectReader0, byteQuadsCanonicalizer0, byteArray0, 83, 1685, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1685, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1685, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(1685, jsonParserSequence0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(jsonParserSequence0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1685, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(1685, jsonParserSequence0.getFeatureMask());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertEquals(1685, filteringParserDelegate0.getFeatureMask());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.currentToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, byteArray0.length);
      assertNotNull(filteringParserDelegate0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAndReadValues((JsonParser) filteringParserDelegate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNotNull(nonBlockingJsonParser0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      MappingIterator<DoubleNode> mappingIterator0 = objectReader0.readValues((JsonParser) nonBlockingJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNotNull(mappingIterator0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(mappingIterator0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertNotNull(valueInstantiator_Base0);
      
      IntNode intNode0 = new IntNode(4618);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isMissingNode());
      assertEquals(4618L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)4618, intNode0.shortValue());
      assertEquals(4618.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(4618.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isObject());
      assertEquals(4618, intNode0.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertNotNull(intNode0);
      
      MapLikeType mapLikeType0 = mapType0.withContentValueHandler(objectMapper0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapLikeType0, mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.hasContentType());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertNotNull(mapLikeType0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      HashMap<Integer, NullNode> hashMap0 = new HashMap<Integer, NullNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withoutSharedAttribute(valueInstantiator_Base0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes1, contextAttributes2);
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes2);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttribute(hashMap0, objectMapper1);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes3);
      
      ObjectReader objectReader1 = objectMapper1.reader(contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.forType((JavaType) mapType0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapLikeType0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      Class<PipedInputStream> class1 = PipedInputStream.class;
      PipedInputStream pipedInputStream0 = objectReader0.treeToValue((TreeNode) intNode0, class1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isMissingNode());
      assertEquals(4618L, intNode0.longValue());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)4618, intNode0.shortValue());
      assertEquals(4618.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isShort());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(4618.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isObject());
      assertEquals(4618, intNode0.intValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertNotNull(pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertNotNull(valueInstantiator_Base0);
      
      MapLikeType mapLikeType0 = mapType0.withContentValueHandler(objectMapper0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapLikeType0, mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertNotNull(mapLikeType0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      HashMap<Integer, NullNode> hashMap0 = new HashMap<Integer, NullNode>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withoutSharedAttribute(valueInstantiator_Base0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes2);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttribute(hashMap0, objectMapper1);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes3);
      
      ObjectReader objectReader1 = objectMapper1.reader(contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.forType((JavaType) mapType0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapLikeType0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      PriorityQueue<ObjectReader> priorityQueue0 = new PriorityQueue<ObjectReader>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertNotNull(priorityQueue0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)3;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)3, (int) (byte)10);
      assertEquals(0, priorityQueue0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)10, (byte) (-23), (byte) (-1), (byte)3}, byteArray0);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(5, byteArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertEquals(0, priorityQueue0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertArrayEquals(new byte[] {(byte) (-125), (byte)10, (byte) (-23), (byte) (-1), (byte)3}, byteArray0);
      assertFalse(priorityQueue0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(5, byteArray0.length);
      assertNull(jsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader2._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      MappingIterator<MapLikeType> mappingIterator0 = objectReader2._newIterator((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0, (JsonDeserializer<?>) null, true);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isMapLikeType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapLikeType0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes3));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes3));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withRootName((PropertyName) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L");
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNotNull(byteQuadsCanonicalizer0);
      
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 52, (DataInput) null, objectReader2, byteQuadsCanonicalizer0, 679);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertFalse(uTF8DataInputJsonParser0.canReadTypeId());
      assertFalse(uTF8DataInputJsonParser0.canReadObjectId());
      assertNull(uTF8DataInputJsonParser0.currentToken());
      assertFalse(uTF8DataInputJsonParser0.isNaN());
      assertNull(uTF8DataInputJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8DataInputJsonParser0.getCurrentTokenId());
      assertFalse(uTF8DataInputJsonParser0.canParseAsync());
      assertFalse(uTF8DataInputJsonParser0.hasTextCharacters());
      assertFalse(uTF8DataInputJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8DataInputJsonParser0.getFormatFeatures());
      assertEquals(52, uTF8DataInputJsonParser0.getFeatureMask());
      assertFalse(uTF8DataInputJsonParser0.hasCurrentToken());
      assertNull(uTF8DataInputJsonParser0.getCurrentName());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenLineNr());
      assertFalse(uTF8DataInputJsonParser0.isClosed());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8DataInputJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8DataInputJsonParser0.getCurrentToken());
      assertEquals(0, uTF8DataInputJsonParser0.currentTokenId());
      assertEquals(1, uTF8DataInputJsonParser0.getTokenColumnNr());
      assertFalse(uTF8DataInputJsonParser0.isExpectedStartObjectToken());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(uTF8DataInputJsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(uTF8DataInputJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xa7
         //  at [Source: UNKNOWN; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNotNull(nonBlockingJsonParser0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      MissingNode missingNode0 = (MissingNode)objectReader0.readTree((byte[]) null, 0, (-2406));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", missingNode0.asText());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.isBigInteger());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertFalse(missingNode0.booleanValue());
      assertNotNull(missingNode0);
      
      try { 
        objectReader0.readValue((JsonNode) missingNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.JsonNode` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator(" w#G.L:-pR*N");
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory0.getRootValueSeparator());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory3);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory0.getRootValueSeparator());
      assertEquals(8225, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8225, jsonFactory1.getParserFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8225, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8225, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" w#G.L:-pR*N", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8225, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(nonBlockingJsonParser0);
      
      try { 
        objectReader0.readValue((JsonParser) nonBlockingJsonParser0, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0.withType((Type) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      Class<BigIntegerNode>[] classArray0 = (Class<BigIntegerNode>[]) Array.newInstance(Class.class, 3);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      classArray0[0] = class0;
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      classArray0[1] = class1;
      Class<BigIntegerNode> class2 = BigIntegerNode.class;
      classArray0[2] = class2;
      objectMapper0.registerSubtypes(classArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, classArray0.length);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(0, 211);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser1);
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(211);
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertNotNull(placeholderForType0);
      
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertNotNull(arrayType0);
      
      TypeBindings typeBindings1 = arrayType0.getBindings();
      assertSame(typeBindings0, typeBindings1);
      assertSame(typeBindings1, typeBindings0);
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertNotNull(typeBindings1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings1);
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertNotNull(resolvedRecursiveType0);
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withStaticTyping();
      assertSame(typeBindings0, typeBindings1);
      assertSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertNotNull(resolvedRecursiveType1);
      
      Iterator<ResolvedRecursiveType> iterator0 = objectReader0.readValues((JsonParser) readerBasedJsonParser1, (JavaType) resolvedRecursiveType1);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(typeBindings0, typeBindings1);
      assertSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.currentToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(arrayType0.isJavaLangObject());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(iterator0);
      
      try { 
        objectReader0.readValue((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      Class<FilteringParserDelegate> class1 = FilteringParserDelegate.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertNotNull(javaType0);
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertNotNull(resolvedRecursiveType0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, class1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 3, (-2202), true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(readerBasedJsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-2), jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(jsonParserSequence0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, false, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-2), jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals((-2), filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(filteringParserDelegate0);
      
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)objectReader0._considerFilter(filteringParserDelegate0, true);
      assertSame(filteringParserDelegate1, filteringParserDelegate0);
      assertSame(filteringParserDelegate0, filteringParserDelegate1);
      assertEquals(0, filteringParserDelegate1.getMatchCount());
      assertEquals(0, filteringParserDelegate1.currentTokenId());
      assertEquals((-2), filteringParserDelegate1.getFeatureMask());
      assertFalse(filteringParserDelegate1.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate1.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate1.hasCurrentToken());
      assertFalse(filteringParserDelegate1.canReadObjectId());
      assertNull(filteringParserDelegate1.getCurrentToken());
      assertEquals(0, filteringParserDelegate1.getCurrentTokenId());
      assertFalse(filteringParserDelegate1.canReadTypeId());
      assertNull(filteringParserDelegate1.currentToken());
      assertNull(filteringParserDelegate1.getLastClearedToken());
      assertEquals(0, filteringParserDelegate1.getFormatFeatures());
      assertFalse(filteringParserDelegate1.requiresCustomCodec());
      assertFalse(filteringParserDelegate1.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals((-2), readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals((-2), jsonParserSequence0.getFeatureMask());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals((-2), filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(filteringParserDelegate1);
      
      // Undeclared exception!
      try { 
        objectReader0._verifyNoTrailingTokens(filteringParserDelegate1, deserializationContext0, resolvedRecursiveType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        objectReader0.readValues((JsonParser) null, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper();
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)1;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unexpected EOF in the middle of a 4-byte UTF-32 char: got 2, needed 4, at char #1, byte #6)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      long long0 = arrayNode0.asLong();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertEquals(0L, long0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(1, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNotNull(objectNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(1, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.textValue());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertNotNull(jsonParser0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertNotNull(javaType0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (StringReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ConcurrentHashMap<NioPathDeserializer, LongNode> concurrentHashMap0 = new ConcurrentHashMap<NioPathDeserializer, LongNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectReader objectReader1 = objectReader0.withAttributes(concurrentHashMap0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(bufferRecycler1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(iOContext0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 2, 1, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      FormatSchema formatSchema1 = readerBasedJsonParser0.getSchema();
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNull(formatSchema1);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory1 = objectReader0.getFactory();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader1 = objectReader0.at("");
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)80;
      byteArray0[8] = (byte) (-10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3600, (byte) (-1));
      assertEquals((-3591), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-21), (byte)1, (byte) (-1), (byte)8, (byte)23, (byte)16, (byte)71, (byte)80, (byte) (-10)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      MapType mapType1 = mapType0.withKeyTypeHandler(byteArrayInputStream0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertEquals((-3591), byteArrayInputStream0.available());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertArrayEquals(new byte[] {(byte) (-21), (byte)1, (byte) (-1), (byte)8, (byte)23, (byte)16, (byte)71, (byte)80, (byte) (-10)}, byteArray0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertEquals(9, byteArray0.length);
      assertNotNull(mapType1);
      
      MapLikeType mapLikeType0 = mapType1.withContentValueHandler(mapType0);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(mapLikeType0, mapType0);
      assertNotSame(mapLikeType0, mapType1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapLikeType0);
      assertEquals((-3591), byteArrayInputStream0.available());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasHandlers());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertArrayEquals(new byte[] {(byte) (-21), (byte)1, (byte) (-1), (byte)8, (byte)23, (byte)16, (byte)71, (byte)80, (byte) (-10)}, byteArray0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertTrue(mapLikeType0.equals((Object)mapType1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertEquals(9, byteArray0.length);
      assertNotNull(mapLikeType0);
      
      // Undeclared exception!
      try { 
        objectReader0.forType((JavaType) mapLikeType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.MapType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      int int0 = 1;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader1));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader2 = objectMapper1.reader(jsonNodeFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      objectReaderArray0[5] = objectReader2;
      objectReaderArray0[6] = objectReader1;
      objectReaderArray0[7] = objectReader1;
      objectReaderArray0[8] = objectReader0;
      // Undeclared exception!
      try { 
        objectReader0._bindAndClose((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        objectReader1.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "C1nnot detect format from input, does not look like any of detectable formatsI";
      ObjectReader objectReader1 = objectReader0.forType((JavaType) null);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      try { 
        objectReader0.readTree("C1nnot detect format from input, does not look like any of detectable formatsI");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'C1nnot': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"C1nnot detect format from input, does not look like any of detectable formatsI\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readTree("\"");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (String)\"\"\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertNotNull(nonBlockingJsonParser0);
      
      Version version0 = objectReader0.version();
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(10, version0.getMinorVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertFalse(version0.isUnknownVersion());
      assertFalse(version0.isUknownVersion());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(version0);
      
      try { 
        objectReader0._bindAndClose(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader1 = objectMapper1.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      StringReader stringReader0 = new StringReader("^]N6lRwG}8F_)(UgZ");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readValue((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('^' (code 94)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<IntNode> class2 = IntNode.class;
      MapType mapType0 = typeFactory1.constructMapType(class0, class1, class2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withStaticTyping();
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-66);
      int int0 = 1;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = '`';
      charArray0[2] = '\\';
      charArray0[3] = 'h';
      charArray0[4] = 't';
      charArray0[5] = 'X';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, (-483), 127, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertArrayEquals(new char[] {'@', '`', '\\', 'h', 't', 'X'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(6, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.skipChildren();
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isAbstract());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertArrayEquals(new char[] {'@', '`', '\\', 'h', 't', 'X'}, charArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(6, charArray0.length);
      assertNotNull(readerBasedJsonParser1);
      
      TextNode textNode0 = TextNode.valueOf("JSON");
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isArray());
      assertEquals("JSON", textNode0.textValue());
      assertFalse(textNode0.isObject());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertEquals("JSON", textNode0.asText());
      assertFalse(textNode0.isBigDecimal());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isMissingNode());
      assertFalse(textNode0.isBigInteger());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isFloatingPointNumber());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isLong());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isFloat());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        objectReader0._bind(readerBasedJsonParser1, textNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -483
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(945);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2692, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2692, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2692, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);
      assertSame(baseSettings0, baseSettings1);
      assertSame(baseSettings1, baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertFalse(baseSettings1.hasExplicitTimeZone());
      assertNotNull(baseSettings1);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNotNull(deserializationConfig0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, contextAttributes0);
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      
      DeserializationConfig deserializationConfig2 = new DeserializationConfig(deserializationConfig1, (SimpleMixInResolver) null);
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertNotNull(deserializationConfig2);
      
      ObjectReader objectReader1 = new ObjectReader(objectMapper0, deserializationConfig2);
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(deserializationConfig2.canOverrideAccessModifiers());
      assertNull(deserializationConfig2.getRootName());
      assertFalse(deserializationConfig2.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig2.getDefaultMergeable());
      assertFalse(deserializationConfig2.requiresFullValue());
      assertEquals(237020304, deserializationConfig2.getDeserializationFeatures());
      assertTrue(deserializationConfig2.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig2.useRootWrapping());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig2));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig2.equals((Object)deserializationConfig0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig2));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.withFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-87);
      try { 
        objectReader0.readValues(byteArray0, (-3547), 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"\uFFFD\u0006\u0001u\u0001\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-106);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)0;
      try { 
        objectReader0.readValue(byteArray0, 0, (int) 35);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Unsupported UCS-4 endianness (3412) detected
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      long long0 = arrayNode0.asLong();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertEquals(0L, long0);
      
      ObjectNode objectNode0 = arrayNode0.objectNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      MappingIterator<ArrayType> mappingIterator0 = objectReader0._newIterator(jsonParser0, (DeserializationContext) defaultDeserializationContext0, (JsonDeserializer<?>) null, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(mappingIterator0);
      
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(objectReader0));
      assertNotNull(stack0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 1, 393);
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertArrayEquals(new byte[] {(byte)10, (byte) (-18), (byte)1, (byte)0, (byte)1, (byte)1, (byte)0}, byteArray0);
      assertFalse(stack0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(7, byteArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      Class<InputStream> class0 = InputStream.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) class0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      boolean boolean0 = false;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory3);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1._with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(mappingIterator0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNull(deserializationConfig0);
      
      // Undeclared exception!
      try { 
        objectReader0._with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        objectReader0._bindAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNotNull(uRI0);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertNotNull(objectReader0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.inObject());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inArray());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertNotNull(tokenFilterContext0);
      
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer(false);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.inObject());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inArray());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals((-1), jsonPointer0.getMatchingIndex());
      assertTrue(jsonPointer0.matches());
      assertFalse(jsonPointer0.mayMatchElement());
      assertEquals("", jsonPointer0.toString());
      assertEquals("", jsonPointer0.getMatchingProperty());
      assertTrue(jsonPointer0.mayMatchProperty());
      assertEquals('/', JsonPointer.SEPARATOR);
      assertNotNull(jsonPointer0);
      
      JsonPointer jsonPointer1 = tokenFilterContext0.pathAsPointer(true);
      assertSame(jsonPointer1, jsonPointer0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.inObject());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inArray());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("", jsonPointer1.toString());
      assertEquals("", jsonPointer1.getMatchingProperty());
      assertFalse(jsonPointer1.mayMatchElement());
      assertTrue(jsonPointer1.mayMatchProperty());
      assertTrue(jsonPointer1.matches());
      assertEquals('/', JsonPointer.SEPARATOR);
      assertNotNull(jsonPointer1);
      
      ObjectReader objectReader1 = objectReader0.at(jsonPointer1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonPointer1, jsonPointer0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("ROOT", tokenFilterContext0.getTypeDesc());
      assertEquals("root", tokenFilterContext0.typeDesc());
      assertFalse(tokenFilterContext0.inObject());
      assertTrue(tokenFilterContext0.inRoot());
      assertFalse(tokenFilterContext0.hasCurrentName());
      assertNull(tokenFilterContext0.getCurrentName());
      assertFalse(tokenFilterContext0.inArray());
      assertTrue(tokenFilterContext0.isStartHandled());
      assertEquals(0, tokenFilterContext0.getEntryCount());
      assertEquals(0, tokenFilterContext0.getCurrentIndex());
      assertFalse(tokenFilterContext0.hasCurrentIndex());
      assertEquals((-1), jsonPointer1.getMatchingIndex());
      assertEquals("", jsonPointer1.toString());
      assertEquals("", jsonPointer1.getMatchingProperty());
      assertFalse(jsonPointer1.mayMatchElement());
      assertTrue(jsonPointer1.mayMatchProperty());
      assertTrue(jsonPointer1.matches());
      assertEquals('/', JsonPointer.SEPARATOR);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1._bindAndCloseAsTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(nonBlockingJsonParser0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      boolean boolean0 = objectReader0.isEnabled(deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(boolean0);
      
      Class<BooleanNode> class0 = BooleanNode.class;
      try { 
        objectReader1.readValue((JsonParser) nonBlockingJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(mappingIterator0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      ObjectReader objectReader1 = objectReader0.with(timeZone0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      try { 
        MockURL.URL("JSON", " for format ", 611, "JSON", (URLStreamHandler) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: json
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isArray());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isBigInteger());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isFloat());
      assertEquals("null", nullNode0.asText());
      assertEquals(0, nullNode0.size());
      assertNotNull(nullNode0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) nullNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isArray());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isBigInteger());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isFloat());
      assertEquals("null", nullNode0.asText());
      assertEquals(0, nullNode0.size());
      assertNull(resolvedRecursiveType0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      Version version0 = Version.unknownVersion();
      assertEquals("", version0.getGroupId());
      assertTrue(version0.isUknownVersion());
      assertTrue(version0.isUnknownVersion());
      assertFalse(version0.isSnapshot());
      assertEquals(0, version0.getMinorVersion());
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getMajorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertNotNull(version0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)50, (byte)95}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readValues((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('_' (code 95)): Expected space separating root-level values
         //  at [Source: (ByteArrayInputStream); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, uRI0, false);
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 769, pipedReader0, objectReader1, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("file", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(769, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertNotNull(arrayNode0);
      
      long long0 = arrayNode0.asLong();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertEquals(0L, long0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertTrue(objectNode0.isEmpty());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(arrayNode0, jsonNode0);
      assertNotSame(jsonNode0, arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(4, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(4, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.START_ARRAY, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isArray());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonNode0.equals((Object)arrayNode0));
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, (DefaultSerializerProvider) null, (DefaultDeserializationContext) null);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertNotNull(objectOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      FormatSchema formatSchema0 = filteringGeneratorDelegate0.getSchema();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(formatSchema0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0._findRootDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValue((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 1, true);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertArrayEquals(new char[] {'<', '\u0000'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(2, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertArrayEquals(new char[] {'<', '\u0000'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(2, charArray0.length);
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      assertNotNull(injectableValues_Std0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) null);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      MockFile mockFile0 = new MockFile("No content to map due to end-of-input");
      assertNotNull(mockFile0);
      
      try { 
        objectReader2._inputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes((CharacterEscapes) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNull(jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotNull(jsonFactory3);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNull(jsonFactory3.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<MapperFeature> class0 = MapperFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertNotNull(simpleType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertNotNull(referenceType0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertNotNull(placeholderForType0);
      
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(placeholderForType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.isEnumType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(deserializationFeature0);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isEnumType());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.isEnumType());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isEnumType());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.useStaticType());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.isReferenceType());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertNotNull(referenceType2);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      HashMap<LongNode, MapType> hashMap0 = new HashMap<LongNode, MapType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(objectReader0);
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNotNull(baseSettings0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNotNull(deserializationConfig0);
      
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, contextAttributes0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertNotNull(deserializationConfig1);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, deserializationConfig1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig1.canOverrideAccessModifiers());
      assertFalse(deserializationConfig1.useRootWrapping());
      assertNull(deserializationConfig1.getRootName());
      assertTrue(deserializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(237020304, deserializationConfig1.getDeserializationFeatures());
      assertFalse(deserializationConfig1.requiresFullValue());
      assertFalse(deserializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig1.getDefaultMergeable());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(deserializationConfig0.equals((Object)deserializationConfig1));
      assertFalse(deserializationConfig1.equals((Object)deserializationConfig0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      try { 
        MockURL.URL("|_/uM<-j", "[`o'!OP~h", (-1760), (String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-1760
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((InputStream) dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValues((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      assertNotNull(injectableValues_Std0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)62;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte)0, (byte)1, (byte)96, (byte)3, (byte) (-44), (byte) (-63), (byte)62, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      byteArray0[8] = (byte) (-20);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectReader0._initForMultiRead(defaultDeserializationContext_Impl0, (JsonParser) null);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertEquals(JsonWriteFeature.WRITE_NAN_AS_STRINGS, jsonWriteFeature0);
      
      formatFeatureArray0[0] = (FormatFeature) jsonWriteFeature0;
      // Undeclared exception!
      try { 
        JsonWriteFeature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.core.json.JsonWriteFeature.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(objectReader1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(objectReader2);
      
      try { 
        objectReader0.readTree("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-49), (byte)59, (byte) (-71), (byte)0, (byte)28, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-49), (byte)59, (byte) (-71), (byte)0, (byte)28, (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      try { 
        objectReader0.readValue((DataInput) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x3b
         //  at [Source: (DataInputStream); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Version version0 = Version.unknownVersion();
      assertEquals(0, version0.getMinorVersion());
      assertTrue(version0.isUnknownVersion());
      assertTrue(version0.isUknownVersion());
      assertFalse(version0.isSnapshot());
      assertEquals(0, version0.getPatchLevel());
      assertEquals(0, version0.getMajorVersion());
      assertEquals("", version0.getArtifactId());
      assertEquals("", version0.getGroupId());
      assertNotNull(version0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(1, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(1, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(1, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("*+~in|O");
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertEquals("*+~in|O", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertEquals("*+~in|O", jsonFactory2.getRootValueSeparator());
      assertEquals(1, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertEquals("*+~in|O", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(1, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("*+~in|O", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals(1, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory4);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory4.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(15, jsonFactory1.getGeneratorFeatures());
      assertEquals("*+~in|O", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactory2.getGeneratorFeatures());
      assertEquals("*+~in|O", jsonFactory2.getRootValueSeparator());
      assertEquals(1, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(15, jsonFactory3.getGeneratorFeatures());
      assertEquals("*+~in|O", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(1, jsonFactory3.getParserFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertEquals(15, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("*+~in|O", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals(1, jsonFactory4.getParserFeatures());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(1, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotNull(nonBlockingJsonParser0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MappingIterator<BigIntegerNode> mappingIterator0 = objectReader0.readValues((InputStream) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      String string0 = "";
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      boolean boolean0 = true;
      TextNode textNode0 = new TextNode("");
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isFloat());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertEquals("", textNode0.asText());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertNotNull(textNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(textNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isShort());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isArray());
      assertFalse(textNode0.isIntegralNumber());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isFloatingPointNumber());
      assertTrue(textNode0.isEmpty());
      assertFalse(textNode0.isMissingNode());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isFloat());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertFalse(textNode0.isBigInteger());
      assertEquals("", textNode0.asText());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isObject());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0.readValue(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      int int0 = 1;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[9];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader2 = objectMapper1.reader(jsonNodeFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      objectReaderArray0[5] = objectReader2;
      objectReaderArray0[6] = objectReader1;
      objectReaderArray0[7] = objectReader1;
      objectReaderArray0[8] = objectReader0;
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders2);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders3 = dataFormatReaders2.withMinimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders3);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders3.findFormat(byteArray0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders3);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders3);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders0);
      assertNotSame(dataFormatReaders3, dataFormatReaders2);
      assertNotSame(dataFormatReaders3, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders3);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(MatchStrength.NO_MATCH, dataFormatReaders_Match0.getMatchStrength());
      assertTrue(dataFormatReaders_Match0.hasMatch());
      assertEquals("JSON", dataFormatReaders_Match0.getMatchedFormatName());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(vector0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders3.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders3));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertEquals(3, byteArray0.length);
      assertEquals(9, objectReaderArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      String string0 = "5%d";
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, formatFeatureArray0.length);
      assertNotNull(objectReader1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bhwP");
      assertFalse(boolean0);
      
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("5%d", "5%d", false, 'T', 982);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 3)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNotNull(nonBlockingJsonParser0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader0._bind(nonBlockingJsonParser0, nonBlockingJsonParser0);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertNotNull(nonBlockingJsonParser1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertEquals(0, pipedInputStream1.available());
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertNotNull(pipedInputStream1);
      
      Version version0 = Version.unknownVersion();
      assertEquals(0, version0.getMinorVersion());
      assertEquals("", version0.getGroupId());
      assertEquals("", version0.getArtifactId());
      assertEquals(0, version0.getMajorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertTrue(version0.isUnknownVersion());
      assertFalse(version0.isSnapshot());
      assertTrue(version0.isUknownVersion());
      assertNotNull(version0);
      
      NonBlockingJsonParser nonBlockingJsonParser2 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertNotSame(nonBlockingJsonParser2, nonBlockingJsonParser0);
      assertNotSame(nonBlockingJsonParser2, nonBlockingJsonParser1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, nonBlockingJsonParser2.getCurrentTokenId());
      assertNull(nonBlockingJsonParser2.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser2.currentTokenId());
      assertFalse(nonBlockingJsonParser2.isNaN());
      assertFalse(nonBlockingJsonParser2.hasTextCharacters());
      assertNull(nonBlockingJsonParser2.currentToken());
      assertFalse(nonBlockingJsonParser2.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser2.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser2.getTextLength());
      assertFalse(nonBlockingJsonParser2.isClosed());
      assertNull(nonBlockingJsonParser2.getCurrentName());
      assertEquals(0L, nonBlockingJsonParser2.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser2.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser2.getTextOffset());
      assertFalse(nonBlockingJsonParser2.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser2.getFormatFeatures());
      assertFalse(nonBlockingJsonParser2.canReadTypeId());
      assertTrue(nonBlockingJsonParser2.needMoreInput());
      assertFalse(nonBlockingJsonParser2.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser2.getFeatureMask());
      assertTrue(nonBlockingJsonParser2.canParseAsync());
      assertNull(nonBlockingJsonParser2.getLastClearedToken());
      assertEquals(1, nonBlockingJsonParser2.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser2.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser2.equals((Object)nonBlockingJsonParser0));
      assertFalse(nonBlockingJsonParser2.equals((Object)nonBlockingJsonParser1));
      assertNotNull(nonBlockingJsonParser2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        objectReader0.readValues((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      JsonNode jsonNode1 = objectReader0.readTree(byteArray0, (-2), (-1));
      assertSame(jsonNode1, jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode1.isFloat());
      assertEquals("", jsonNode1.asText());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isBigInteger());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.booleanValue());
      assertFalse(jsonNode1.isArray());
      assertNull(jsonNode1.numberType());
      assertTrue(jsonNode1.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode1.asToken());
      assertFalse(jsonNode1.isInt());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isObject());
      assertFalse(jsonNode1.isBigDecimal());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertFalse(jsonNode1.isDouble());
      assertEquals(JsonNodeType.MISSING, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isLong());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode1);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[5] = deserializationFeature5;
      DeserializationFeature deserializationFeature6 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      deserializationFeatureArray0[6] = deserializationFeature6;
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature7 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[7] = deserializationFeature7;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TypeReference<IntNode> typeReference0 = (TypeReference<IntNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.forType(typeReference0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.withView(class0);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      boolean boolean0 = true;
      Vector<ObjectReader> vector0 = null;
      try {
        vector0 = new Vector<ObjectReader>((-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -38
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.highestNonEscapedChar(0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder1);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.ESCAPE_NON_ASCII;
      JsonFactoryBuilder jsonFactoryBuilder2 = jsonFactoryBuilder1.enable(jsonWriteFeature0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(63, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder2);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(63, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(63, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder2);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder2, jsonFactoryBuilder0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(63, jsonFactoryBuilder2.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder2.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder2.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder2.streamReadFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(nonBlockingJsonParser0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<MapperFeature> class0 = MapperFeature.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl1, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(iOContext1);
      
      PipedReader pipedReader0 = new PipedReader(2);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(readerBasedJsonParser1);
      
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(simpleType0);
      
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser1, (JavaType) simpleType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNotNull(uRI0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      boolean boolean0 = objectReader0.isEnabled(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes((CharacterEscapes) null);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNull(jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertNotNull(jsonFactory3);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNull(jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<MapperFeature> class0 = MapperFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertNotNull(referenceType0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertNotNull(placeholderForType0);
      
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(placeholderForType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isEnumType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(deserializationFeature0);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isEnumType());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isCollectionLikeType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isEnumType());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isArrayType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertNotNull(referenceType2);
      
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withContentValueHandler(placeholderForType0);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isCollectionLikeType());
      assertTrue(referenceType3.isEnumType());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.hasHandlers());
      assertTrue(referenceType3.isFinal());
      assertFalse(referenceType3.isAbstract());
      assertFalse(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.hasValueHandler());
      assertTrue(referenceType3.hasContentType());
      assertFalse(referenceType3.useStaticType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.isEnumType());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isCollectionLikeType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.isEnumType());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isArrayType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertNotNull(referenceType3);
      
      // Undeclared exception!
      try { 
        objectReader1._unwrapAndDeserialize((JsonParser) null, defaultDeserializationContext_Impl0, referenceType3, (JsonDeserializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = objectMapper1.canSerialize(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(boolean0);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "A<S'=+[&d}Tw'ETVDqB", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(readerBasedJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) readerBasedJsonParser0, (TypeReference<NullNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(128, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(nonBlockingJsonParser0);
      
      TypeReference<FilteringParserDelegate> typeReference0 = (TypeReference<FilteringParserDelegate>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) nonBlockingJsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNotNull(nonBlockingJsonParser0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader0._bind(nonBlockingJsonParser0, nonBlockingJsonParser0);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertNotNull(nonBlockingJsonParser1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      SimpleType simpleType1 = (SimpleType)objectMapper1.constructType(simpleType0);
      assertSame(simpleType0, simpleType1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(simpleType1, simpleType0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isFinal());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isConcrete());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(simpleType1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertNotNull(arrayNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((FormatFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertTrue(nullNode0.isEmpty());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isFloat());
      assertNotNull(nullNode0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) nullNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertTrue(nullNode0.isEmpty());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isFloat());
      assertNull(resolvedRecursiveType0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readTree((byte[]) null, 65599, 65599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isBigInteger());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isArray());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isShort());
      assertNotNull(nullNode0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) nullNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isBigInteger());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.textValue());
      assertTrue(nullNode0.isEmpty());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isLong());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isArray());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isShort());
      assertNull(resolvedRecursiveType0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isObject());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      try { 
        objectReader2.readValue("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertEquals("null", nullNode0.asText());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNotNull(nullNode0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = objectReader0.treeToValue((TreeNode) nullNode0, class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("null", nullNode0.asText());
      assertTrue(nullNode0.isEmpty());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isArray());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isBigDecimal());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertNull(resolvedRecursiveType0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader2 = objectReader0.with(jsonNodeFactory0);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      BinaryNode binaryNode0 = jsonNodeFactory0.binaryNode((byte[]) null, (int) (byte) (-40), (-1));
      assertNull(binaryNode0);
      
      ObjectReader objectReader3 = objectReader0.withValueToUpdate((Object) null);
      assertSame(objectReader0, objectReader3);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader3, objectReader1);
      assertSame(objectReader3, objectReader2);
      assertSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertNotNull(objectReader3);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      boolean boolean0 = objectReader0.isEnabled(jsonParser_Feature0);
      assertSame(objectReader0, objectReader3);
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonFactory2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(23, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(23, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(23, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertNotNull(arrayNode0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<IntNode> class0 = IntNode.class;
      ObjectReader objectReader2 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(jsonParser0);
      
      JsonParser jsonParser1 = objectReader1._considerFilter(jsonParser0, true);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(jsonParser0, jsonParser1);
      assertSame(jsonParser1, jsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser1.getCurrentToken());
      assertFalse(jsonParser1.isClosed());
      assertFalse(jsonParser1.isExpectedStartObjectToken());
      assertEquals(0, jsonParser1.getTextOffset());
      assertFalse(jsonParser1.hasTextCharacters());
      assertEquals(0, jsonParser1.currentTokenId());
      assertFalse(jsonParser1.canReadObjectId());
      assertEquals(0, jsonParser1.getFeatureMask());
      assertFalse(jsonParser1.canReadTypeId());
      assertFalse(jsonParser1.canParseAsync());
      assertNull(jsonParser1.currentToken());
      assertFalse(jsonParser1.hasCurrentToken());
      assertNull(jsonParser1.getLastClearedToken());
      assertFalse(jsonParser1.isExpectedStartArrayToken());
      assertEquals(0, jsonParser1.getFormatFeatures());
      assertEquals(0, jsonParser1.getCurrentTokenId());
      assertFalse(jsonParser1.requiresCustomCodec());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(jsonParser1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8192, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8192, jsonFactory3.getParserFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory3);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonParser_Feature1, false);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8192, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8192, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(8192, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(543, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory4);
      
      ObjectReader objectReader2 = objectReader0.with(jsonFactory4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8192, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8192, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(8192, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(543, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)1;
      try { 
        objectReader2.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001\uFFFD\u0001_\u0001\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]aMoOAw&DQ7");
      assertFalse(boolean0);
      
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotNull(objectReader0);
      
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertNotNull(linkedHashSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with((DeserializationConfig) null);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders2);
      
      try { 
        objectReader0._reportUnkownFormat(dataFormatReaders2, (DataFormatReaders.Match) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot detect format from input, does not look like any of detectable formats []
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(jsonpCharacterEscapes0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      boolean boolean0 = objectReader1.isEnabled(jsonParser_Feature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      // Undeclared exception!
      try { 
        objectReader0.without(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      LinkedList<ObjectReader> linkedList0 = new LinkedList<ObjectReader>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader1));
      assertNotNull(linkedList0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead(1574);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertNotNull(dataFormatReaders1);
      
      byte[] byteArray0 = new byte[1];
      String string0 = dataFormatReaders1.toString();
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      byteArray0[0] = (byte)123;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders1.findFormat(byteArray0);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertEquals(0, linkedList0.size());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertArrayEquals(new byte[] {(byte)123}, byteArray0);
      assertFalse(linkedList0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(1, byteArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      Class<IntNode> class0 = IntNode.class;
      ObjectReader objectReader2 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader1._detectBindAndReadValues(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isFloat());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      PipedReader pipedReader0 = new PipedReader(9);
      assertNotNull(pipedReader0);
      
      try { 
        objectReader0.readValues((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      IntNode intNode0 = (IntNode)objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(intNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(6, intNode0.intValue());
      assertFalse(intNode0.isMissingNode());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isDouble());
      assertEquals(6.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isLong());
      assertEquals(6.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isFloat());
      assertEquals((short)6, intNode0.shortValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isArray());
      assertEquals(6L, intNode0.longValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)54}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(intNode0);
      
      try { 
        objectReader0.readValue("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "\u2029");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((JsonFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      MappingIterator<BigIntegerNode> mappingIterator0 = objectReader0.readValues((Reader) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Version version0 = objectReader0.version();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertFalse(version0.isUnknownVersion());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals(0, version0.getPatchLevel());
      assertTrue(version0.isSnapshot());
      assertEquals(10, version0.getMinorVersion());
      assertNotNull(version0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.with((DeserializationFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      try { 
        objectReader0.readValues((Reader) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNotNull(arrayNode0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertNotNull(vector0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotNull(dataFormatReaders0);
      
      ObjectReader objectReader2 = objectReader0.withFormatDetection(dataFormatReaders0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(objectReader1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertNotNull(objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNull(jsonParser0);
      
      JsonParser jsonParser1 = objectReader1._considerFilter((JsonParser) null, true);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNull(jsonParser1);
      
      try { 
        objectReader1.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      // Undeclared exception!
      try { 
        objectReader0._findTreeDeserializer(defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectReader0, charsToNameCanonicalizer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(readerBasedJsonParser1);
      
      ReaderBasedJsonParser readerBasedJsonParser2 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser1, false);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser2);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertSame(readerBasedJsonParser2, readerBasedJsonParser0);
      assertSame(readerBasedJsonParser2, readerBasedJsonParser1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser2.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser2.currentTokenId());
      assertFalse(readerBasedJsonParser2.isNaN());
      assertNull(readerBasedJsonParser2.currentToken());
      assertNull(readerBasedJsonParser2.getCurrentToken());
      assertEquals(0, readerBasedJsonParser2.getCurrentTokenId());
      assertFalse(readerBasedJsonParser2.isClosed());
      assertEquals(0L, readerBasedJsonParser2.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser2.canReadObjectId());
      assertFalse(readerBasedJsonParser2.hasCurrentToken());
      assertFalse(readerBasedJsonParser2.canParseAsync());
      assertEquals(1, readerBasedJsonParser2.getTokenLineNr());
      assertNull(readerBasedJsonParser2.getCurrentName());
      assertEquals(0, readerBasedJsonParser2.getFormatFeatures());
      assertNull(readerBasedJsonParser2.getLastClearedToken());
      assertFalse(readerBasedJsonParser2.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser2.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser2.getTokenColumnNr());
      assertEquals(2, readerBasedJsonParser2.getFeatureMask());
      assertFalse(readerBasedJsonParser2.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser2.canReadTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(readerBasedJsonParser2);
      
      try { 
        objectReader1._initForReading(defaultDeserializationContext_Impl0, readerBasedJsonParser2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      double double0 = arrayNode0.asDouble(0.0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(0.0, double0, 0.01);
      
      long long0 = arrayNode0.asLong();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(0L, long0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(jsonNode0, objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertEquals(2, jsonParser0.currentTokenId());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertNotNull(jsonNode0);
      
      DeserializationConfig deserializationConfig0 = objectReader1.getConfig();
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237019280, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(deserializationConfig0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean0 = jsonFactory0.isEnabled(jsonFactory_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(boolean0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNotNull(nonBlockingJsonParser0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-1);
      BinaryNode binaryNode0 = BinaryNode.valueOf(byteArray0);
      assertFalse(binaryNode0.isInt());
      assertFalse(binaryNode0.isShort());
      assertFalse(binaryNode0.isArray());
      assertFalse(binaryNode0.isObject());
      assertNull(binaryNode0.numberType());
      assertFalse(binaryNode0.booleanValue());
      assertEquals(JsonNodeType.BINARY, binaryNode0.getNodeType());
      assertFalse(binaryNode0.isBigDecimal());
      assertFalse(binaryNode0.isMissingNode());
      assertFalse(binaryNode0.isFloat());
      assertFalse(binaryNode0.isBigInteger());
      assertNull(binaryNode0.textValue());
      assertEquals(0, binaryNode0.size());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, binaryNode0.asToken());
      assertFalse(binaryNode0.isLong());
      assertTrue(binaryNode0.isEmpty());
      assertFalse(binaryNode0.isDouble());
      assertFalse(binaryNode0.isFloatingPointNumber());
      assertFalse(binaryNode0.isIntegralNumber());
      assertArrayEquals(new byte[] {(byte) (-50), (byte)41, (byte)50, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(binaryNode0);
      
      try { 
        objectReader1.treeToValue((TreeNode) binaryNode0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `byte[]`: incompatible types
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNotNull(arrayNode0);
      
      long long0 = arrayNode0.asLong();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0L, long0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNotNull(objectNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertEquals(1, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertNotNull(javaType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType) null);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 3);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLDeserializers_Std0, false);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectMapper1, charsToNameCanonicalizer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(readerBasedJsonParser0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.disable(jsonParser_Feature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(readerBasedJsonParser1);
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAsTree(readerBasedJsonParser1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertTrue(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertEquals(0, missingNode0.size());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isLong());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isDouble());
      assertFalse(missingNode0.booleanValue());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isInt());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(missingNode0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "\u2029");
      assertFalse(boolean0);
      
      ObjectReader objectReader2 = objectReader0.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader3 = objectReader1.without(deserializationFeature1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertSame(objectReader3, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertNotNull(objectReader3);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertFalse(nullNode0.isFloat());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isArray());
      assertTrue(nullNode0.isEmpty());
      assertNotNull(nullNode0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = objectReader1.treeToValue((TreeNode) nullNode0, class0);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isFloat());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isObject());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isBigDecimal());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isArray());
      assertTrue(nullNode0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNull(resolvedRecursiveType0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-79);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-115);
      // Undeclared exception!
      try { 
        objectReader1._detectBindAndClose(byteArray0, 430, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      try { 
        objectReader0.readValue("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertNotNull(jsonFactory3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0.readTree((JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (char[])\"=\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, jsonFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(mappingIterator0);
      
      MappingIterator<ArrayNode> mappingIterator1 = objectReader0.readValues(byteArray0);
      assertNotSame(mappingIterator1, mappingIterator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(mappingIterator1.equals((Object)mappingIterator0));
      assertEquals(0, byteArray0.length);
      assertNotNull(mappingIterator1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 2, (-576));
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(dataFormatReaders_Match0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, (int) (byte)63, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "2meoc@2T");
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNotNull(nonBlockingJsonParser0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader0._bind(nonBlockingJsonParser0, nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertNotNull(nonBlockingJsonParser1);
      
      Version version0 = objectReader0.version();
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(version0.isUnknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(10, version0.getMinorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertNotNull(version0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      JsonNode jsonNode1 = objectReader0.readTree(byteArray0, (-342), (-1));
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonNode1, jsonNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonNodeType.MISSING, jsonNode1.getNodeType());
      assertFalse(jsonNode1.isFloat());
      assertNull(jsonNode1.textValue());
      assertFalse(jsonNode1.isBigInteger());
      assertFalse(jsonNode1.isIntegralNumber());
      assertFalse(jsonNode1.isFloatingPointNumber());
      assertTrue(jsonNode1.isEmpty());
      assertFalse(jsonNode1.isArray());
      assertFalse(jsonNode1.isDouble());
      assertTrue(jsonNode1.isMissingNode());
      assertFalse(jsonNode1.isShort());
      assertFalse(jsonNode1.booleanValue());
      assertEquals(0, jsonNode1.size());
      assertFalse(jsonNode1.isLong());
      assertNull(jsonNode1.numberType());
      assertFalse(jsonNode1.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode1.asToken());
      assertFalse(jsonNode1.isBigDecimal());
      assertFalse(jsonNode1.isInt());
      assertEquals("", jsonNode1.asText());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonFactory1);
      
      byte[] byteArray0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(objectMapper0);
      
      Class<CoreXMLDeserializers.Std> class0 = CoreXMLDeserializers.Std.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(objectReader0);
      
      int int0 = 0;
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) stringReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isFloat());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertEquals("", missingNode0.asText());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isDouble());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isArray());
      assertTrue(missingNode0.isEmpty());
      assertNotNull(missingNode0);
      
      Class<DecimalNode> class0 = DecimalNode.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)24;
      File file0 = MockFile.createTempFile("Root name '%s' does not match expected ('%s') for type %s", "EJ~  sR%-Be!");
      assertEquals("/tmp/Root name '%s' does not match expected ('%s') for type %s0EJ~  sR%-Be!", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("Root name '%s' does not match expected ('%s') for type %s0EJ~  sR%-Be!", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      try { 
        objectReader0.readValues(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl0, false);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = ']';
      charArray0[3] = 'N';
      charArray0[4] = 'd';
      charArray0[5] = 'C';
      charArray0[6] = '<';
      charArray0[7] = '4';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, (Reader) null, objectMapper2, charsToNameCanonicalizer0, charArray0, 0, (-900), false);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertArrayEquals(new char[] {';', '(', ']', 'N', 'd', 'C', '<', '4'}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(8, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(8, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertArrayEquals(new char[] {';', '(', ']', 'N', 'd', 'C', '<', '4'}, charArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(8, charArray0.length);
      assertNull(formatSchema0);
      
      ObjectReader objectReader0 = objectMapper2.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      boolean boolean0 = jsonFactory0.isEnabled(jsonFactory_Feature0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(boolean0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNotNull(nonBlockingJsonParser0);
      
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = (MockFile)MockFile.createTempFile("JSON", "");
      assertNotSame(mockFile1, mockFile0);
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("JSON0", mockFile1.getName());
      assertEquals("/tmp/JSON0", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals("/tmp", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MappingIterator<IntNode> mappingIterator0 = objectReader0.readValues((File) mockFile1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(mockFile1, mockFile0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("JSON0", mockFile1.getName());
      assertEquals("/tmp/JSON0", mockFile1.toString());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals("/tmp", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mappingIterator0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)11;
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x5f009b (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(4, jsonParser_FeatureArray0.length);
      assertNotNull(objectReader1);
      
      String string0 = "Root name '%s' does not match expected ('%s') for type %s";
      ObjectReader objectReader2 = objectReader1.withRootName("Root name '%s' does not match expected ('%s') for type %s");
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(4, jsonParser_FeatureArray0.length);
      assertNotNull(objectReader2);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigIntegerNode bigIntegerNode0 = (BigIntegerNode)jsonNodeFactory0.numberNode(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isInt());
      assertNotNull(bigIntegerNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(bigIntegerNode0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isInt());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertNull(treeTraversingParser0.currentToken());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(treeTraversingParser0);
      
      BigIntegerNode bigIntegerNode1 = (BigIntegerNode)objectReader1._bindAsTree(treeTraversingParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(bigIntegerNode0, bigIntegerNode1);
      assertNotSame(bigIntegerNode1, bigIntegerNode0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertFalse(bigIntegerNode0.isLong());
      assertEquals(0, bigIntegerNode0.size());
      assertFalse(bigIntegerNode0.booleanValue());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isNaN());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isEmpty());
      assertNull(bigIntegerNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isInt());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(7, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, treeTraversingParser0.currentToken());
      assertEquals(7, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertTrue(treeTraversingParser0.hasCurrentToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode1.numberType());
      assertTrue(bigIntegerNode1.isEmpty());
      assertFalse(bigIntegerNode1.isFloat());
      assertFalse(bigIntegerNode1.isArray());
      assertNull(bigIntegerNode1.textValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode1.getNodeType());
      assertTrue(bigIntegerNode1.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode1.asToken());
      assertFalse(bigIntegerNode1.isNaN());
      assertFalse(bigIntegerNode1.isDouble());
      assertFalse(bigIntegerNode1.isLong());
      assertFalse(bigIntegerNode1.isMissingNode());
      assertFalse(bigIntegerNode1.isInt());
      assertFalse(bigIntegerNode1.isFloatingPointNumber());
      assertFalse(bigIntegerNode1.isShort());
      assertFalse(bigIntegerNode1.isObject());
      assertTrue(bigIntegerNode1.isBigInteger());
      assertEquals(0, bigIntegerNode1.size());
      assertFalse(bigIntegerNode1.isBigDecimal());
      assertFalse(bigIntegerNode1.booleanValue());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(bigIntegerNode1.equals((Object)bigIntegerNode0));
      assertEquals(4, jsonParser_FeatureArray0.length);
      assertNotNull(bigIntegerNode1);
      
      StringReader stringReader0 = new StringReader("Root name '%s' does not match expected ('%s') for type %s");
      assertNotNull(stringReader0);
      
      try { 
        objectReader2.readValues((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Root': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isMissingNode());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertTrue(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertEquals(0, jsonNode0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(jsonNode0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        objectReader1.treeToValue((TreeNode) jsonNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("", double0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.deepCopy();
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isEmpty());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectNode2);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(jsonNode0, objectNode2);
      assertNotSame(jsonNode0, objectNode0);
      assertNotSame(jsonNode0, objectNode1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(1, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isEmpty());
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals("", jsonNode0.asText());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertTrue(jsonNode0.equals((Object)objectNode2));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertTrue(jsonNode0.equals((Object)objectNode1));
      assertNotNull(jsonNode0);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader2 = objectReader1.withoutFeatures(deserializationFeatureArray0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNotNull(nonBlockingJsonParser0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      objectMapper0._registeredModuleTypes = (Set<Object>) treeSet0;
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper0._registeredModuleTypes.size());
      assertTrue(objectMapper0._registeredModuleTypes.isEmpty());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      try { 
        objectReader0._bindAsTree(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(jsonNode0, objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isEmpty());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.textValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(2, jsonParser0.currentTokenId());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertEquals(0, jsonNode0.size());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isObject());
      assertTrue(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloat());
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertNotNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[1];
      objectReaderArray0[0] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(1, objectReaderArray0.length);
      assertNotNull(objectReader1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader2 = objectReader0.with(jsonNodeFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class1 = List.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, javaType0);
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertNotNull(collectionType0);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType1);
      
      CollectionType collectionType2 = collectionType1.withTypeHandler(objectReader0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(collectionType2.isAbstract());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isInterface());
      assertFalse(collectionType2.isConcrete());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isCollectionLikeType());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertNotNull(collectionType2);
      
      CollectionLikeType collectionLikeType0 = collectionType2.withStaticTyping();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionLikeType0);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionLikeType0);
      assertNotSame(collectionType2, collectionType1);
      assertSame(collectionType2, collectionLikeType0);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionLikeType0, collectionType1);
      assertNotSame(collectionLikeType0, collectionType0);
      assertSame(collectionLikeType0, collectionType2);
      assertTrue(collectionType2.isAbstract());
      assertTrue(collectionType2.hasHandlers());
      assertFalse(collectionType2.isArrayType());
      assertTrue(collectionType2.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isEnumType());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isInterface());
      assertFalse(collectionType2.isConcrete());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.isCollectionLikeType());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isConcrete());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertFalse(collectionType1.isMapLikeType());
      assertTrue(collectionType1.isInterface());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionLikeType0.equals((Object)collectionType0));
      assertTrue(collectionLikeType0.equals((Object)collectionType1));
      assertNotNull(collectionLikeType0);
      
      // Undeclared exception!
      try { 
        objectReader2.readValue((JsonParser) null, (ResolvedType) collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = (ObjectMapper)objectMapper0.setHandlerInstantiator((HandlerInstantiator) null);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(95, jsonFactory3.getGeneratorFeatures());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser(byteArray0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(95, jsonFactory3.getGeneratorFeatures());
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-35), (byte)1, (byte)2, (byte)1, (byte) (-8), (byte)7, (byte)0, (byte)64}, byteArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      IntNode intNode0 = IntNode.valueOf((byte)2);
      assertEquals(2L, intNode0.longValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isMissingNode());
      assertEquals((short)2, intNode0.shortValue());
      assertFalse(intNode0.isBigInteger());
      assertEquals(2.0, intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(2, intNode0.intValue());
      assertFalse(intNode0.isLong());
      assertEquals(2.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isDouble());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertNotNull(intNode0);
      
      try { 
        objectReader0._bind(uTF8StreamJsonParser0, intNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x1
         //  at [Source: (byte[])\"\uFFFD\uFFFD\u0001\u0002\u0001\uFFFD\u0007\u0000@\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("JSON", (Short) null);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.put("JSON", 0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertNotNull(objectNode2);
      
      JsonNode jsonNode0 = objectNode2.findValue("");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertEquals(1, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isEmpty());
      assertFalse(objectNode2.booleanValue());
      assertTrue(objectNode2.isObject());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(1, objectNode2.size());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertNull(jsonNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.treeAsTokens((TreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = ')';
      charArray0[2] = '@';
      charArray0[3] = ',';
      charArray0[4] = 'Q';
      charArray0[5] = '{';
      charArray0[6] = '9';
      charArray0[7] = 'P';
      charArray0[8] = 'U';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertArrayEquals(new char[] {'d', ')', '@', ',', 'Q', '{', '9', 'P', 'U'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      TypeReference<IntNode> typeReference0 = (TypeReference<IntNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) readerBasedJsonParser0, typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators1 = new SimpleValueInstantiators();
      assertFalse(simpleValueInstantiators1.equals((Object)simpleValueInstantiators0));
      assertNotNull(simpleValueInstantiators1);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(simpleValueInstantiators0.equals((Object)simpleValueInstantiators1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(12289, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(12289, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(12289, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory2);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(12289, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(12289, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(12289, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectMapper0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(12289, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(12289, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(12289, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(objectReader0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      HashMap<BeanDeserializer, MapType> hashMap0 = new HashMap<BeanDeserializer, MapType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      ObjectReader objectReader1 = objectMapper0.reader(contextAttributes1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(12289, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(12289, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(12289, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader0.withValueToUpdate(objectReader1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(12289, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(12289, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(12289, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      MutableConfigOverride mutableConfigOverride0 = objectMapper0.configOverride(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(mutableConfigOverride0.getIsIgnoredType());
      assertNull(mutableConfigOverride0.getMergeable());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(mutableConfigOverride0);
      
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader2 = new ObjectReader(objectReader1, tokenFilter0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader2.readValue((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      ObjectReader objectReader2 = objectReader0.withType((Type) class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      boolean boolean0 = jsonFactory0.isEnabled(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(boolean0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNotNull(nonBlockingJsonParser0);
      
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      assertNotNull(mockFile0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertNotNull(arrayNode0);
      
      long long0 = arrayNode0.asLong();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertEquals(0L, long0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertNotNull(objectNode0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertNotNull(jsonParser0);
      
      File file0 = null;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      Class<FilteringParserDelegate> class1 = FilteringParserDelegate.class;
      Class<AbstractDeserializer> class2 = AbstractDeserializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType) null);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings1 = TypeBindings.create(class0, list0);
      assertSame(class0, class1);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(resolvedRecursiveType0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, (JavaType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_OBJECT) found after value (bound as [null]): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MockFile mockFile0 = new MockFile("can only instantiate non-static inner class by using default, no-argument constructor");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "can only instantiate non-static inner class by using default, no-argument constructor");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "can only instantiate non-static inner class by using default, no-argument constructor", uRLStreamHandler0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-59);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertNotNull(simpleType0);
      
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JavaType javaType0 = objectMapper1.constructType(simpleType0);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(javaType0, simpleType0);
      assertSame(simpleType0, javaType0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(javaType0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, (byte)3);
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertEquals(0, arrayNode0.size());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isEmpty());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertNotNull(jsonParser0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, defaultDeserializationContext_Impl0, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as `java.lang.Integer`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      URI uRI0 = MockURI.aFileURI;
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNotNull(uRI0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertNotNull(arrayNode0);
      
      long long0 = arrayNode0.asLong();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertEquals(0L, long0);
      
      ObjectNode objectNode0 = arrayNode0.addObject();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(1, arrayNode0.size());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNotNull(objectNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isEmpty());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(1, arrayNode0.size());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNotNull(jsonParser0);
      
      File file0 = null;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      Class<FilteringParserDelegate> class1 = FilteringParserDelegate.class;
      Class<AbstractDeserializer> class2 = AbstractDeserializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertNotNull(javaType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaType0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      assertSame(class1, class0);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(typeBindings1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotNull(resolvedRecursiveType0);
      
      try { 
        objectReader0._verifyNoTrailingTokens(jsonParser0, deserializationContext0, resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_ARRAY) found after value (bound as `com.fasterxml.jackson.core.filter.FilteringParserDelegate`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      File file0 = MockFile.createTempFile("JSON", "pXRY~CRM=R");
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals("JSON0pXRY~CRM=R", file0.getName());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/JSON0pXRY~CRM=R", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("pXRY~CRM=R");
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNotNull(readerBasedJsonParser0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) null);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isPrimitive());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertNotNull(simpleType0);
      
      SimpleType simpleType1 = (SimpleType)objectMapper0.constructType(class0);
      assertNotSame(simpleType1, simpleType0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType1.isContainerType());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isInterface());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.isFinal());
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertNotNull(simpleType1);
      
      try { 
        objectReader1._verifyNoTrailingTokens(readerBasedJsonParser0, defaultDeserializationContext_Impl0, simpleType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'pXRY': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"pXRY~CRM=R\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MockFile mockFile0 = new MockFile("can only instantiate non-static inner class by using default, no-argument constructor");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "can only instantiate non-static inner class by using default, no-argument constructor");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "can only instantiate non-static inner class by using default, no-argument constructor", uRLStreamHandler0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-59);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isShort());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertNotNull(objectNode0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      assertSame(tokenFilter1, tokenFilter0);
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertNotNull(tokenFilter1);
      
      ObjectReader objectReader2 = objectReader1.with((JsonNodeFactory) null);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertSame(tokenFilter0, tokenFilter1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(JsonWriteFeature.WRITE_NAN_AS_STRINGS, jsonWriteFeature0);
      
      ObjectReader objectReader3 = objectReader1.without((FormatFeature) jsonWriteFeature0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertSame(tokenFilter0, tokenFilter1);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertEquals(3, jsonWriteFeature0.collectDefaults());
      assertEquals(JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS, jsonWriteFeature0.mappedFeature());
      assertTrue(jsonWriteFeature0.enabledByDefault());
      assertEquals(2, jsonWriteFeature0.getMask());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_SINGLE_QUOTES;
      assertEquals(4, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_SINGLE_QUOTES, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectReader0.without((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(4, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(4, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.without((FormatFeature) jsonReadFeature0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader0);
      assertSame(objectReader3, objectReader1);
      assertSame(objectReader3, objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(4, jsonReadFeature0.getMask());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_SINGLE_QUOTES, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      ObjectReader objectReader4 = objectReader0.withType((Type) class0);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader4, objectReader3);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertNotNull(objectReader4);
      
      MockFile mockFile0 = new MockFile("Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s");
      assertNotNull(mockFile0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.characterEscapes((CharacterEscapes) jsonpCharacterEscapes0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactoryBuilder1);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(8209, jsonFactory3.getParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(29, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory3);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory4 = jsonFactory2.disable(jsonGenerator_Feature1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(8209, jsonFactory4.getParserFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory4);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory4, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(8209, jsonFactory4.getParserFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withKeyTypeHandler(jsonFactory4);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(8209, jsonFactory4.getParserFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      
      ObjectReader objectReader2 = objectReader1.withAttribute(mapType1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(8209, jsonFactory4.getParserFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      ObjectReader objectReader3 = objectReader2.withType(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8209, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8209, jsonFactory1.getParserFeatures());
      assertEquals(29, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8209, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(8209, jsonFactory4.getParserFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = new JsonFactory();
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper1);
      
      JsonNode jsonNode0 = objectReader0.readTree(byteArray0, (-342), (int) (byte) (-3));
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(jsonNode0.textValue());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isInt());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.booleanValue());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(3, byteArray0.length);
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(64, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((Writer) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      ObjectNode objectNode0 = (ObjectNode)objectReader0.createObjectNode();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectNode0);
      
      Class<MapType> class0 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertNotNull(simpleType0);
      
      SimpleType simpleType1 = (SimpleType)objectMapper0.constructType(simpleType0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(simpleType0, simpleType1);
      assertSame(simpleType1, simpleType0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isInterface());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.hasHandlers());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(simpleType1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MissingNode missingNode0 = MissingNode.getInstance();
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertNotNull(missingNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, missingNode0, true);
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1873), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 0, 1407, false);
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals((-1873), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(6, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals((-1873), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isArray());
      assertNull(missingNode0.textValue());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(6, charArray0.length);
      assertNull(formatSchema0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.reader((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      objectReader0._verifySchemaType((FormatSchema) null);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      JsonFactory jsonFactory1 = objectReader0.getFactory();
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      assertEquals(64, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((Writer) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      ObjectNode objectNode0 = (ObjectNode)objectReader1.createObjectNode();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isEmpty());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectNode0);
      
      URL uRL0 = MockURL.URL("JSON", "", 2, "awNZv)Cu9tj yM", uRLStreamHandler0);
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("awNZv)Cu9tj yM", uRL0.getFile());
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("awNZv)Cu9tj yM", uRL0.getPath());
      assertEquals("json", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals(":2", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(6, jsonParser_FeatureArray0.length);
      assertNotNull(objectMapper1);
      
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      JsonWriteFeature[] jsonWriteFeatureArray0 = new JsonWriteFeature[5];
      jsonWriteFeatureArray0[0] = jsonWriteFeature0;
      JsonWriteFeature jsonWriteFeature1 = JsonWriteFeature.ESCAPE_NON_ASCII;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature6);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonParser_Feature6, jsonParser_Feature0);
      assertNotSame(jsonParser_Feature6, jsonParser_Feature3);
      assertNotSame(jsonParser_Feature6, jsonParser_Feature4);
      assertNotSame(jsonParser_Feature6, jsonParser_Feature5);
      assertNotSame(jsonParser_Feature6, jsonParser_Feature1);
      assertNotSame(jsonParser_Feature6, jsonParser_Feature2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(1, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonParser_Feature6.equals((Object)jsonParser_Feature0));
      assertFalse(jsonParser_Feature6.equals((Object)jsonParser_Feature3));
      assertFalse(jsonParser_Feature6.equals((Object)jsonParser_Feature4));
      assertFalse(jsonParser_Feature6.equals((Object)jsonParser_Feature5));
      assertFalse(jsonParser_Feature6.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature6.equals((Object)jsonParser_Feature2));
      assertNotNull(jsonFactory1);
      
      jsonWriteFeatureArray0[1] = jsonWriteFeature1;
      jsonWriteFeatureArray0[2] = jsonWriteFeature0;
      jsonWriteFeatureArray0[3] = jsonWriteFeature0;
      jsonWriteFeatureArray0[4] = jsonWriteFeature0;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.enable(jsonWriteFeature0, jsonWriteFeatureArray0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertNotSame(jsonWriteFeature0, jsonWriteFeature1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(63, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertFalse(jsonWriteFeature0.equals((Object)jsonWriteFeature1));
      assertEquals(5, jsonWriteFeatureArray0.length);
      assertNotNull(jsonFactoryBuilder1);
      
      IntNode intNode0 = new IntNode(256);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)256, intNode0.shortValue());
      assertEquals(256.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(256L, intNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(256, intNode0.intValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.canConvertToInt());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(256.0F, intNode0.floatValue(), 0.01F);
      assertNotNull(intNode0);
      
      BigDecimal bigDecimal0 = intNode0.decimalValue();
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)256, intNode0.shortValue());
      assertEquals(256.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(256L, intNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(256, intNode0.intValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.canConvertToInt());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(256.0F, intNode0.floatValue(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)256, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DecimalNode decimalNode0 = (DecimalNode)jsonNodeFactory0.numberNode(bigDecimal0);
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)256, intNode0.shortValue());
      assertEquals(256.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(256L, intNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(256, intNode0.intValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.canConvertToInt());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(256.0F, intNode0.floatValue(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)256, bigDecimal0.shortValue());
      assertNotNull(decimalNode0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(decimalNode0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper1);
      assertFalse(decimalNode0.isNaN());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isDouble());
      assertTrue(decimalNode0.isEmpty());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isBigInteger());
      assertFalse(decimalNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertNull(decimalNode0.textValue());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertNull(treeTraversingParser0.currentToken());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isBigInteger());
      assertEquals((short)256, intNode0.shortValue());
      assertEquals(256.0, intNode0.doubleValue(), 0.01);
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(256L, intNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(256, intNode0.intValue());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.isInt());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.canConvertToInt());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.canConvertToLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(256.0F, intNode0.floatValue(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)256, bigDecimal0.shortValue());
      assertNotNull(treeTraversingParser0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertNotNull(mapType0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      MapType mapType1 = (MapType)mapType0.withKeyValueHandler(objectReader1);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(mapType1, mapType0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertNotNull(mapType1);
      
      MapType mapType2 = (MapType)mapType1.withStaticTyping();
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(1, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(mapType0.isEnumType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertNotNull(mapType2);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((JsonParser) treeTraversingParser0, (ResolvedType) mapType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ObjectReader cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      // Undeclared exception!
      try { 
        objectReader0.readValues(byteArray0, (int) 33, (int) 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertNotNull(arrayNode0);
      
      ObjectNode objectNode0 = arrayNode0.findParent("com.fasterxml.jackson.databind.ObjectReader");
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertTrue(arrayNode0.isEmpty());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertNull(objectNode0);
      
      Class<Object> class0 = Object.class;
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.QUOTE_FIELD_NAMES;
      JsonWriteFeature[] jsonWriteFeatureArray0 = new JsonWriteFeature[5];
      jsonWriteFeatureArray0[0] = jsonWriteFeature0;
      JsonWriteFeature jsonWriteFeature1 = JsonWriteFeature.ESCAPE_NON_ASCII;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      jsonWriteFeatureArray0[1] = jsonWriteFeature1;
      jsonWriteFeatureArray0[2] = jsonWriteFeature0;
      jsonWriteFeatureArray0[3] = jsonWriteFeature0;
      jsonWriteFeatureArray0[4] = jsonWriteFeature0;
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.enable(jsonWriteFeature0, jsonWriteFeatureArray0);
      assertSame(jsonFactoryBuilder0, jsonFactoryBuilder1);
      assertSame(jsonFactoryBuilder1, jsonFactoryBuilder0);
      assertNotSame(jsonWriteFeature0, jsonWriteFeature1);
      assertEquals(63, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(8193, jsonFactoryBuilder1.streamReadFeatures());
      assertEquals(63, jsonFactoryBuilder1.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder1.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder1.factoryFeaturesMask());
      assertFalse(jsonWriteFeature0.equals((Object)jsonWriteFeature1));
      assertEquals(5, jsonWriteFeatureArray0.length);
      assertNotNull(jsonFactoryBuilder1);
      
      // Undeclared exception!
      try { 
        objectReader0.treeToValue((TreeNode) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.TreeTraversingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      MockFile mockFile0 = new MockFile("can only instantiate non-static inner class by using default, no-argument constructor");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "can only instantiate non-static inner class by using default, no-argument constructor");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "can only instantiate non-static inner class by using default, no-argument constructor", uRLStreamHandler0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-59);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertTrue(objectNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertNotNull(objectNode0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ObjectNode objectNode1 = objectNode0.put("", double0);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertEquals("", objectNode1.asText());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isArray());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isObject());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertNotNull(objectNode1);
      
      try { 
        objectReader1._reportUndetectableSource(objectNode1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.databind.node.ObjectNode with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes((CharacterEscapes) null);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertNull(jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertNotNull(jsonFactory3);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNull(jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNull(jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertNull(jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<MapperFeature> class0 = MapperFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isEnumType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertNotNull(simpleType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isEnumType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(deserializationFeature0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isEnumType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isEnumType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertNotNull(referenceType1);
      
      try { 
        objectReader0._reportUndetectableSource(jsonFactory1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot use source of type com.fasterxml.jackson.core.JsonFactory with format auto-detection: must be byte- not char-based
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory3);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory4 = jsonFactory1.disable(jsonGenerator_Feature1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(29, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(29, jsonFactory4.getGeneratorFeatures());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(8193, jsonFactory4.getParserFeatures());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertNotNull(jsonFactory4);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-55);
      ObjectReader objectReader1 = objectReader0.with(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory4));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader1);
      
      byteArray0[3] = (byte) (-115);
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("O`T2Z5?Q+@");
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(29, jsonFactory0.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertNotNull(readerBasedJsonParser0);
      
      byteArray0[4] = (byte)83;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00B7' (code 183)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFDV\u024DS\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(63, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(63, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<ArrayNode> mappingIterator0 = objectReader0.readValues(byteArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(mappingIterator0);
      
      MappingIterator<ArrayNode> mappingIterator1 = objectReader0.readValues(byteArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(mappingIterator1, mappingIterator0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(mappingIterator1.equals((Object)mappingIterator0));
      assertEquals(0, byteArray0.length);
      assertNotNull(mappingIterator1);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders0);
      
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 2, (-576));
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectReaderArray0.length);
      assertNotNull(dataFormatReaders_Match0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(objectReader1, objectReader0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(objectReader0, objectReader1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockFile mockFile0 = new MockFile("can only instantiate non-static inner class by using default, no-argument constructor");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "can only instantiate non-static inner class by using default, no-argument constructor");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "can only instantiate non-static inner class by using default, no-argument constructor", uRLStreamHandler0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-31);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertFalse(objectNode0.isBigInteger());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertNotNull(objectNode0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ObjectNode objectNode1 = objectNode0.put("", double0);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.deepCopy();
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectNode2);
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode1.equals((Object)objectNode2));
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertNotSame(objectNode1, jsonNode0);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, jsonNode0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(jsonNode0, objectNode1);
      assertNotSame(jsonNode0, objectNode0);
      assertNotSame(jsonNode0, objectNode2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectNode0, objectNode2);
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonNode0.isIntegralNumber());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isEmpty());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isMissingNode());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isArray());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode1.equals((Object)objectNode2));
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertTrue(jsonNode0.equals((Object)objectNode2));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertTrue(jsonNode0.equals((Object)objectNode1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertNotNull(jsonNode0);
      
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode1.equals((Object)objectNode2));
      assertTrue(objectNode1.equals((Object)jsonNode0));
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertTrue(objectNode2.equals((Object)jsonNode0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(objectNode0.equals((Object)jsonNode0));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertNotNull(filteringParserDelegate0);
      
      ObjectReader objectReader2 = objectReader0.withAttribute(uRL0, filteringParserDelegate0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, jsonNode0);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode1, jsonNode0);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode2, jsonNode0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isDouble());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isArray());
      assertEquals(1, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, filteringParserDelegate0.getFeatureMask());
      assertEquals(0, filteringParserDelegate0.getMatchCount());
      assertEquals(0, filteringParserDelegate0.currentTokenId());
      assertFalse(filteringParserDelegate0.isExpectedStartObjectToken());
      assertNull(filteringParserDelegate0.getLastClearedToken());
      assertFalse(filteringParserDelegate0.isExpectedStartArrayToken());
      assertFalse(filteringParserDelegate0.canReadObjectId());
      assertFalse(filteringParserDelegate0.requiresCustomCodec());
      assertFalse(filteringParserDelegate0.canParseAsync());
      assertFalse(filteringParserDelegate0.canReadTypeId());
      assertNull(filteringParserDelegate0.getCurrentToken());
      assertEquals(0, filteringParserDelegate0.getCurrentTokenId());
      assertFalse(filteringParserDelegate0.hasCurrentToken());
      assertNull(filteringParserDelegate0.currentToken());
      assertEquals(0, filteringParserDelegate0.getFormatFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(objectNode0.equals((Object)jsonNode0));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertTrue(objectNode1.equals((Object)objectNode2));
      assertTrue(objectNode1.equals((Object)jsonNode0));
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertTrue(objectNode2.equals((Object)jsonNode0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotNull(objectReader2);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader1.without(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertEquals(6, deserializationFeatureArray0.length);
      assertNotNull(objectReader3);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean0 = jsonFactory0.isEnabled(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(boolean0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(nonBlockingJsonParser0);
      
      JsonFactory jsonFactory3 = (JsonFactory)objectReader0._bind(nonBlockingJsonParser0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertEquals(1, javaTypeArray0.length);
      assertNotNull(collectionType0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(objectReader0, objectReader1);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(1, javaTypeArray0.length);
      assertNotNull(collectionType1);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType1, resolvedRecursiveType0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(collectionType1, collectionType0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertEquals(1, javaTypeArray0.length);
      assertNotNull(referenceType0);
      
      ObjectReader objectReader2 = objectMapper1.readerFor((JavaType) referenceType0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isContainerType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isEnumType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(1, javaTypeArray0.length);
      assertNotNull(objectReader2);
      
      // Undeclared exception!
      try { 
        objectReader2._detectBindAndClose(byteArray0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      assertEquals(64, jsonReadFeature0.getMask());
      assertEquals(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS, jsonReadFeature0.mappedFeature());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0.readValues((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper0.disable(deserializationFeature0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance(1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      ObjectMapper objectMapper3 = objectMapper1.setDateFormat(simpleDateFormat0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper3, objectMapper0);
      assertNotSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", simpleDateFormat0.toLocalizedPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", simpleDateFormat0.toPattern());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertNotNull(objectMapper3);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jALA'bP'kvh-U>H\":F");
      assertFalse(boolean0);
      
      TokenFilter tokenFilter1 = tokenFilter0.includeElement(582);
      assertSame(tokenFilter1, tokenFilter0);
      assertSame(tokenFilter0, tokenFilter1);
      assertTrue(tokenFilter1.includeRawValue());
      assertTrue(tokenFilter1.includeBinary());
      assertTrue(tokenFilter1.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter1);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0._inputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        objectReader0.readTree(byteArray0, 200, (int) (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 200
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(nonBlockingJsonParser0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      MappingIterator<ReferenceType> mappingIterator0 = objectReader0._bindAndReadValues((JsonParser) nonBlockingJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertNotNull(objectNode0);
      
      Double double0 = new Double(1953.57188131);
      assertEquals(1953.57188131, (double)double0, 0.01);
      assertNotNull(double0);
      
      ObjectNode objectNode1 = objectNode0.put("Y*'Y:l%%N\"+ktf?", double0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertNotNull(objectNode1);
      
      RawValue rawValue0 = new RawValue(jsonFactory0.DEFAULT_ROOT_VALUE_SEPARATOR);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(rawValue0);
      
      ObjectNode objectNode2 = objectNode0.putRawValue("JSON", rawValue0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isArray());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertNotNull(objectNode2);
      
      ObjectNode objectNode3 = objectNode2.putRawValue("JSON", rawValue0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isFloat());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isInt());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isIntegralNumber());
      assertEquals(2, objectNode3.size());
      assertFalse(objectNode3.isEmpty());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isArray());
      assertEquals("", objectNode3.asText());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isArray());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isInt());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isMissingNode());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertNotNull(objectNode3);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectNode0, objectNode3);
      assertNotSame(objectNode0, jsonNode0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertNotSame(objectNode1, jsonNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertNotSame(jsonNode0, objectNode3);
      assertNotSame(jsonNode0, objectNode2);
      assertNotSame(jsonNode0, objectNode1);
      assertNotSame(jsonNode0, objectNode0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertFalse(jsonParser0.isClosed());
      assertEquals(2, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.isEmpty());
      assertEquals(2, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(jsonNode0.equals((Object)objectNode1));
      assertTrue(jsonNode0.equals((Object)objectNode3));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertTrue(jsonNode0.equals((Object)objectNode2));
      assertNotNull(jsonNode0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NullNode nullNode0 = NullNode.instance;
      assertTrue(nullNode0.isEmpty());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isArray());
      assertNotNull(nullNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(nullNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(nullNode0.isEmpty());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isArray());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader0._bindAsTree(jsonParser0);
      assertSame(nullNode0, jsonNode0);
      assertSame(jsonNode0, nullNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(nullNode0.isEmpty());
      assertEquals("null", nullNode0.asText());
      assertFalse(nullNode0.isBigInteger());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isFloat());
      assertFalse(nullNode0.isObject());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.booleanValue());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonToken.VALUE_NULL, jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(11, jsonParser0.currentTokenId());
      assertEquals(11, jsonParser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_NULL, jsonParser0.currentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertTrue(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonNodeType.NULL, jsonNode0.getNodeType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isArray());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals("null", jsonNode0.asText());
      assertFalse(jsonNode0.isFloat());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.VALUE_NULL, jsonNode0.asToken());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isObject());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigDecimal());
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MockFile mockFile0 = new MockFile("can only instantiate non-static inner class by using default, no-argument constructor");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "can only instantiate non-static inner class by using default, no-argument constructor");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "can only instantiate non-static inner class by using default, no-argument constructor", uRLStreamHandler0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-59);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNotNull(objectNode0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ObjectNode objectNode1 = objectNode0.put("", double0);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode0, objectNode1);
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.deepCopy();
      assertNotSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertNotNull(objectNode2);
      
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode2);
      assertNotSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode1.equals((Object)objectNode2));
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertNotNull(jsonParser0);
      
      JsonNode jsonNode0 = objectReader1._bindAsTree(jsonParser0);
      assertNotSame(objectNode1, objectNode2);
      assertNotSame(objectNode1, jsonNode0);
      assertSame(objectNode1, objectNode0);
      assertNotSame(objectNode2, objectNode0);
      assertNotSame(objectNode2, jsonNode0);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(jsonNode0, objectNode1);
      assertNotSame(jsonNode0, objectNode0);
      assertNotSame(jsonNode0, objectNode2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode0, jsonNode0);
      assertSame(objectNode0, objectNode1);
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isArray());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isEmpty());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isMissingNode());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertEquals(1, objectNode2.size());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigInteger());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertTrue(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(2, jsonParser0.currentTokenId());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.getCurrentToken());
      assertEquals(JsonToken.END_OBJECT, jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(2, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isShort());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(1, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isEmpty());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertTrue(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(concurrentHashMap0.isEmpty());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertTrue(objectNode1.equals((Object)objectNode2));
      assertTrue(objectNode2.equals((Object)objectNode0));
      assertTrue(objectNode2.equals((Object)objectNode1));
      assertTrue(jsonNode0.equals((Object)objectNode2));
      assertTrue(jsonNode0.equals((Object)objectNode1));
      assertTrue(jsonNode0.equals((Object)objectNode0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertTrue(objectNode0.equals((Object)objectNode2));
      assertNotNull(jsonNode0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(128, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNotNull(nonBlockingJsonParser0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader1._considerFilter(nonBlockingJsonParser0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(nonBlockingJsonParser1);
      
      TypeReference<CollectionLikeType> typeReference0 = (TypeReference<CollectionLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.withType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotNull(objectMapper1);
      
      try { 
        objectReader0.readTree(byteArray0, (int) (byte)2, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(nonBlockingJsonParser0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      PipedReader pipedReader0 = new PipedReader((byte)82);
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNotNull(readerBasedJsonParser0);
      
      try { 
        objectReader0._bindAndCloseAsTree(readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNotNull(nonBlockingJsonParser0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/JSON");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)75;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-25), (byte)123, (byte) (-83), (byte)0, (byte)91, (byte)75}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean1 = jsonFactory0.isEnabled(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(nonBlockingJsonParser0);
      
      JsonFactory jsonFactory3 = (JsonFactory)objectReader0._bind(nonBlockingJsonParser0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory3);
      
      MockFile mockFile0 = new MockFile("", "JSON");
      assertNotNull(mockFile0);
      
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00E7\u7BAD': was expecting ('true', 'false' or 'null')
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      assertEquals(64, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS, jsonReadFeature0.mappedFeature());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS, jsonReadFeature0);
      
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((Writer) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<MapType> class0 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(simpleType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertNotNull(referenceType0);
      
      SimpleType simpleType1 = (SimpleType)referenceType0.getContentType();
      assertSame(simpleType0, simpleType1);
      assertSame(simpleType1, simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isContainerType());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isInterface());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.hasHandlers());
      assertTrue(simpleType1.isFinal());
      assertNotNull(simpleType1);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader1._prefetchRootDeserializer(simpleType0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader1, objectReader0);
      assertSame(simpleType0, simpleType1);
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(jsonDeserializer0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) null, (JavaType) simpleType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory2);
      
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectReader0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean0 = jsonFactory0.isEnabled(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(boolean0);
      
      File file0 = MockFile.createTempFile("JSON", "JSON");
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/JSON0JSON", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("JSON0JSON", file0.getName());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      InputStream inputStream0 = objectReader0._inputStream(file0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/JSON0JSON", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("JSON0JSON", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0, inputStream0.available());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(inputStream0);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = true;
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      MutableConfigOverride mutableConfigOverride0 = objectMapper0.configOverride(class0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(mutableConfigOverride0.getMergeable());
      assertNull(mutableConfigOverride0.getIsIgnoredType());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(mutableConfigOverride0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(objectReader0);
      
      FormatSchema formatSchema0 = null;
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      boolean boolean0 = true;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      MutableConfigOverride mutableConfigOverride0 = objectMapper0.configOverride(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(mutableConfigOverride0.getIsIgnoredType());
      assertNull(mutableConfigOverride0.getMergeable());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(mutableConfigOverride0);
      
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValues((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      JsonFactory jsonFactory3 = jsonFactory1.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertNotNull(jsonFactory3);
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)0;
      MappingIterator<DoubleNode> mappingIterator0 = objectReader0.readValues(byteArray1, (int) 0, (int)  (-1));
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte) (-1), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray1.length);
      assertNotNull(mappingIterator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue(byteArray0, (int) 5, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(jsonDeserializer0);
      
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader1.withType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      byte byte0 = (byte)5;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      StringReader stringReader0 = new StringReader("JSON");
      assertNotNull(stringReader0);
      
      try { 
        objectReader0.readTree((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (StringReader); line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)6;
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      POJONode pOJONode0 = new POJONode(object0);
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isBigDecimal());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isArray());
      assertNotNull(pOJONode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode0, false);
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isBigDecimal());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isArray());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertSame(iOContext0, iOContext1);
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isBigDecimal());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isArray());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertNotNull(charsToNameCanonicalizer1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = 'L';
      charArray0[2] = 'q';
      charArray0[3] = 'e';
      charArray0[4] = 'V';
      charArray0[5] = 'K';
      charArray0[6] = '\\';
      charArray0[7] = 'Y';
      charArray0[8] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, objectReader0, charsToNameCanonicalizer1, charArray0, 41, 2, false);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isBigDecimal());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isArray());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertArrayEquals(new char[] {'$', 'L', 'q', 'e', 'V', 'K', '\\', 'Y', 'w'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(9, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isLong());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isInt());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isBigDecimal());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isArray());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertArrayEquals(new char[] {'$', 'L', 'q', 'e', 'V', 'K', '\\', 'Y', 'w'}, charArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(9, charArray0.length);
      assertNull(formatSchema0);
      
      ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(objectWriter0);
      
      JsonNode jsonNode0 = objectReader0.readTree((Reader) null);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isObject());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertTrue(jsonNode0.isEmpty());
      assertFalse(jsonNode0.isArray());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isDouble());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isBigInteger());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(287, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotNull(jsonNode0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00D1\u0006': was expecting ('true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\u0006\"; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("0{+shZR}*J\"|J(;hg x", "0{+shZR}*J\"|J(;hg x");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertNotNull(objectNode1);
      
      ObjectNode objectNode2 = objectNode1.put("*xs3LR+}[)N(#5", (short)0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertNotNull(objectNode2);
      
      SerializedString serializedString0 = new SerializedString("'null', 'true', 'false' or NaN");
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertEquals(30, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      RawValue rawValue0 = new RawValue(serializedString0);
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertEquals(30, serializedString0.charLength());
      assertNotNull(rawValue0);
      
      ObjectNode objectNode3 = objectNode2.putRawValue("'null', 'true', 'false' or NaN", rawValue0);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isEmpty());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(3, objectNode3.size());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isShort());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isInt());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertEquals(3, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertEquals(30, serializedString0.charLength());
      assertNotNull(objectNode3);
      
      Boolean boolean0 = Boolean.valueOf("Ndm^@P3_l/Wz,=IV;7");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      ObjectNode objectNode4 = objectNode3.put("0{+shZR}*J\"|J(;hg x", boolean0);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode4);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode4, objectNode2);
      assertSame(objectNode4, objectNode1);
      assertSame(objectNode4, objectNode3);
      assertSame(objectNode4, objectNode0);
      assertSame(objectNode0, objectNode4);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode4);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode4);
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isEmpty());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isArray());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isLong());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isMissingNode());
      assertEquals(3, objectNode3.size());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.isShort());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode4.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertEquals(3, objectNode4.size());
      assertNull(objectNode4.textValue());
      assertFalse(objectNode4.isBigInteger());
      assertFalse(objectNode4.isBigDecimal());
      assertFalse(objectNode4.isInt());
      assertTrue(objectNode4.isObject());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.booleanValue());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isEmpty());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(objectNode4.isDouble());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.isArray());
      assertEquals("", objectNode4.asText());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertEquals(3, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isEmpty());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isIntegralNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isEmpty());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isFloat());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertEquals(30, serializedString0.charLength());
      assertNotNull(objectNode4);
      
      try { 
        objectReader0.readValue((JsonNode) objectNode4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertTrue(objectNode0.isEmpty());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNotNull(objectNode0);
      
      ObjectNode objectNode1 = objectNode0.put("0{+shZR}*J\"|J(;hg x", "0{+shZR}*J\"|J(;hg x");
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertNotNull(objectNode1);
      
      short short0 = (short)0;
      ObjectNode objectNode2 = objectNode1.put("*xs3LR+}[)N(#5", (short)0);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertNotNull(objectNode2);
      
      SerializedString serializedString0 = new SerializedString("'null', 'true', 'false' or NaN");
      assertEquals(30, serializedString0.charLength());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      RawValue rawValue0 = new RawValue(serializedString0);
      assertEquals(30, serializedString0.charLength());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertNotNull(rawValue0);
      
      ObjectNode objectNode3 = objectNode2.putRawValue("'null', 'true', 'false' or NaN", rawValue0);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isArray());
      assertTrue(objectNode3.isObject());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigInteger());
      assertEquals(3, objectNode3.size());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertEquals(3, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(3, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals(30, serializedString0.charLength());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertNotNull(objectNode3);
      
      Boolean boolean0 = Boolean.valueOf("Ndm^@P3_l/Wz,=IV;7");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      ObjectNode objectNode4 = objectNode3.put("0{+shZR}*J\"|J(;hg x", boolean0);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode4);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode4, objectNode0);
      assertSame(objectNode4, objectNode2);
      assertSame(objectNode4, objectNode1);
      assertSame(objectNode4, objectNode3);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode4);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode1, objectNode4);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode4);
      assertFalse(objectNode3.isFloat());
      assertNull(objectNode3.textValue());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isArray());
      assertTrue(objectNode3.isObject());
      assertNull(objectNode3.numberType());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isEmpty());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isInt());
      assertFalse(objectNode3.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertFalse(objectNode3.isBigInteger());
      assertEquals(3, objectNode3.size());
      assertFalse(objectNode3.isMissingNode());
      assertNull(objectNode4.numberType());
      assertFalse(objectNode4.isEmpty());
      assertTrue(objectNode4.isObject());
      assertFalse(objectNode4.isArray());
      assertFalse(objectNode4.isInt());
      assertFalse(objectNode4.isIntegralNumber());
      assertFalse(objectNode4.isShort());
      assertFalse(objectNode4.isLong());
      assertFalse(objectNode4.isBigDecimal());
      assertFalse(objectNode4.booleanValue());
      assertEquals("", objectNode4.asText());
      assertNull(objectNode4.textValue());
      assertFalse(objectNode4.isBigInteger());
      assertEquals(3, objectNode4.size());
      assertEquals(JsonToken.START_OBJECT, objectNode4.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode4.getNodeType());
      assertFalse(objectNode4.isFloat());
      assertFalse(objectNode4.isFloatingPointNumber());
      assertFalse(objectNode4.isMissingNode());
      assertFalse(objectNode4.isDouble());
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      assertEquals(3, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isEmpty());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isArray());
      assertTrue(objectNode1.isObject());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isShort());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isEmpty());
      assertEquals(3, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isMissingNode());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isLong());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isDouble());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isEmpty());
      assertTrue(objectNode2.isObject());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isArray());
      assertEquals("", objectNode2.asText());
      assertEquals(30, serializedString0.charLength());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.toString());
      assertEquals("'null', 'true', 'false' or NaN", serializedString0.getValue());
      assertNotNull(objectNode4);
      
      try { 
        objectReader0.readValue((JsonNode) objectNode4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNotNull(nonBlockingJsonParser0);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)82;
      try { 
        objectReader0._bindAndCloseAsTree(nonBlockingJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(97);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(placeholderForType0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(placeholderForType0, placeholderForType0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes1);
      
      POJONode pOJONode0 = new POJONode(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertEquals(0, pOJONode0.size());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertNotNull(pOJONode0);
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.2250738585072014E-308);
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isInt());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0, doubleNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.2250738585072014E-308, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isIntegralNumber());
      assertNotNull(doubleNode0);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withPerCallAttribute(pOJONode0, doubleNode0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertEquals(0, pOJONode0.size());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isInt());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0, doubleNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.2250738585072014E-308, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isIntegralNumber());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertNotNull(contextAttributes2);
      
      ConcurrentHashMap<BooleanNode, NullNode> concurrentHashMap0 = new ConcurrentHashMap<BooleanNode, NullNode>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttributes(concurrentHashMap0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertNotSame(contextAttributes1, contextAttributes0);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertNotSame(contextAttributes1, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes3);
      assertNotSame(contextAttributes2, contextAttributes0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes2);
      assertNotSame(contextAttributes3, contextAttributes1);
      assertNotSame(contextAttributes3, contextAttributes0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(pOJONode0.isFloat());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isObject());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isShort());
      assertEquals(0, pOJONode0.size());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertTrue(pOJONode0.isEmpty());
      assertFalse(pOJONode0.isArray());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertFalse(doubleNode0.isArray());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isMissingNode());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertTrue(doubleNode0.isDouble());
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isInt());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0, doubleNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isLong());
      assertTrue(doubleNode0.isEmpty());
      assertEquals(2.2250738585072014E-308, doubleNode0.doubleValue(), 0.01);
      assertFalse(doubleNode0.isIntegralNumber());
      assertTrue(concurrentHashMap0.isEmpty());
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes1.equals((Object)contextAttributes0));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes2));
      assertFalse(contextAttributes3.equals((Object)contextAttributes1));
      assertFalse(contextAttributes3.equals((Object)contextAttributes0));
      assertNotNull(contextAttributes3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2712, 97);
      assertEquals((-2711), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ShortNode shortNode0 = ShortNode.valueOf((short) (-485));
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isLong());
      assertEquals((short) (-485), shortNode0.shortValue());
      assertFalse(shortNode0.isNaN());
      assertNull(shortNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals((-485L), shortNode0.longValue());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals((-485.0), shortNode0.doubleValue(), 0.01);
      assertEquals((-485), shortNode0.intValue());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals((-485.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isArray());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertNotNull(shortNode0);
      
      ContextAttributes contextAttributes4 = contextAttributes0.withoutSharedAttribute(shortNode0);
      assertNotSame(contextAttributes4, contextAttributes1);
      assertNotSame(contextAttributes4, contextAttributes3);
      assertNotSame(contextAttributes4, contextAttributes2);
      assertSame(contextAttributes4, contextAttributes0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertSame(contextAttributes0, contextAttributes4);
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isLong());
      assertEquals((short) (-485), shortNode0.shortValue());
      assertFalse(shortNode0.isNaN());
      assertNull(shortNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals((-485L), shortNode0.longValue());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals((-485.0), shortNode0.doubleValue(), 0.01);
      assertEquals((-485), shortNode0.intValue());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals((-485.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isArray());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(contextAttributes4.equals((Object)contextAttributes1));
      assertFalse(contextAttributes4.equals((Object)contextAttributes3));
      assertFalse(contextAttributes4.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertNotNull(contextAttributes4);
      
      ObjectReader objectReader1 = objectReader0.with(contextAttributes4);
      assertNotSame(contextAttributes4, contextAttributes1);
      assertNotSame(contextAttributes4, contextAttributes3);
      assertNotSame(contextAttributes4, contextAttributes2);
      assertSame(contextAttributes4, contextAttributes0);
      assertSame(objectReader1, objectReader0);
      assertNotSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(contextAttributes0, contextAttributes3);
      assertSame(contextAttributes0, contextAttributes4);
      assertSame(objectReader0, objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isLong());
      assertEquals((short) (-485), shortNode0.shortValue());
      assertFalse(shortNode0.isNaN());
      assertNull(shortNode0.textValue());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals((-485L), shortNode0.longValue());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isObject());
      assertFalse(shortNode0.isFloat());
      assertTrue(shortNode0.canConvertToLong());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals((-485.0), shortNode0.doubleValue(), 0.01);
      assertEquals((-485), shortNode0.intValue());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isBigInteger());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals((-485.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isArray());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertFalse(contextAttributes4.equals((Object)contextAttributes1));
      assertFalse(contextAttributes4.equals((Object)contextAttributes3));
      assertFalse(contextAttributes4.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes1));
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(contextAttributes0.equals((Object)contextAttributes3));
      assertNotNull(objectReader1);
      
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree(byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      JsonParser jsonParser0 = null;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      // Undeclared exception!
      try { 
        objectReader0._initForReading(deserializationContext0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectReader1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      assertEquals(1, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_COMMENTS, jsonReadFeature0.mappedFeature());
      assertEquals(JsonReadFeature.ALLOW_JAVA_COMMENTS, jsonReadFeature0);
      
      ObjectReader objectReader2 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertNotNull(nonBlockingJsonParser0);
      
      NonBlockingJsonParser nonBlockingJsonParser1 = (NonBlockingJsonParser)objectReader2._considerFilter(nonBlockingJsonParser0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(nonBlockingJsonParser1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader2.createDeserializationContext(nonBlockingJsonParser1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertSame(nonBlockingJsonParser0, nonBlockingJsonParser1);
      assertSame(nonBlockingJsonParser1, nonBlockingJsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser1.getTokenColumnNr());
      assertEquals(0, nonBlockingJsonParser1.getTextLength());
      assertNull(nonBlockingJsonParser1.currentToken());
      assertEquals(8193, nonBlockingJsonParser1.getFeatureMask());
      assertTrue(nonBlockingJsonParser1.canParseAsync());
      assertFalse(nonBlockingJsonParser1.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser1.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser1.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser1.getTextOffset());
      assertTrue(nonBlockingJsonParser1.needMoreInput());
      assertFalse(nonBlockingJsonParser1.isNaN());
      assertFalse(nonBlockingJsonParser1.hasTextCharacters());
      assertFalse(nonBlockingJsonParser1.canReadObjectId());
      assertEquals(0L, nonBlockingJsonParser1.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser1.hasCurrentToken());
      assertEquals(1, nonBlockingJsonParser1.getTokenLineNr());
      assertFalse(nonBlockingJsonParser1.isExpectedStartObjectToken());
      assertNull(nonBlockingJsonParser1.getCurrentName());
      assertFalse(nonBlockingJsonParser1.isClosed());
      assertNull(nonBlockingJsonParser1.getLastClearedToken());
      assertFalse(nonBlockingJsonParser1.isExpectedStartArrayToken());
      assertNull(nonBlockingJsonParser1.getCurrentToken());
      assertFalse(nonBlockingJsonParser1.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser1.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(6, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      byte byte0 = (byte) (-58);
      byte byte1 = (byte) (-46);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 265, (byte) (-58));
      assertEquals((-264), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      assertEquals(AccessPattern.CONSTANT, nioPathDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, nioPathDeserializer0.getNullAccessPattern());
      assertFalse(nioPathDeserializer0.isCachable());
      assertNotNull(nioPathDeserializer0);
      
      MockFile mockFile0 = new MockFile("RCOC[u}8=E-$.yQuV\"");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("RCOC[u}8=E-$.yQuV\"", "RCOC[u}8=E-$.yQuV\"", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("RCOC[u}8=E-$.yQuV\"", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("RCOC[u}8=E-$.yQuV\"", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/experiment/RCOC[u}8=E-$.yQuV\"/RCOC[u}8=E-$.yQuV\"0RCOC[u}8=E-$.yQuV\"", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/RCOC[u}8=E-$.yQuV\"", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("RCOC[u}8=E-$.yQuV\"0RCOC[u}8=E-$.yQuV\"", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      
      MockFile mockFile1 = new MockFile(file0, "~\"xDemU");
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertNotNull(mockFile1);
      
      try { 
        objectReader0.readValue(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFile); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      ObjectReader objectReader1 = objectMapper1.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertNotNull(tokenFilter0);
      
      try { 
        objectReader2.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (byte[])\"[[\u0000\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(95, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(95, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(95, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory3);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(8193, jsonFactory3.getParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)116, (byte)1}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        objectReader0.readValue((InputStream) byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't\u0001': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (ByteArrayInputStream); line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ArrayNode> class0 = ArrayNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(27, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      boolean boolean0 = jsonFactory0.isEnabled(jsonFactory_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(boolean0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertSame(jsonFactory0, jsonFactory1);
      assertEquals(27, jsonFactory0.getGeneratorFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertNotNull(nonBlockingJsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader0._bind(nonBlockingJsonParser0, nonBlockingJsonParser0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.json.async.NonBlockingJsonParser cannot be cast to com.fasterxml.jackson.databind.node.ArrayNode
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ArrayDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(287, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(287, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotNull(charsToNameCanonicalizer0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)74, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(74, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(readerBasedJsonParser0);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.overrideStdFeatures(2, 1517);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(readerBasedJsonParser1);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertEquals(2, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(jsonParserSequence0);
      
      MissingNode missingNode0 = (MissingNode)objectReader0._bindAndCloseAsTree(readerBasedJsonParser1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertTrue(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(2, readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertTrue(missingNode0.isEmpty());
      assertFalse(missingNode0.isBigInteger());
      assertFalse(missingNode0.isFloat());
      assertNull(missingNode0.textValue());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.isObject());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isInt());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isBigDecimal());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals(0, missingNode0.size());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isShort());
      assertFalse(missingNode0.isLong());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isIntegralNumber());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(missingNode0);
      
      ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
      assertNotSame(objectReader1, objectReader0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(objectReader0, objectReader1);
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes_Impl0);
      
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, contextAttributes_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertSame(objectReader2, objectReader1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(128, jsonReadFeature0.getMask());
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotNull(deserializerFactoryConfig1);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNotNull(deserializerFactoryConfig2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNotNull(deserializerFactory0);
      
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNotNull(deserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertTrue(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNull(jsonParser0);
      
      // Undeclared exception!
      try { 
        objectReader1.readValue((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectMapper0);
      
      int[] intArray0 = CharacterEscapes.standardAsciiEscapesForJSON();
      assertEquals(128, intArray0.length);
      assertNotNull(intArray0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertNotNull(jsonFactory2);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(objectReader1);
      
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      assertFalse(jsonReadFeature0.enabledByDefault());
      assertEquals(0, jsonReadFeature0.collectDefaults());
      assertEquals(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0.mappedFeature());
      assertEquals(128, jsonReadFeature0.getMask());
      assertEquals(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, jsonReadFeature0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IntNode intNode0 = new IntNode((-1));
      assertNull(intNode0.textValue());
      assertEquals((-1.0F), intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertEquals((-1L), intNode0.longValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-1), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1), intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertNotNull(intNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, intNode0, false);
      assertNull(intNode0.textValue());
      assertEquals((-1.0F), intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertEquals((-1L), intNode0.longValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-1), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1), intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNull(intNode0.textValue());
      assertEquals((-1.0F), intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertEquals((-1L), intNode0.longValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-1), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1), intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("+BCU4J{^]'^JDH-");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper0, mockPrintStream0, byteArray0, 8000, false);
      assertNull(intNode0.textValue());
      assertEquals((-1.0F), intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertEquals((-1L), intNode0.longValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-1), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1), intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(8000, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNull(intNode0.textValue());
      assertEquals((-1.0F), intNode0.floatValue(), 0.01F);
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isObject());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isNaN());
      assertFalse(intNode0.isFloatingPointNumber());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isEmpty());
      assertFalse(intNode0.isFloat());
      assertEquals((-1L), intNode0.longValue());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-1), intNode0.intValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1), intNode0.shortValue());
      assertFalse(intNode0.isArray());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(8000, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(8000, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      
      IntNode intNode1 = new IntNode(0);
      assertTrue(intNode1.isEmpty());
      assertEquals(0.0F, intNode1.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode1.asToken());
      assertTrue(intNode1.canConvertToLong());
      assertEquals(JsonNodeType.NUMBER, intNode1.getNodeType());
      assertFalse(intNode1.isObject());
      assertTrue(intNode1.isIntegralNumber());
      assertEquals(0.0, intNode1.doubleValue(), 0.01);
      assertFalse(intNode1.isLong());
      assertEquals(JsonParser.NumberType.INT, intNode1.numberType());
      assertNull(intNode1.textValue());
      assertFalse(intNode1.isShort());
      assertTrue(intNode1.isInt());
      assertEquals(0L, intNode1.longValue());
      assertTrue(intNode1.canConvertToInt());
      assertFalse(intNode1.isBigDecimal());
      assertFalse(intNode1.isArray());
      assertFalse(intNode1.booleanValue());
      assertFalse(intNode1.isFloat());
      assertEquals((short)0, intNode1.shortValue());
      assertFalse(intNode1.isFloatingPointNumber());
      assertFalse(intNode1.isMissingNode());
      assertFalse(intNode1.isDouble());
      assertEquals(0, intNode1.size());
      assertFalse(intNode1.isNaN());
      assertEquals(0, intNode1.intValue());
      assertFalse(intNode1.isBigInteger());
      assertFalse(intNode1.equals((Object)intNode0));
      assertNotNull(intNode1);
      
      // Undeclared exception!
      try { 
        objectReader1.writeValue(uTF8JsonGenerator1, intNode1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      MappingIterator<Object> mappingIterator0 = objectReader0.readValues("");
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(mappingIterator0);
      
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertNotNull(decimalNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(decimalNode0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNotNull(jsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertFalse(decimalNode0.isArray());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.booleanValue());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isIntegralNumber());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertTrue(decimalNode0.isEmpty());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(0, jsonParserSequence0.getFeatureMask());
      assertNotNull(jsonParserSequence0);
      
      try { 
        objectReader0.readValues((JsonParser) jsonParserSequence0, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertNotNull(defaultSerializerProvider_Impl2);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      MissingNode missingNode0 = (MissingNode)objectReader0.readTree("");
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(missingNode0.isFloatingPointNumber());
      assertFalse(missingNode0.isDouble());
      assertEquals("", missingNode0.asText());
      assertFalse(missingNode0.isInt());
      assertFalse(missingNode0.isArray());
      assertFalse(missingNode0.isObject());
      assertNull(missingNode0.numberType());
      assertFalse(missingNode0.booleanValue());
      assertFalse(missingNode0.isIntegralNumber());
      assertFalse(missingNode0.isFloat());
      assertEquals(0, missingNode0.size());
      assertFalse(missingNode0.isLong());
      assertEquals(JsonNodeType.MISSING, missingNode0.getNodeType());
      assertFalse(missingNode0.isBigDecimal());
      assertTrue(missingNode0.isEmpty());
      assertEquals(JsonToken.NOT_AVAILABLE, missingNode0.asToken());
      assertFalse(missingNode0.isShort());
      assertTrue(missingNode0.isMissingNode());
      assertFalse(missingNode0.isBigInteger());
      assertNull(missingNode0.textValue());
      assertNotNull(missingNode0);
      
      TreeSet<ValueInstantiators> treeSet0 = new TreeSet<ValueInstantiators>();
      assertNotNull(treeSet0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertNotNull(jsonFactoryBuilder0);
      
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8192, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8704, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8704, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8704, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8704, jsonFactory3.getParserFeatures());
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertNotNull(jsonFactory3);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonGenerator_Feature1, false);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8704, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8704, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8704, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8704, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(8704, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory4);
      
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonParser_Feature1);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8192, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertEquals(31, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(31, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8192, jsonFactory3.getParserFeatures());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(0, jsonFactory4.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertEquals(0, jsonFactory4.getFormatGeneratorFeatures());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(8192, jsonFactory4.getParserFeatures());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals(31, jsonFactory4.getGeneratorFeatures());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals(0, jsonFactory5.getFormatParserFeatures());
      assertEquals(31, jsonFactory5.getGeneratorFeatures());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals(0, jsonFactory5.getFormatGeneratorFeatures());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals(8192, jsonFactory5.getParserFeatures());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertNotNull(jsonFactory5);
      
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory6 = jsonFactory3.enable(jsonGenerator_Feature2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature2);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory6);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory5);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonGenerator_Feature2, jsonGenerator_Feature0);
      assertNotSame(jsonGenerator_Feature2, jsonGenerator_Feature1);
      assertSame(jsonFactory6, jsonFactory3);
      assertSame(jsonFactory6, jsonFactory2);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory5);
      assertSame(jsonFactory6, jsonFactory0);
      assertEquals(31, jsonFactoryBuilder0.streamWriteFeatures());
      assertEquals(8193, jsonFactoryBuilder0.streamReadFeatures());
      assertEquals(15, jsonFactoryBuilder0.factoryFeaturesMask());
      assertEquals(0, jsonFactoryBuilder0.highestNonEscapedChar());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(543, jsonFactory0.getGeneratorFeatures());
      assertEquals(8192, jsonFactory0.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(543, jsonFactory1.getGeneratorFeatures());
      assertEquals(8192, jsonFactory1.getParserFeatures());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(543, jsonFactory2.getGeneratorFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(8192, jsonFactory2.getParserFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, jsonFactory3.getFormatGeneratorFeatures());
      assertEquals(543, jsonFactory3.getGeneratorFeatures());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(8192, jsonFactory3.getParserFeatures());
      assertEquals(543, jsonFactory6.getGeneratorFeatures());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertEquals(8192, jsonFactory6.getParserFeatures());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertTrue(jsonFactory6.canParseAsync());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertEquals(0, jsonFactory6.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory6.getFormatParserFeatures());
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature2));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonGenerator_Feature2.equals((Object)jsonGenerator_Feature0));
      assertFalse(jsonGenerator_Feature2.equals((Object)jsonGenerator_Feature1));
      assertNotNull(jsonFactory6);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<BinaryNode> class0 = BinaryNode.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotNull(objectReader1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[0];
      MappingIterator<ArrayNode> mappingIterator0 = objectReader1.readValues(byteArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader1, objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, byteArray0.length);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(159, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, jsonFactory1.getFormatGeneratorFeatures());
      assertEquals(159, jsonFactory1.getGeneratorFeatures());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(8193, jsonFactory1.getParserFeatures());
      assertEquals(0, jsonFactory1.getFormatParserFeatures());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, jsonFactory2.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory2.getFormatParserFeatures());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(8193, jsonFactory2.getParserFeatures());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(31, jsonFactory2.getGeneratorFeatures());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)55;
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(injectableValues_Std0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(654);
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertNotNull(arrayNode0);
      
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("JSON", (Object) arrayNode0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(concurrentHashMap0.isEmpty());
      assertNotNull(injectableValues_Std1);
      
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectReader0, objectReader1);
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isEmpty());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectReader1);
      
      byteArray0[3] = (byte) (-96);
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001\uFFFD7\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertNotNull(jsonFactory0);
      
      File file0 = MockFile.createTempFile("=MDE1]", "");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/=MDE1]0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("=MDE1]0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator(file0, jsonEncoding0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/=MDE1]0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("=MDE1]0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, false, false);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, jsonFactory0.getFormatParserFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, jsonFactory0.getFormatGeneratorFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, jsonFactory0.getGeneratorFeatures());
      assertEquals(8193, jsonFactory0.getParserFeatures());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/=MDE1]0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("=MDE1]0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(filteringGeneratorDelegate0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isMissingNode());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals(1, shortNode0.intValue());
      assertFalse(shortNode0.isLong());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.isNaN());
      assertFalse(shortNode0.isArray());
      assertEquals(1.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isBigInteger());
      assertTrue(shortNode0.canConvertToInt());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertEquals(1.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertTrue(shortNode0.isEmpty());
      assertFalse(shortNode0.isFloat());
      assertNull(shortNode0.textValue());
      assertEquals(1L, shortNode0.longValue());
      assertEquals((short)1, shortNode0.shortValue());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.isObject());
      assertNotNull(shortNode0);
      
      // Undeclared exception!
      try { 
        objectReader0.writeTree(filteringGeneratorDelegate0, shortNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.isEnabled(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      objectReader0._bind(jsonParser0, jsonFactory1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-1);
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0001h\uFFFD\uFFFD\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.getTypeFactory();
      ObjectReader objectReader1 = objectMapper0.reader();
      ObjectReader objectReader2 = objectReader1.with((FormatSchema) null);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(decimalNode0);
      JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      ResolvedType resolvedType0 = null;
      // Undeclared exception!
      try { 
        objectReader2.with(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte byte0 = (byte)74;
      byte[] byteArray0 = new byte[1];
      try { 
        objectReader0.readValue(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      objectMapper0.reader(deserializationFeature0);
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.with((FormatSchema) null);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(decimalNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      try { 
        objectReader0.readValues((JsonParser) jsonParserSequence0, (ResolvedType) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.with((FormatSchema) null);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectMapper0.reader();
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      JsonParser jsonParser1 = objectReader1._considerFilter(jsonParser0, true);
      assertFalse(jsonParser1.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("JSON", (Object) defaultSerializerProvider_Impl0);
      Class<DoubleNode> class0 = DoubleNode.class;
      TextNode textNode0 = new TextNode("JSON");
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue((Class<?>) class0, (Object) textNode0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int) 86, (int) 86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ObjectReader objectReader1 = objectMapper0.reader();
      objectReader1.with((FormatSchema) null);
      byte byte0 = (byte)91;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      try { 
        objectReader0.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: expected close marker for Array (start marker at [Source: (byte[])\"[[[\"; line: 1, column: 3])
         //  at [Source: (byte[])\"[[[\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-15), 0);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      Class<BooleanNode> class1 = BooleanNode.class;
      try { 
        objectReader0.readValue(jsonParser0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bigIntegerNode0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(2008, 1517);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      objectReader0._bindAndCloseAsTree(jsonParserSequence0);
      ObjectReader objectReader1 = objectReader0.withType((JavaType) null);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      PipedReader pipedReader0 = new PipedReader();
      try { 
        objectReader0.readTree((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.isEnabled(jsonFactory_Feature0);
      jsonFactory0.createNonBlockingByteArrayParser();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)96;
      byte byte0 = (byte) (-3);
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)123;
      try { 
        objectReader0.readTree(byteArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): was expecting double-quote to start field name
         //  at [Source: (byte[])\"{\t`\uFFFD[{\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      Class<String> class1 = String.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader2 = new ObjectReader(objectReader1, tokenFilter0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      objectMapper0.readerFor(class0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.isEnabled(jsonFactory_Feature0);
      objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-15);
      byteArray0[8] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte) (-15));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(97);
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(placeholderForType0, placeholderForType0);
      POJONode pOJONode0 = new POJONode(objectMapper0);
      DoubleNode doubleNode0 = DoubleNode.valueOf(2.2250738585072014E-308);
      ContextAttributes contextAttributes2 = contextAttributes1.withPerCallAttribute(pOJONode0, doubleNode0);
      ConcurrentHashMap<BooleanNode, NullNode> concurrentHashMap0 = new ConcurrentHashMap<BooleanNode, NullNode>();
      ContextAttributes contextAttributes3 = contextAttributes2.withSharedAttributes(concurrentHashMap0);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes3);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      String string0 = "";
      // Undeclared exception!
      try { 
        objectReader0.readTree((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      objectReader0.readValues("");
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNode jsonNode0 = objectReader0.createArrayNode();
      assertFalse(jsonNode0.isObject());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
      ContextAttributes contextAttributes0 = objectReader0.getAttributes();
      assertNotNull(contextAttributes0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ObjectReader objectReader1 = objectMapper0.reader();
      objectReader1.with((FormatSchema) null);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      byte byte0 = (byte)86;
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int) 86, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_LONG_FOR_INTS;
      objectReader0.with(deserializationFeature1, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)12;
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      // Undeclared exception!
      try { 
        objectMapper0.readValue(byteArray0, 3, (int) 109, class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[0];
      objectReader0.readTree(byteArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      objectReader0.with(deserializationFeature0);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ITALIAN;
      objectReader0.with(locale1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      coreXMLDeserializers_Std0.getValueType();
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.findTypeMapping((DeserializationConfig) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 265, (byte) (-58));
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      POJONode pOJONode0 = new POJONode(deserializationFeature1);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(pOJONode0);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ITALIAN;
      ObjectReader objectReader2 = objectReader0.with(locale1);
      objectReader2.getTypeFactory();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader1);
      objectReader0._new(objectReader1, jsonFactory1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory1.isEnabled(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        objectReader0._bind(jsonParser0, jsonGenerator_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StringDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      objectMapper0.reader();
      jsonFactory2.createGenerator((Writer) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Class<MapType> class0 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withStaticTyping();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature1);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.ITALIAN;
      ObjectReader objectReader2 = objectReader0.with(locale0);
      objectReader1.getTypeFactory();
      assertNotSame(objectReader0, objectReader2);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-15);
      Locale locale0 = Locale.ITALIAN;
      ObjectReader objectReader1 = objectReader0.with(locale0);
      objectReader1.getTypeFactory();
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 265, (byte) (-58));
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      MockFile mockFile0 = new MockFile("RCOC[u}8=E-$.yQuV\"");
      File file0 = MockFile.createTempFile("RCOC[u}8=E-$.yQuV\"", "RCOC[u}8=E-$.yQuV\"", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "~\"xDemU");
      try { 
        objectReader0.readValue((File) mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      objectMapper1.setAnnotationIntrospector(jacksonAnnotationIntrospector0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature1, deserializationFeatureArray0);
      // Undeclared exception!
      try { 
        objectReader0.readValues((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      try { 
        objectReader0.readValues(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 5)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0005\u0001\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.enable(jsonGenerator_Feature0);
      objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonReadFeature1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      objectReader0.isEnabled(mapperFeature0);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("U_Mg", "U_Mg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)106;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, mockPrintStream0, byteArray0, (byte)0, true);
      uTF8JsonGenerator0.getSchema();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator(" /.R EHT2c");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)93;
      byteArray1[4] = (byte)93;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)0;
      JsonParser jsonParser0 = jsonFactory4.createParser(byteArray1, 1, (int) (byte)0);
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf((BigInteger) null);
      try { 
        objectReader0._bind(jsonParser0, bigIntegerNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u0000\u0000(]]\u0001\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 265, (byte) (-58));
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      POJONode pOJONode0 = new POJONode(deserializationFeature1);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(pOJONode0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        objectReader1._findRootDeserializer(defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature1;
      Class<ShortNode> class0 = ShortNode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.at((JsonPointer) null);
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory0);
      objectMapper3.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      objectReader1.with(jsonParser_Feature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      // Undeclared exception!
      try { 
        objectReader0.readValue((byte[]) null, (int) 86, 3148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DoubleNode> class0 = DoubleNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      objectReader0.at((JsonPointer) null);
      objectReader0.readValues("");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectReader0.withHandler(deserializationProblemHandler0);
      try { 
        objectReader0.readValues("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.withHandler((DeserializationProblemHandler) null);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        objectReader0.readValue(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature1, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 265, (byte) (-58));
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      POJONode pOJONode0 = new POJONode(deserializationFeature1);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(pOJONode0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[2] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[4] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature6;
      // Undeclared exception!
      try { 
        objectReader1.withoutFeatures(jsonParser_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer();
      ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(false);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, booleanNode0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, pipedReader0, objectReader1, charsToNameCanonicalizer0, charArray0, 33, (byte) (-92), false);
      Class<MapperFeature> class1 = MapperFeature.class;
      objectReader1.readValues((JsonParser) readerBasedJsonParser0, class1);
      try { 
        objectReader1.readValues("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = null;
      try {
        objectReader1 = new ObjectReader(objectReader0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      objectMapper0.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        objectReader1.at("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"JSON\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "_dd{ C");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      // Undeclared exception!
      try { 
        objectReader0.at("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"JSON\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext.createRootContext(tokenFilter0);
      // Undeclared exception!
      try { 
        objectReader0.readValue(byteArray0, (int)  (-92), (int) 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -92
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      objectMapper0.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory2.createGenerator((Writer) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      DoubleNode doubleNode0 = new DoubleNode((byte)92);
      CharacterEscapes.standardAsciiEscapesForJSON();
      objectMapper0.readerForUpdating(doubleNode0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", ";q~,@,@5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \";q~,@,@5\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ReferenceType> class0 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer();
      ObjectReader objectReader1 = objectReader0.at(jsonPointer0);
      try { 
        objectReader1.readValues("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      objectReader0.withFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      objectReader1.with(formatFeatureArray0[0]);
      ObjectReader objectReader2 = objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      objectReader2.with((FormatFeature) jsonReadFeature0);
      // Undeclared exception!
      try { 
        objectReader0.readTree((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.readTree("");
      Iterable<ValueInstantiators> iterable0 = new TreeSet<ValueInstantiators>();
      boolean boolean0 = false;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl1, true);
      MockFile mockFile0 = new MockFile((String) null, ")l#Js2F>~");
      try { 
        objectReader0.readValues((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      HashMap<CollectionType, AbstractDeserializer> hashMap0 = new HashMap<CollectionType, AbstractDeserializer>();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      DeserializationConfig deserializationConfig2 = new DeserializationConfig(deserializationConfig1, contextAttributes1);
      ObjectReader objectReader0 = new ObjectReader(objectMapper1, deserializationConfig2);
      try { 
        objectReader0._findRootDeserializer(defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      byte[] byteArray0 = new byte[3];
      objectMapper1.writer();
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      tokenFilterContext0.pathAsPointer();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(",tCAKDp[6HeZzf3(]");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      // Undeclared exception!
      try { 
        objectReader0._new((ObjectReader) null, jsonFactory2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer();
      objectReader0.at(jsonPointer0);
      objectReader0.readValues("");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((byte)1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) objectReader0, (Object) placeholderForType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, valueInstantiator_Base0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._findRootDeserializer(defaultDeserializationContext_Impl0);
      assertTrue(jsonDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      objectMapper0.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      objectReader0.with(jsonParser_Feature0);
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.with((FormatFeature) jsonReadFeature1);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        objectReader1.readValue(byteArray0, (int) 86, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<POJONode> class0 = POJONode.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonPointer jsonPointer0 = tokenFilterContext0.pathAsPointer();
      objectReader0.at(jsonPointer0);
      try { 
        objectReader0.readValues("Trying to release buffer smaller than original");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Trying': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"Trying to release buffer smaller than original\"; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      objectReader0.isEnabled(mapperFeature0);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectReader objectReader2 = objectReader1.with(jsonParser_Feature0);
      objectReader1.with(formatFeatureArray0[0]);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      try { 
        objectReader2.readValue(byteArray0, (int) 0, (-2102));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\u0001\uFFFD\u0000\uFFFD\uFFFD\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.readTree("");
      deserializerFactoryConfig0.valueInstantiators();
      TextNode textNode0 = new TextNode("JSON");
      assertFalse(textNode0.isIntegralNumber());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      jsonFactory0.setCodec(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS;
      objectReader0.with((FormatFeature) jsonReadFeature0);
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      dataFormatReaders0.withMaxInputLookahead(0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      objectReader1.withFormatDetection(dataFormatReaders0);
      try { 
        MockURL.URL("JSON", "JSON", 64, "JSON", (URLStreamHandler) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: json
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      objectReader0.withFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      objectReader1.with(formatFeatureArray0[0]);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      jsonFactory1.createGenerator((Writer) null);
      byteArray0[1] = (byte)92;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Class<SimpleType> class0 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      // Undeclared exception!
      try { 
        objectReader1._verifyNoTrailingTokens((JsonParser) null, defaultDeserializationContext_Impl0, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      objectMapper0.reader(deserializationFeature0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      ObjectReader objectReader0 = objectMapper1.reader();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Class<BooleanNode> class0 = BooleanNode.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-15);
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(jsonFactory1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        objectReader0._new(objectReader1, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      StreamReadFeature streamReadFeature0 = StreamReadFeature.AUTO_CLOSE_SOURCE;
      StreamReadFeature[] streamReadFeatureArray0 = new StreamReadFeature[6];
      streamReadFeatureArray0[0] = streamReadFeature0;
      streamReadFeatureArray0[1] = streamReadFeature0;
      streamReadFeatureArray0[2] = streamReadFeature0;
      streamReadFeatureArray0[3] = streamReadFeature0;
      streamReadFeatureArray0[4] = streamReadFeature0;
      streamReadFeatureArray0[5] = streamReadFeature0;
      jsonFactoryBuilder0.enable(streamReadFeature0, streamReadFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      // Undeclared exception!
      try { 
        objectReader1._new(objectReader0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[6];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      JsonReadFeature jsonReadFeature1 = JsonReadFeature.ALLOW_JAVA_COMMENTS;
      formatFeatureArray0[5] = (FormatFeature) jsonReadFeature1;
      // Undeclared exception!
      try { 
        objectReader0.withFeatures(formatFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_TRAILING_COMMA;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      objectReader0.withFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      objectReader1.with(formatFeatureArray0[0]);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byte byte0 = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-2));
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndCloseAsTree(byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSelfReferencedType();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      try { 
        objectReader0.readValue((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      objectReader0.with(jsonParser_Feature0);
      ObjectReader objectReader2 = objectReader1.with(formatFeatureArray0[0]);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      try { 
        objectReader2.readValue(byteArray0, (int) 0, (int) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00FF': was expecting ('true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\u0000\u0001\u0001\u0000\uFFFD\u0000\u0001\"; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      jsonFactory0.setCodec(objectReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      objectReader0._findRootDeserializer(defaultDeserializationContext0);
      objectMapper0.reader();
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      objectReader0.with((FormatFeature) jsonWriteFeature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "7&@|QblIw+b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"7&@|QblIw+b\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonpCharacterEscapes.instance();
      Class<IntNode> class0 = IntNode.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      jsonFactory0.setCodec(objectReader0);
      ObjectReader objectReader1 = objectMapper0.reader();
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonWriteFeature0);
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withMaxInputLookahead(0);
      objectReader1.withFormatDetection(dataFormatReaders1);
      assertNotSame(objectReader1, objectReader2);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      objectReader0.with(jsonParser_Feature0);
      objectReader1.with(formatFeatureArray0[0]);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)113;
      byteArray0[8] = (byte)24;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)1;
      CharacterEscapes.standardAsciiEscapesForJSON();
      byteArray0[8] = (byte)0;
      objectReader1.getFactory();
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 157)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\\\uFFFDq\u0000\u0000V\u0001\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSelfReferencedType();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      try { 
        objectReader0._bindAndClose(jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(jsonFactoryBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(153, 153);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class0);
      // Undeclared exception!
      try { 
        objectReader0._prefetchRootDeserializer(collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactoryBuilder jsonFactoryBuilder1 = jsonFactoryBuilder0.characterEscapes((CharacterEscapes) jsonpCharacterEscapes0);
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory2.configure(jsonGenerator_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<ConcurrentHashMap> class0 = ConcurrentHashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withKeyTypeHandler(jsonFactory3);
      ObjectReader objectReader2 = objectReader1.withAttribute(mapType1, jsonFactory0);
      assertNotSame(objectReader2, objectReader0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      Class<DeserializationConfig> class0 = DeserializationConfig.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-28);
      byteArray0[0] = (byte)0;
      byteArray0[5] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 527, 1734);
      NioPathDeserializer nioPathDeserializer0 = new NioPathDeserializer();
      POJONode pOJONode0 = new POJONode(nioPathDeserializer0);
      objectReader1.withValueToUpdate(deserializationFeature0);
      // Undeclared exception!
      try { 
        objectReader0.with((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory1.configure(jsonGenerator_Feature0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext0);
      ObjectReader objectReader0 = objectMapper1.reader();
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      try { 
        objectReader0.readTree("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JSON': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"JSON\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
      JsonReadFeature jsonReadFeature0 = JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS;
      formatFeatureArray0[0] = (FormatFeature) jsonReadFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectReader objectReader2 = objectReader0.with(jsonParser_Feature0);
      objectReader2.with(formatFeatureArray0[0]);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      try { 
        objectReader1.readTree(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 157)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\\\uFFFDq\u0018\u0000V\u0001\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<BooleanNode> class0 = BooleanNode.class;
      try { 
        objectReader0.readValue(jsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.JsonNode`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedReader pipedReader0 = new PipedReader(1044);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0.getSchema();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      objectReader1.withoutAttribute(charsToNameCanonicalizer0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      try { 
        objectReader0.readValue((JsonParser) filteringParserDelegate0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      ObjectReader objectReader0 = objectMapper2.readerFor(class0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      objectMapper2._deserializationContext = (DefaultDeserializationContext) defaultDeserializationContext_Impl0;
      URL uRL0 = MockURL.URL("JSON", "JSON", 0, "JSON", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      URL uRL0 = MockURL.getFtpExample();
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      objectReader0.withType((JavaType) null);
      // Undeclared exception!
      try { 
        objectReader0._inputStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      objectMapper0.isEnabled(jsonFactory_Feature0);
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      objectReader0.getInjectableValues();
      String string0 = "";
      URI uRI0 = MockURI.URI("com.fasterxml.jackson.databind.DeserializationFeature", "", "com.fasterxml.jackson.databind.DeserializationFeature", 192, "", "_>7;~^]wF4", "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      objectReader0.withView(class0);
      // Undeclared exception!
      try { 
        objectReader0.readTree((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper1, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      objectReader0.without(deserializationFeature1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        objectReader0.readValue((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(jsonParser_FeatureArray0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)88;
      // Undeclared exception!
      try { 
        objectReader0._detectBindAndClose(byteArray0, (-1763), 2095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory1);
      JsonWriteFeature jsonWriteFeature0 = JsonWriteFeature.WRITE_NAN_AS_STRINGS;
      ObjectReader objectReader2 = objectReader1.with((FormatFeature) jsonWriteFeature0);
      assertNotSame(objectReader2, objectReader1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      objectReader0.with(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        objectReader0.forType((TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<CollectionType> class0 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeReference<IntNode> typeReference0 = (TypeReference<IntNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }
}
