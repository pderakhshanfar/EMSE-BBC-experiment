/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 14:51:33 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("}\"!p@{X\"@v'D=", "org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField");
          assertNotNull(file0);
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.exists());
          assertEquals("/tmp/}\"!p@{X\"@v'D=0org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", file0.toString());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertEquals("}\"!p@{X\"@v'D=0org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", file0.getName());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertTrue(file0.canRead());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          
          ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
          assertNotNull(zipArchiveOutputStream0);
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.exists());
          assertEquals("/tmp/}\"!p@{X\"@v'D=0org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", file0.toString());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertEquals("}\"!p@{X\"@v'D=0org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", file0.getName());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertTrue(file0.canRead());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          
          ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("ZipLong value: ");
          assertNotNull(zipArchiveEntry0);
          assertNull(zipArchiveEntry0.getComment());
          assertEquals((-1), zipArchiveEntry0.getMethod());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertEquals("ZipLong value: ", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals("ZipLong value: ", zipArchiveEntry0.toString());
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          
          ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
          assertNotNull(zipArchiveOutputStream1);
          assertEquals(0L, file0.getTotalSpace());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.exists());
          assertEquals("/tmp/}\"!p@{X\"@v'D=0org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", file0.toString());
          assertEquals(1392409281320L, file0.lastModified());
          assertTrue(file0.canExecute());
          assertTrue(file0.isAbsolute());
          assertEquals("}\"!p@{X\"@v'D=0org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField", file0.getName());
          assertFalse(file0.isDirectory());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.canWrite());
          assertFalse(file0.isHidden());
          assertTrue(file0.canRead());
          assertTrue(file0.isFile());
          assertEquals("/tmp", file0.getParent());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertTrue(zipArchiveOutputStream0.isSeekable());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
          assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
          assertEquals(0, zipArchiveOutputStream1.getCount());
          assertFalse(zipArchiveOutputStream1.isSeekable());
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
          
          zipArchiveEntry0.setMethod(2047);
          assertEquals(2047, zipArchiveEntry0.getMethod());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertEquals("ZipLong value: ", zipArchiveEntry0.getName());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals("ZipLong value: ", zipArchiveEntry0.toString());
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          
          // Undeclared exception!
          try { 
            zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
            fail("Expecting exception: IllegalStateException");
          
          } catch(IllegalStateException e) {
             //
             // No current entry
             //
             verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("b");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("b", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("b", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(31L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setSize(4294967296L);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("b", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(98L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("F/t-ka:", "x-QZ8~S7lbR");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("x-QZ8~S7lbR", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/F/t-ka:/x-QZ8~S7lbR", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/F/t-ka:", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("x-QZ8~S7lbR");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("x-QZ8~S7lbR", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(41L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/F/t-ka:/x-QZ8~S7lbR", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/F/t-ka:", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setUnixMode(2048);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.getName());
      assertEquals(2048, jarArchiveEntry0.getUnixMode());
      assertEquals(134217729L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(3, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(98L, mockFile0.length());
      assertEquals("x-QZ8~S7lbR", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/F/t-ka:/x-QZ8~S7lbR", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/F/t-ka:", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.getName());
      assertEquals(2048, jarArchiveEntry0.getUnixMode());
      assertEquals(134217729L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(3, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("x-QZ8~S7lbR", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("b");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals("b", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      jarArchiveEntry0.setSize(4294967296L);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hEQQQ-;!ClY#,i", "");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("hEQQQ-;!ClY#,i", mockFile0.getName());
      assertEquals("/experiment/hEQQQ-;!ClY#,i", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setLevel(8);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("hEQQQ-;!ClY#,i", mockFile0.getName());
      assertEquals("/experiment/hEQQQ-;!ClY#,i", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setLevel(0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("hEQQQ-;!ClY#,i", mockFile0.getName());
      assertEquals("/experiment/hEQQQ-;!ClY#,i", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@aip$y1^Q5tPR");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("@aip$y1^Q5tPR", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("@aip$y1^Q5tPR", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("@aip$y1^Q5tPR", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("@aip$y1^Q5tPR", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0", "0");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("/experiment/0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0", mockFile0.getName());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("0");
      assertNotNull(jarArchiveEntry0);
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("/experiment/0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0", mockFile0.getName());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(31L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertEquals(5174L, mockFile0.length());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("0", mockFile0.getName());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(5050L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(5050, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals(23, mockFileInputStream0.available());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/qH^gSZ{>l3Ewgb}");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("/qH^gSZ{>l3Ewgb}");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("/qH^gSZ{>l3Ewgb}", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("/qH^gSZ{>l3Ewgb}", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("qH^gSZ{>l3Ewgb}", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/qH^gSZ{>l3Ewgb}", mockFile0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("qH^gSZ{>l3Ewgb}", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/qH^gSZ{>l3Ewgb}", mockFile0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("qH^gSZ{>l3Ewgb}", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/qH^gSZ{>l3Ewgb}", mockFile0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("/qH^gSZ{>l3Ewgb}", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("/qH^gSZ{>l3Ewgb}", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      jarArchiveEntry0.setMethod(0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("/qH^gSZ{>l3Ewgb}", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("/qH^gSZ{>l3Ewgb}", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry /qH^gSZ{>l3Ewgb}: ffffffffffffffff instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      File file0 = MockFile.createTempFile("always", "always");
      assertNotNull(file0);
      assertEquals("always0always", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/always0always", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("always0always", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/always0always", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[5];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals("always0always", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/always0always", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0", "0");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("0", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("0");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("0", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = MockFile.createTempFile("U_kkeW|Vuhfv+^;8f", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      assertNotNull(zipArchiveEntry0);
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      byte[] byteArray0 = new byte[4];
      zipArchiveOutputStream0.write(byteArray0, 3, 0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zlGQ;7]/&5~{&fPi", "zlGQ;7]/&5~{&fPi");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]/&5~{&fPi", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("&5~{&fPi", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[9];
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)6, 8);
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(3L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]/&5~{&fPi", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("&5~{&fPi", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("c5Syx~LJhz,a>O0y");
      assertNotNull(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("c5Syx~LJhz,a>O0y", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("c5Syx~LJhz,a>O0y", zipArchiveEntry0.getName());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(46L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("c5Syx~LJhz,a>O0y", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("c5Syx~LJhz,a>O0y", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertEquals(92L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("c5Syx~LJhz,a>O0y", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("c5Syx~LJhz,a>O0y", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertNull(string0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "c5Syx~LJhz,a>]O0y");
      assertNotNull(zipArchiveEntry0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("c5Syx~LJhz,a>]O0y", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("c5Syx~LJhz,a>]O0y", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(47L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("c5Syx~LJhz,a>]O0y", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("c5Syx~LJhz,a>]O0y", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "s^X]SO4cc{Er#/");
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(47L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals("s^X]SO4cc{Er#/", zipArchiveEntry1.getName());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals("s^X]SO4cc{Er#/", zipArchiveEntry1.toString());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(47L, zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertTrue(zipArchiveEntry1.isDirectory());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = file0.delete();
      assertTrue(boolean0);
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      
      boolean boolean1 = file0.mkdirs();
      assertTrue(boolean1);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(boolean1 == boolean0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      assertNotNull(zipArchiveEntry0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("/", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("/", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertTrue(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-1), 234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = MockFile.createTempFile("U_kkeW|Vuhfv+^;8f", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte)67, 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = MockFile.createTempFile("U_kkeW|Vuhfv+^;8f", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      byte[] byteArray0 = new byte[2];
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 8, 687);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-2323), 3430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("En>C;a");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("En>C;a", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("En>C;a", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("En>C;a", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("En>C;a", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No current entry");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("No current entry", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("No current entry", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ustar ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("ustar ", mockFile0.getName());
      assertEquals("ustar ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0", "0");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("0", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("0");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertEquals(31L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("0", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("0", jarArchiveEntry0.toString());
      assertEquals("0", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = mockFile0.delete();
      assertTrue(boolean0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/experiment/0/0", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/0", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("0", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      try { 
        zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.destroy();
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("U_kkeW|Vuhfv+^;8f", "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/U_kkeW|Vuhfv+^;8f0org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", "org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(100L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = MockFile.createTempFile("AES128", "-I#rLQ:xfT");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/AES1280-I#rLQ:xfT", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("AES1280-I#rLQ:xfT", file0.getName());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/AES1280-I#rLQ:xfT", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("AES1280-I#rLQ:xfT", file0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.close();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/tmp/AES1280-I#rLQ:xfT", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("AES1280-I#rLQ:xfT", file0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cnW_{33mQ~ K");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zlGQ;7]/&5~{&fPi", "zlGQ;7]/&5~{&fPi");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("&5~{&fPi", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]/&5~{&fPi", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setEncoding("never");
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("&5~{&fPi", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]/&5~{&fPi", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/zlGQ;7]/&5~{&fPi/zlGQ;7]", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("never", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@Ma3p$y1^Q5tP", "@Ma3p$y1^Q5tP");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/@Ma3p$y1^Q5tP/@Ma3p$y1^Q5tP", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("@Ma3p$y1^Q5tP", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/@Ma3p$y1^Q5tP", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile("Length ", "Length ");
      assertNotNull(file0);
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("Length 0Length ", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/Length 0Length ", file0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("Length 0Length ", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/Length 0Length ", file0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("AdSdrk,$");
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("AdSdrk,$", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("AdSdrk,$", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setMethod(45);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("AdSdrk,$", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("AdSdrk,$", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(45, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("Length 0Length ", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/Length 0Length ", file0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("AdSdrk,$", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("AdSdrk,$", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(45, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[1];
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)0, 45);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry AdSdrk,$
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      File file0 = MockFile.createTempFile("rT!_", "rT!_");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals("rT!_0rT!_", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/rT!_0rT!_", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(file0.isDirectory());
      assertEquals("rT!_0rT!_", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/rT!_0rT!_", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("rT!_");
      assertNotNull(jarArchiveEntry0);
      assertEquals("rT!_", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("rT!_", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(file0.isDirectory());
      assertEquals("rT!_0rT!_", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/rT!_0rT!_", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("rT!_", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("rT!_", jarArchiveEntry0.toString());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(0);
      assertEquals("rT!_", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals("rT!_", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[5];
      zipArchiveOutputStream0.destroy();
      assertFalse(file0.isDirectory());
      assertEquals("rT!_0rT!_", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/rT!_0rT!_", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.write(byteArray0, 0, 0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      File file0 = MockFile.createTempFile("U_kkeW|Vuhfv+^;8f", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, 8, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      assertNotNull(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)71, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";,#Mik:|zzsq.8O.");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(mockFile0.canRead());
      assertEquals(";,#Mik:|zzsq.8O.", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(";,#Mik:|zzsq.8O.", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding("This archive contains unclosed entries.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(jarArchiveEntry0);
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(100L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setMethod(15);
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(15, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("U_kkeW|Vuhfv+^;8f", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      assertNotNull(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream1);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream");
      assertNotNull(jarArchiveEntry0);
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      fileChannel0.close();
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(fileChannel0.isOpen());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", reserved=");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      FileChannel fileChannel1 = fileChannel0.position(4294967295L);
      assertNotNull(fileChannel1);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals((-1L), fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals((-1L), fileChannel1.position());
      assertEquals(0L, fileChannel1.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel1);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals((-1L), fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals((-1L), fileChannel1.position());
      assertEquals(0L, fileChannel1.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = MockFile.createTempFile("NUL}", "NUL}");
      assertNotNull(file0);
      assertEquals("/tmp/NUL}0NUL}", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("NUL}0NUL}", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("/tmp/NUL}0NUL}", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("NUL}0NUL}", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NUL}");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("NUL}", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("NUL}", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setMethod((-1));
      assertEquals("/tmp/NUL}0NUL}", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("NUL}0NUL}", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = MockFile.createTempFile("always", "always");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals("always0always", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/always0always", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(file0.isDirectory());
      assertEquals("always0always", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/always0always", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      assertNotNull(dumpArchiveEntry0);
      assertEquals(0L, dumpArchiveEntry0.getSize());
      assertNull(dumpArchiveEntry0.getSimpleName());
      assertFalse(dumpArchiveEntry0.isSocket());
      assertEquals(0, dumpArchiveEntry0.getMode());
      assertEquals(0, dumpArchiveEntry0.getGroupId());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertFalse(dumpArchiveEntry0.isBlkDev());
      assertEquals(0, dumpArchiveEntry0.getUserId());
      assertFalse(dumpArchiveEntry0.isFifo());
      assertFalse(dumpArchiveEntry0.isDeleted());
      assertNull(dumpArchiveEntry0.getName());
      assertEquals(DumpArchiveEntry.TYPE.UNKNOWN, dumpArchiveEntry0.getType());
      assertNull(dumpArchiveEntry0.toString());
      assertFalse(dumpArchiveEntry0.isFile());
      assertFalse(dumpArchiveEntry0.isChrDev());
      assertEquals(0, dumpArchiveEntry0.getGeneration());
      assertEquals(0, dumpArchiveEntry0.getVolume());
      assertFalse(dumpArchiveEntry0.isDirectory());
      assertEquals(0, dumpArchiveEntry0.getNlink());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(dumpArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.dump.DumpArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.tar.TarArchiveEntry");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.tar.TarArchiveEntry");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setEncoding("S1");
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("S1", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&)f-Ol$h", true);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      mockFileOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hEQH5Q-;!ClY#,i", "");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("hEQH5Q-;!ClY#,i", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/hEQH5Q-;!ClY#,i", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals("hEQH5Q-;!ClY#,i", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/hEQH5Q-;!ClY#,i", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hEQQQ-;!ClY#,i", "");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/hEQQQ-;!ClY#,i", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("hEQQQ-;!ClY#,i", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/hEQQQ-;!ClY#,i", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("hEQQQ-;!ClY#,i", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      try { 
        zipArchiveOutputStream1.destroy();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setMethod(2048);
      assertEquals(2048, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.destroy();
      assertFalse(fileChannel0.isOpen());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(60);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.arj.LocalFileHeader");
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("org.apache.commons.compress.archivers.arj.LocalFileHeader", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "tX{c$wi0]Pq~CWR2K<{");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader0tX{c$wi0]Pq~CWR2K<{", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader0tX{c$wi0]Pq~CWR2K<{", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader0tX{c$wi0]Pq~CWR2K<{", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader0tX{c$wi0]Pq~CWR2K<{", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("{l");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("{l", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("{l", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1603);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("{l", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("{l", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(32, pipedInputStream0.available());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("w*!");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("w*!", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("w*!", zipArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setMethod(2048);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("w*!", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(2048, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("w*!", zipArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2048, 3);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2046), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry w*!
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("b");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("b", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("b", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("b", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(31L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("b", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("b", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(31L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(31, mockFileInputStream0.available());
      assertEquals(31L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("b", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/b", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(31L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(31, mockFileInputStream0.available());
      assertEquals(31L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(100L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(24105L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(23871L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(23871, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(15, mockFileInputStream0.available());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(24105L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(23871L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(23871, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("%;PzZq\"5vOu0rK");
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("%;PzZq\"5vOu0rK", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("%;PzZq\"5vOu0rK", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.toString());
      assertEquals(30L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-106), 2048);
      assertNotNull(byteArrayInputStream0);
      assertEquals(111, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setEncoding("e0v_");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("e0v_", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" \u0000");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":pA/{h{", ":pA/{h{");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("{h{", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/:pA/{h{/:pA/{h{", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/:pA/{h{/:pA", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":pA/{h{");
      assertNotNull(jarArchiveEntry0);
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("{h{", mockFile0.getName());
      assertEquals(37L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/:pA/{h{/:pA/{h{", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/:pA/{h{/:pA", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertEquals("{h{", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/:pA/{h{/:pA/{h{", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/:pA/{h{/:pA", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(112L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(4, zipArchiveOutputStream0.getCount());
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(4, byteArray0.length);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      assertNotNull(unicodePathExtraField0);
      assertEquals(0L, unicodePathExtraField0.getNameCRC32());
      
      zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      assertNotNull(x7875_NewUnix0);
      
      zipExtraFieldArray0[1] = (ZipExtraField) x7875_NewUnix0;
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      assertNotNull(zip64ExtendedInformationExtraField0);
      
      zipExtraFieldArray0[2] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      JarMarker jarMarker0 = JarMarker.getInstance();
      assertNotNull(jarMarker0);
      
      zipExtraFieldArray0[3] = (ZipExtraField) jarMarker0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(16, true);
      assertNotNull(resourceAlignmentExtraField0);
      assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)16, resourceAlignmentExtraField0.getAlignment());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[4] = (ZipExtraField) resourceAlignmentExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(5, zipExtraFieldArray0.length);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("{h{", mockFile0.getName());
      assertEquals(187L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/:pA/{h{/:pA/{h{", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/:pA/{h{/:pA", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(4, zipArchiveOutputStream0.getCount());
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", "org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertEquals(100L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setComment("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(286L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("org.apache.commoCs.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("PU/+eCLXN ]Yqh");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(7L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(7, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(7, byteArray0.length);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(7L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(7, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("PU/+eCLXN ]Yqh", jarArchiveEntry0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = MockFile.createTempFile("NUL}", "NUL}");
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/NUL}0NUL}", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("NUL}0NUL}", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/NUL}0NUL}", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("NUL}0NUL}", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NUL}");
      assertNotNull(jarArchiveEntry0);
      assertEquals("NUL}", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("NUL}", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/NUL}0NUL}", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("NUL}0NUL}", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("NUL}", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("NUL}", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, (-1), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("b");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("b", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("b", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals("b", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      jarArchiveEntry0.setSize(4294967296L);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("b", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("b", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(51L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals("b", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("b", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(4294967296L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, sequenceInputStream0);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.getName());
      assertEquals("@aip$y1^Q5tPR", zipArchiveEntry0.toString());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      assertNotNull(zipArchiveEntry0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("^G0");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("^G0", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("^G0", mockFile0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.close();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("^G0", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(22L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertEquals("^G0", mockFile0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, "nz8k4pWP|+mJzSjAn1W");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hEQQQ-;!ClY#,i", "");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/hEQQQ-;!ClY#,i", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("hEQQQ-;!ClY#,i", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", reserved=");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(50L, fileChannel0.size());
      assertEquals(50L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b", "b");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("@v&+]~dk0Z2}");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("/experiment/b", mockFile0.getParent());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("b", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("/experiment/b", mockFile0.getParent());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(43L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("b", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("/experiment/b", mockFile0.getParent());
      assertEquals("/experiment/b/b", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("b", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(122L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("@v&+]~dk0Z2}", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(100L, mockFile0.length());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(100L, mockFile0.length());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(266L, mockFile0.length());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(4, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(4, byteArray0.length);
      
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      MockFile mockFile0 = new MockFile("^'E+J9e\"KN", "NXH,P;X>h7V'E}");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "NXH,P;X>h7V'E}");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/^'E+J9e\"KN/NXH,P;X>h7V'E}", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/experiment/^'E+J9e\"KN", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("NXH,P;X>h7V'E}", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("NXH,P;X>h7V'E}", zipArchiveEntry0.toString());
      assertEquals("NXH,P;X>h7V'E}", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveEntry0.setComment("|]");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/^'E+J9e\"KN/NXH,P;X>h7V'E}", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/experiment/^'E+J9e\"KN", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("NXH,P;X>h7V'E}", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("NXH,P;X>h7V'E}", zipArchiveEntry0.toString());
      assertEquals("NXH,P;X>h7V'E}", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("|]", zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("h[{");
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("h[{", zipArchiveEntry0.toString());
      assertEquals("h[{", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveEntry0.setComment("ULj}kF+r]UqwR");
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("h[{", zipArchiveEntry0.toString());
      assertEquals("ULj}kF+r]UqwR", zipArchiveEntry0.getComment());
      assertEquals("h[{", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("h[{", zipArchiveEntry0.toString());
      assertEquals("ULj}kF+r]UqwR", zipArchiveEntry0.getComment());
      assertEquals("h[{", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveEntry0.setComment("");
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      MockFile mockFile0 = new MockFile("^'E+J9e\"KN", "NXH,P;X>h7V'E}");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "NXH,P;X>h7V'E}");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/^'E+J9e\"KN", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("NXH,P;X>h7V'E}", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/^'E+J9e\"KN/NXH,P;X>h7V'E}", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("NXH,P;X>h7V'E}", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("NXH,P;X>h7V'E}", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":pA/{h{", ":pA/{h{");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("{h{", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/:pA/{h{/:pA", mockFile0.getParent());
      assertEquals("/experiment/:pA/{h{/:pA/{h{", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":pA/{h{");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      assertNotNull(unicodePathExtraField0);
      assertEquals(0L, unicodePathExtraField0.getNameCRC32());
      
      zipExtraFieldArray0[0] = (ZipExtraField) unicodePathExtraField0;
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      assertNotNull(x7875_NewUnix0);
      
      zipExtraFieldArray0[1] = (ZipExtraField) x7875_NewUnix0;
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      assertNotNull(zip64ExtendedInformationExtraField0);
      
      zipExtraFieldArray0[2] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      JarMarker jarMarker0 = JarMarker.getInstance();
      assertNotNull(jarMarker0);
      
      zipExtraFieldArray0[3] = (ZipExtraField) jarMarker0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(16, true);
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals((short)16, resourceAlignmentExtraField0.getAlignment());
      assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[4] = (ZipExtraField) resourceAlignmentExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(5, zipExtraFieldArray0.length);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("{h{", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(80L, mockFile0.length());
      assertEquals("/experiment/:pA/{h{/:pA", mockFile0.getParent());
      assertEquals("/experiment/:pA/{h{/:pA/{h{", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(":pA/{h{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(":pA/{h{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getParent());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[6];
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      assertNotNull(x0016_CertificateIdForCentralDirectory0);
      assertNull(x0016_CertificateIdForCentralDirectory0.getHashAlgorithm());
      assertEquals(0, x0016_CertificateIdForCentralDirectory0.getRecordCount());
      
      zipExtraFieldArray0[0] = (ZipExtraField) x0016_CertificateIdForCentralDirectory0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertNotNull(resourceAlignmentExtraField0);
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[1] = (ZipExtraField) resourceAlignmentExtraField0;
      X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new X0015_CertificateIdForFile();
      assertNotNull(x0015_CertificateIdForFile0);
      assertNull(x0015_CertificateIdForFile0.getHashAlgorithm());
      assertEquals(0, x0015_CertificateIdForFile0.getRecordCount());
      
      zipExtraFieldArray0[2] = (ZipExtraField) x0015_CertificateIdForFile0;
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      assertNotNull(unicodeCommentExtraField0);
      assertEquals(0L, unicodeCommentExtraField0.getNameCRC32());
      
      zipExtraFieldArray0[3] = (ZipExtraField) unicodeCommentExtraField0;
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      assertNotNull(x0017_StrongEncryptionHeader0);
      assertNull(x0017_StrongEncryptionHeader0.getHashAlgorithm());
      assertNull(x0017_StrongEncryptionHeader0.getEncryptionAlgorithm());
      assertEquals(0L, x0017_StrongEncryptionHeader0.getRecordCount());
      
      zipExtraFieldArray0[4] = (ZipExtraField) x0017_StrongEncryptionHeader0;
      JarMarker jarMarker0 = new JarMarker();
      assertNotNull(jarMarker0);
      
      zipExtraFieldArray0[5] = (ZipExtraField) jarMarker0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(6, zipExtraFieldArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("h[{");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("h[{", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("h[{", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveEntry0.setAlignment(2048);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("h[{", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("h[{", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("h[{", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("h[{", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile("b");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("b", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("b", mockFile0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("b");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      assertNotNull(x000A_NTFS0);
      
      zipExtraFieldArray0[0] = (ZipExtraField) x000A_NTFS0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
      assertNotNull(resourceAlignmentExtraField0);
      assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[1] = (ZipExtraField) resourceAlignmentExtraField0;
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      assertNotNull(x0014_X509Certificates0);
      
      zipExtraFieldArray0[2] = (ZipExtraField) x0014_X509Certificates0;
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      assertNotNull(unicodeCommentExtraField0);
      assertEquals(0L, unicodeCommentExtraField0.getNameCRC32());
      
      zipExtraFieldArray0[3] = (ZipExtraField) unicodeCommentExtraField0;
      X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new X0015_CertificateIdForFile();
      assertNotNull(x0015_CertificateIdForFile0);
      assertNull(x0015_CertificateIdForFile0.getHashAlgorithm());
      assertEquals(0, x0015_CertificateIdForFile0.getRecordCount());
      
      zipExtraFieldArray0[4] = (ZipExtraField) x0015_CertificateIdForFile0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(5, zipExtraFieldArray0.length);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(79L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("b", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("b", mockFile0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("b", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("b", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No current entry");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("No current entry", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("No current entry", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.flush();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("No current entry", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("No current entry", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.flush();
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.close();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.close();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("E_n]>C;a");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("u$#=~#&V>_S");
      jarArchiveEntry0.setMethod(1);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = MockFile.createTempFile("!6J.S*h3", "Nx9]1}a=-8m$(yqraO");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(6);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("u$#=~#&V>_S");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile("U_kkeW|Vuhfv+^;8f", "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", 0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(arArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(60);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U%831", "U%831");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 22
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No current entry");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((-113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -113
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@Ma3p$y1^Q5tP", "@Ma3p$y1^Q5tP");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(2048);
      zipArchiveEntry0.setCompressedSize(1392409281320L);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(50L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setCompressedSize(4294967295L);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // 's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apacVe.commoCs8comresw.archivers.zip.Z0017_StrongEncryptionHeader");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apacVe.commoCs8comresw.archivers.zip.Z0017_StrongEncryptionHeader");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setSize(0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry((ZipEntry) jarArchiveEntry0);
      zipArchiveEntry0.setMethod(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      zipArchiveEntry0.setMethod(0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apacVe.commoCs8comresw.archivers.zip.Z0017_StrongEncryptionHeader");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apacVe.commoCs8comresw.archivers.zip.Z0017_StrongEncryptionHeader");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.setLevel(3);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      File file0 = MockFile.createTempFile("@)ip$y1^QZ5tPR", "@)ip$y1^QZ5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@)ip$y1^QZ5tPR");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      zipArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = MockFile.createTempFile("NUL}", "NUL}");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NUL}");
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("@aip$y1^Q5tPR");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader", "org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertEquals(4, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = MockFile.createTempFile("Tm 5B1,5uoa&&KB\",", "Tm 5B1,5uoa&&KB\",");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Tm 5B1,5uoa&&KB\",");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream1.writeCentralFileHeader(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream1.closeArchiveEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad size for entry Tm 5B1,5uoa&&KB\",: 0 instead of 63
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = MockFile.createTempFile("Tm 5B1,5uo0a&&KB\",", "Tm 5B1,5uo0a&&KB\",");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Tm 5B1,5uo0a&&KB\",");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setCrc(12L);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry Tm 5B1,5uo0a&&KB\",: c instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      File file0 = MockFile.createTempFile("Tm 5B1,5uoa&&KB\",", "Tm 5B1,5uoa&&KB\",");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Tm 5B1,5uoa&&KB\",");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream1.closeArchiveEntry();
      assertEquals(47, zipArchiveOutputStream0.getCount());
      assertEquals(47L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("Tm 5B1,5uoa&&KB\",", "Tm 5B1,5uoa&&KB\",");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Tm 5B1,5uoa&&KB\",");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(12);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apacVe.commoCscomrsw.arhivers.zip.Z0017_StrongEncryptionHemde0");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apacVe.commoCscomrsw.arhivers.zip.Z0017_StrongEncryptionHemde0");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setSize(280375465082880L);
      jarArchiveEntry0.setCrc(141L);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(26819L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.ZipFile$Entry", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hjY'p?n4an4ssX?");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(filterOutputStream0);
      zipArchiveOutputStream0.finish();
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setEncoding("bCk");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("bCk", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertTrue(zipArchiveOutputStream0.isSeekable());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("always", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setComment("LMv',,P8%iF%J");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("hEQH5Q-;!ClY#,i", "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      File file0 = MockFile.createTempFile("@aip$y1^Q5tPR", "@aip$y1^Q5tPR");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }
}
