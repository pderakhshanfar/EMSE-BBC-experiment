* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-70
* Going to generate test cases for class: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Starting Client-0
* Connecting to master process on port 3940
* Analyzing classpath: 
  - subjects/buggy-versions/Compress-43/target/classes
  - defects4j/framework/projects/Compress/lib/org/brotli/dec/0.1.2/dec-0.1.2.jar
  - defects4j/framework/projects/Compress/lib/org/tukaani/xz/1.6/xz-1.6.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2207
* Using seed 1682334450
* Starting evolution
bbc usage percentage is: 70%
* Initial Number of Goals in DynaMOSA = 864 / 2207
[MASTER] 11:53:28.132 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 11:57:31.050 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 1258 generations, 505564 statements, best individual has fitness: 235.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 514
* Number of covered goals: 503
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 320
* Number of covered goals: 287
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 77
* Number of covered goals: 77
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 978
* Number of covered goals: 913
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 11
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 320
* Number of covered goals: 269
* Generated 143 tests with total length 743
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:04:31.203 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8250333333333333% of time used, but only 25/143 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 12:04:58.483 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:04:59.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/org.apache.commons.compress.archivers.dump.DumpArchiveConstants0org.apache.commons.compress.archivers.dump.DumpArchiveConstants" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_145_tmp__ESTest.test0(ZipArchiveOutputStream_145_tmp__ESTest.java:23)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:04:59.624 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
zipArchiveOutputStream0.setFallbackToUTF8(true);
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());


[MASTER] 12:05:07.507 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/D,N,R'QVo0org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_148_tmp__ESTest.test0(ZipArchiveOutputStream_148_tmp__ESTest.java:27)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:05:07.508 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("D,N,R'QVo", "org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor");
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, " instead of ");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.finish();

[MASTER] 12:05:17.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/f%&0E>Q$9fVFbVsP}=0f%&0E>Q$9fVFbVsP}=" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_156_tmp__ESTest.test0(ZipArchiveOutputStream_156_tmp__ESTest.java:25)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:05:17.672 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("f%&0E>Q$9fVFbVsP}=", "f%&0E>Q$9fVFbVsP}=");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
zipArchiveOutputStream0.setEncoding("GU");
zipArchiveOutputStream0.writeCentralDirectoryEnd();

[MASTER] 12:05:26.756 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/)"`<40)"`<4" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_161_tmp__ESTest.test0(ZipArchiveOutputStream_161_tmp__ESTest.java:25)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:05:26.757 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile(")\"`<4", ")\"`<4");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(")\"`<4");
zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
assertEquals(0L, jarArchiveEntry0.getSize());
assertEquals(2L, jarArchiveEntry0.getCompressedSize());


[MASTER] 12:05:30.353 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "1=tx" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_163_tmp__ESTest.test0(ZipArchiveOutputStream_163_tmp__ESTest.java:24)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:05:30.353 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockFile mockFile0 = new MockFile("1=tx");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("1=tx");
jarArchiveEntry0.setCrc(327L);
zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
assertEquals(2L, jarArchiveEntry0.getCompressedSize());
assertEquals(3843L, mockFile0.length());


* Permissions denied during test execution: 
  - java.io.FilePermission: 
         write /tmp/org.apache.commfnscompres.arciv*rs.cp.CpoAchiveEntry0org.apache.commfnscompres.arciv*rs.cp.CpoAchiveEntry: 1
         write /tmp/)"`<40)"`<4: 1
         write /tmp/uYQ^LrD#$*0: 1
         and other 6 cases of action/name for this exception class
* Writing tests to file
* Writing JUnit test case 'ZipArchiveOutputStream_ESTest' to results/Compress-43/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/BBC-F0-opt-70/tests/9
* Done!

* Computation finished
