/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 20:21:40 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.ch.FileChannelImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
          ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
          ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
          zipArchiveEntry0.setPlatform(2048);
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
          assertEquals(8, zipArchiveEntry0.getMethod());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|N_(b$[_cl6EEu}A");
      zipArchiveOutputStream0.setMethod(2497);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals(2497, jarArchiveEntry0.getMethod());
      assertEquals("PK\u0001\u0002\n\u0000\u0000\b\uFFFD\t\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0010\u0000\u0000\u0000|N_(b$[_cl6EEu}A", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(24);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setLevel(8);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Steam has alrAaP ben finishe8", "Steam has alrAaP ben finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      zipArchiveEntry0.addAsFirstExtraField(x000A_NTFS0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" is not a concrete cla=s");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, " is not a concrete cla=s");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setSize(4294967312L);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, sequenceInputStream0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(170L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveEntry0.setCompressedSize((-2179L));
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)112, 101);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(84L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|N_(b$[_cl6EEu}A");
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      zipArchiveOutputStream0.write(byteArray0, (int) (byte)0, 0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile(" inot a concree class", " inot a concree class");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, " inot a concree class");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.finish();
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.destroy();
      byte[] byteArray0 = new byte[8];
      zipArchiveOutputStream0.writeOut(byteArray0, (-79), 106);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = MockFile.createTempFile("9 CV3OU5", "9 CV3OU5");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("9 CV3OU5");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = MockFile.createTempFile(" is not a concrete class", " is not a concrete class");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, " is not a concrete class");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.close();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VoboXtX'`_iC\"kqN<T");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|N_(b$[_cl6EEu}A");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.createArchiveEntry(mockFile0, "|N_(b$[_cl6EEu}A");
      assertEquals(46L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, ",Rq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      assertEquals("/", zipArchiveEntry0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("yDJ[!zP");
      File file0 = MockFile.createTempFile("yDJ[!zP", "CP850");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.destroy();
      try { 
        zipArchiveOutputStream0.writeZip64CentralDirectory();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 30, (-3781));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("t[?l^-b_wtA");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte) (-106), (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "w");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 182, (-1080));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      byte[] byteArray0 = new byte[0];
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1766);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VoboXtX'`_iC\"kqN<T");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[3];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("|((x*", "|((x*");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "|((x*");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0);
      zipArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("4%AqK");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2235);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile("50G5COvPh0_:u4p", "50G5COvPh0_:u4p");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("50G5COvPh0_:u4p");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      mockFile0.setWritable(false, false);
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Nb'mS'Pz_7jANVXgW5+");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("TripleDES168");
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream2.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeDataDescriptor(jarArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|N_(b$[_cl6EEu}A");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream1.writeDataDescriptor(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VoboXtX'`_iC\"kqN<T");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|N_(b$[_cl6EEu}A");
      zipArchiveOutputStream0.setMethod(3);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry |N_(b$[_cl6EEu}A
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      Path path0 = file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VoboXtX'`_iC\"kqN<T");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("79=:");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel1);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("UTF8", "", (File) mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.setMethod(9516);
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      byte[] byteArray0 = new byte[4];
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)0, (-1));
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry Stream has alrAadP been finishe8
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, 36, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding("LBAT/H!RI0Ywu~HTTM");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // LBAT/H!RI0Ywu~HTTM
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = MockFile.createTempFile(" is not a concrete class", " is not a concrete class");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, " is not a concrete class");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         //  is not a concrete class's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.setMethod(9516);
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry Stream has alrAadP been finishe8
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = MockFile.createTempFile("|((x*", "|((x*");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "|((x*");
      zipArchiveOutputStream0.destroy();
      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("archive contains more than 65535 entries.");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile("archive contains more than 65535 entries.", "archive contains more than 65535 entries.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel1);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "archive contains more than 65535 entries.");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("CObi:E?k]4w{6");
      zipArchiveOutputStream0.setMethod((-1));
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("-bIgE", 2048, (-1), 1, 8, (-585L));
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(arArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.ar.ArArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setEncoding("cpl437");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("_'0$N)pX$-e;7 ");
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has already been finished", "Stream has already been finished");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(24);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile(" {Mev", " {Mev");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setEncoding("TOKENIZATION");
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(filterOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      try { 
        zipArchiveOutputStream1.destroy();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.destroy();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.deflate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      MockFile mockFile0 = new MockFile("|N_(b$[_cl6EEu}A");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.setMethod(9516);
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry Stream has alrAadP been finishe8
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has already been finished", "Stream has already been finished");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile(" is not a concrete class", " is not a concrete class");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, " is not a concrete class");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.arhivers.zip.ZipLong");
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile(">6gWk4NLbRtcq", ">6gWk4NLbRtcq");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6.ezB#vKvH");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("VoboXtX'`_iC\"kqN<T");
      jarArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(920);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      File file0 = MockFile.createTempFile("ClTlapzoS", "ClTlapzoS");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ClTlapzoS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new X5455_ExtendedTimestamp();
      zipExtraFieldArray0[0] = (ZipExtraField) x5455_ExtendedTimestamp0;
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      zipExtraFieldArray0[1] = (ZipExtraField) unicodePathExtraField0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField((byte)1, true, (byte)1);
      zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      zipExtraFieldArray0[3] = (ZipExtraField) x0016_CertificateIdForCentralDirectory0;
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      zipExtraFieldArray0[4] = (ZipExtraField) x0014_X509Certificates0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2048);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // UniCode path extra data must have at least 5 bytes.
         //
         verifyException("org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1431655765, (-872));
      Path path0 = file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[2];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DELETE_ON_CLOSE;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      FileChannelImpl fileChannelImpl0 = (FileChannelImpl)FileChannel.open(path0, openOptionArray0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannelImpl0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.close();
      zipArchiveOutputStream0.finished = false;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-1));
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile("DsDpOX", "b-$M=bC5");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2127);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry((ZipArchiveEntry) null, sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // entry
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("archi3e conta6ns more than 65535 entries.");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("archi3e conta6ns more than 65535 entries.");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.comp ess.archivers.zipiZipArchiveOutputStream$EntryMetaData");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.comp ess.archivers.zipiZipArchiveOutputStream$EntryMetaData");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("org.apache.commons.comp ess.archivers.zipiZipArchiveOutputStream$EntryMetaData");
      mockFileInputStream0.skip(4294967295L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "]fV&2Ys\"");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.arhivers.zip.ZipLong");
      File file0 = MockFile.createTempFile("G8'L^M5T4f", "org.apache.commons.compress.arhivers.zip.ZipLong");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-961), 1526);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      File file0 = MockFile.createTempFile("tar\u0000", "archive contains more than 65535 entries.");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4aR0", "|N_(b$[_cl6EEu}A");
      MockFile.createTempFile("|N_(b$[_cl6EEu}A", "|N_(b$[_cl6EEu}A", (File) mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      File file0 = MockFile.createTempFile("Y!Pd'0zHSJ", "Y!Pd'0zHSJ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = MockFile.createTempFile("|((x*", "|((x*");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "|((x*");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0);
      zipArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, 57, (-1259));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Steam has alrAaP ben finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "Steam has alrAaP ben finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setSize(4294967295L);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      assertEquals(103L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = MockFile.createTempFile(" is not a concrete class", " is not a concrete class");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, " is not a concrete class");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      zipArchiveOutputStream0.close();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("yDJ[!zP");
      File file0 = MockFile.createTempFile("yDJ[!zP", "CP850");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.comp ess.archivers.zipiZipArchiveOutputStream$EntryMetaData");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.comp ess.archivers.zipiZipArchiveOutputStream$EntryMetaData");
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(280L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = MockFile.createTempFile("|((x*", "|((x*");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "|((x*");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setSize(4294967301L);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("|((x*", zipArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveEntry0.setComment("Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("Stream has alrAadP been finishe8", zipArchiveEntry0.getName());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // archive's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = MockFile.createTempFile("|((x*", "|((x*");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "|((x*");
      zipArchiveEntry0.setSize(4294967300L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveEntry0.setComment("CP850");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveEntry0.setComment("");
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream h8s alrAadP been finishe8", "Stream h8s alrAadP been finishe8");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream h8s alrAadP been finishe8");
      jarArchiveEntry0.setComment("Stream h8s alrAadP been finishe8");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.Zip64RequiredException", "No current entry");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("zi%}o#D6");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Stream h8s alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream h8s alrAadP been finishe8");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(73, true);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(76L, mockFile0.length());
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFile mockFile0 = new MockFile("diA#M`9yo,a#/]qd", "diA#M`9yo,a#/]qd");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("diA#M`9yo,a#/]qd");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream h8s alrAadP been finishe8", "Stream h8s alrAadP been finishe8");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream h8s alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stea[ hasKalrAaP b^n finishe8", "Stea[ hasKalrAaP b^n finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=i#InZ2+?0Zk0");
      jarArchiveEntry0.setAlignment(2);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("9 CV3OU5", "9 CV3OU5");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("9 CV3OU5");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(1934);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has already been finished", "Stream has already been finished");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3207);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.close();
      zipArchiveOutputStream0.close();
      assertEquals(22, byteArrayOutputStream0.size());
      assertEquals("PK\u0005\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Stream h8s alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream h8s alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = MockFile.createTempFile("!GygkX'PV~&)\"", "!GygkX'PV~&)\"");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("!GygkX'PV~&)\"");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFile mockFile0 = new MockFile("|((x*", "|((x*");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|((x*");
      zipArchiveOutputStream0.setMethod(1);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(1, jarArchiveEntry0.getMethod());
      assertEquals(35L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("archive contains more than 65535 entries.");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(949);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GK2\"+# 1naUvw}_W");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(2497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 2497
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has already been finished", "Stream has already been finished");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((-4253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -4253
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile("K^n", "K^n");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("K^n");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      File file0 = MockFile.createTempFile(" is not a concrete class", " is not a concrete class");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, " is not a concrete class");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setSize(4294967295L);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, sequenceInputStream0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         //  is not a concrete class's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.setMethod(0);
      try { 
        zipArchiveOutputStream1.putArchiveEntry(archiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.setLevel(0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      File file0 = MockFile.createTempFile(" is not a concrete cla=s", " is not a concrete cla=s");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, " is not a concrete cla=s");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream h8s alrAadP been finishe8", "Stream h8s alrAadP been finishe8");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Stream h8s alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setMethod(12);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry : ffffffffffffffff instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "Stream has alrAadP been finishe8");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(2L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finished = true;
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      File file0 = MockFile.createTempFile(" is not a concrete class", " is not a concrete class");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, " is not a concrete class");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      jarArchiveEntry0.setCompressedSize((-1));
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("|N_(b$[_cl6EEu}A");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setEncoding("AES128");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("AES128", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFile mockFile0 = new MockFile("VoboXtX'`_iC\"kqN<T");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      File file0 = MockFile.createTempFile("Stream has alrAadP been finishe8", "Stream has alrAadP been finishe8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("U.", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 38);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("always", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.setComment("070707");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ASO5}]8eG71X");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(24);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[1];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
  }
}
