/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 20:20:14 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.net.URI;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileTime;
import java.util.Enumeration;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" atio,");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" atio,");
      jarArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":?P$urbwG'#zzC4F");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":?P$urbwG'#zzC4F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setCompressedSize(4294967296L);
      jarArchiveEntry0.setMethod(18);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setPlatform(8);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" at offeti ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" at offeti ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setSize(4294967296L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":?P$urbwG'#zzC4F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setLevel(0);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N[-TJq");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("N[-TJq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      FileTime fileTime0 = FileTime.fromMillis((-34L));
      jarArchiveEntry0.setLastModifiedTime(fileTime0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ENK^|37zwV8`~3a<");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("kT9OIrXv)");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setSize(4294967295L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, (-1));
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFile mockFile0 = new MockFile("enVaZ", "enVaZ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals(7L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("kg>L/tB");
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      
      byte[] byteArray0 = new byte[3];
      zipArchiveOutputStream0.write(byteArray0, (int) (byte)2, 0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFile mockFile0 = new MockFile("W;@H_h[tF4'oF6bI`-b");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      byte[] byteArray0 = new byte[8];
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)4, 9);
      assertEquals(4L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.ZipShort", "6U;a0oiv@PNK");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setEncoding((String) null);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/encryption0encryption");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "UNKNOWN_CODE");
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "g");
      assertEquals("g", archiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("\"o`", "", (File) mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "\"o`");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("\"o`/", zipArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      File file0 = MockFile.createTempFile("Jm|lYW~H6(pFqCm<f|=", "Jm|lYW~H6(pFqCm<f|=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 1799, 38);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      File file0 = MockFile.createTempFile("->0x", (String) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-1265), 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I2jJ?nm?f");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 728, 1000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = MockFile.createTempFile("@|NK^B3w`]<", "@|NK^B3w`]<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      byte[] byteArray0 = new byte[9];
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField", "org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]g9MN");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("muBS'ZvUqtrT");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("2");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0);
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1397), 0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC hecksu forentry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC hecksu forentry ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      Path path0 = file0.toPath();
      TreeSet<StandardOpenOption> treeSet0 = new TreeSet<StandardOpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      FileChannel fileChannel0 = FileChannel.open(path0, (Set<? extends OpenOption>) treeSet0, (FileAttribute<?>[]) fileAttributeArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1I<fUQ_");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N[-TJq");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setEncoding("SETUID");
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "'/#&_,%4(<K6dDfti");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setMethod(9);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.write(byteArray0, 57, 1000);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'ENHANCED_DEFLATED' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I2jJ?nm?f");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("I2jJ?nm?f");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, 704, 26625);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":?P$urbwG'#zzC4F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding(":?P$urbwG'#zzC4F");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // :?P$urbwG'#zzC4F
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      zipArchiveOutputStream0.setMethod(2415);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry bad CRC checksum for entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1JW^B*uQmj", "Ulj{o1JW^B*uQmj");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?z?:Zbr\"OTT");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("?z?:Zbr\"OTT");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel1);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setMethod((-1));
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ud ;#c", "never");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(arjArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.arj.ArjArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream");
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 2739);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      Path path0 = file0.toPath();
      TreeSet<StandardOpenOption> treeSet0 = new TreeSet<StandardOpenOption>();
      FileAttribute<Object>[] fileAttributeArray0 = (FileAttribute<Object>[]) Array.newInstance(FileAttribute.class, 0);
      FileChannel fileChannel0 = FileChannel.open(path0, (Set<? extends OpenOption>) treeSet0, (FileAttribute<?>[]) fileAttributeArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile("p79rM0N8tg;^ZPma6q]", "p79rM0N8tg;^ZPma6q]");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.destroy();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setEncoding("owR");
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream2.destroy();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("f71>:e{FMD'0p|b^X", "*@pXzn[8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      try { 
        zipArchiveOutputStream0.destroy();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = MockFile.createTempFile(", originalCrc32=", "Jz$v^oB`pKyo");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finish();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.deflate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      File file0 = MockFile.createTempFile("->0x", (String) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setMethod(9);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'ENHANCED_DEFLATED' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      Path path0 = file0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = MockFile.createTempFile("MzM", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
      zipArchiveOutputStream0.finished = false;
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" atio'I ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setMethod(9);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'ENHANCED_DEFLATED' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~D94{M");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("~D94{M");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setMethod(0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jz:qr\",OTT");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("jz:qr\",OTT");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", "uh}u7jb<|");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      File file0 = MockFile.createTempFile("@|NK^B3w`]<", "@|NK^B3w`]<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("@|NK^B3w`]<");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.destroy();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile("UlWj{o1KW^B*uQm", "UlWj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      File file0 = MockFile.createTempFile("v5Qu@pX EC)-vGFV-*", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "F");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1792), 8);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.utils.ByteUtils");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.utils.ByteUtils");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(objectOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.utils.ByteUtils");
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, " \u0000");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile1);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = MockFile.createTempFile("__al:Lc>)%uQo", "__al:Lc>)%uQo", (File) null);
      MockFile mockFile0 = new MockFile(file0, "AES_ENCRYPTED");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (-2160), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)96, (int) (byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.createArchiveEntry(file0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":?P$urbwG'#zzC4F");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":?P$urbwG'#zzC4F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setCompressedSize(4294967296L);
      jarArchiveEntry0.setMethod(18);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertFalse(zipArchiveOutputStream0.isSeekable());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" at offeti ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" at offeti ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setSize(4294967296L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":jP$urbwfG'#zgzC^F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":jP$urbwfG'#zgzC^F");
      jarArchiveEntry0.setCompressedSize(4294967295L);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I2jJ?nm?f");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("I2jJ?nm?f");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setComment("I2jJ?nm?f");
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":?P$urbwG'#zzC4F");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":?P$urbwG'#zzC4F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setCompressedSize(4294967296L);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // archive's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I2jJ?nm?f");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("I2jJ?nm?f");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" :at offeti ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" :at offeti ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setSize(4294967295L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFile mockFile0 = new MockFile("NK47zwVrx`~KW3*aV<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":< Q 0q}$;1C-YMC");
      jarArchiveEntry0.setCompressedSize(4294967295L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.utils.ByteUtils");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.utils.ByteUtils");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(objectOutputStream0);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      jarArchiveEntry0.setComment("g");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC check$um for entry");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      jarArchiveEntry0.setComment("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("NK47zwVrx`~KW3*aV<", "NK47zwVrx`~KW3*aV<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NK47zwVrx`~KW3*aV<");
      jarArchiveEntry0.setComment("NK47zwVrx`~KW3*aV<");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFile mockFile0 = new MockFile("muBS'ZvUqtrT");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("2");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("kg>L/tB");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("kg>L/tB");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, false);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      File file0 = MockFile.createTempFile("NK47zwVrx`~KW3*aV<", "NK47zwVrx`~KW3*aV<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NK47zwVrx`~KW3*aV<");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(2048, true);
      jarArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":?P$urbwG'#zzC4EF", ":?P$urbwG'#zzC4EF");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":?P$urbwG'#zzC4EF");
      jarArchiveEntry0.setAlignment(8);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(128L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "'/#&_,%4(<K6dDfti");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
      zipArchiveOutputStream0.close();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I2jJ?nm?f");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut((byte[]) null, (-1), 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1JW^B*uQmj", "Ulj{o1JW^B*uQmj");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":?P$uSbwG'#zzC4F");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":?P$uSbwG'#zzC4F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setMethod(1);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = MockFile.createTempFile("NK437zwVrx`~3a<", "NK437zwVrx`~3a<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NK437zwVrx`~3a<");
      jarArchiveEntry0.setMethod(6);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      File file0 = MockFile.createTempFile("NK437zwVrx`~3a<", "NK437zwVrx`~3a<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NK437zwVrx`~3a<");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("Jm|lYW~H6(pFqCm<f|=", "Jm|lYW~H6(pFqCm<f|=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("UTF8", "UTF8");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(dumpArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(3079);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 3079
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((-3324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -3324
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry((ZipEntry) zipArchiveEntry0);
      jarArchiveEntry0.setCompressedSize(4294967295L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":jP$urbwfG'#zgzC^F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":jP$urbwfG'#zgzC^F");
      jarArchiveEntry0.setCompressedSize(4294967295L);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // :jP$urbwfG'#zgzC^F's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = MockFile.createTempFile("NK437zwVrx`~3a<", "NK437zwVrx`~3a<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NK437zwVrx`~3a<");
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertEquals(45, byteArrayOutputStream0.size());
      assertEquals("PK\u0003\u0004\n\u0000\u0000\b\u0000\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000F\u0000\u0000\u0000NK437zwVrx`~3a<", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" at offeti ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" at offeti ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setSize(4294967296L);
      jarArchiveEntry0.setMethod(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "");
      zipArchiveOutputStream0.setLevel(0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      File file0 = MockFile.createTempFile("NK47zwVrx`~KW3*aV<", "NK47zwVrx`~KW3*aV<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("NK47zwVrx`~KW3*aV<");
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":?P$urbwG'#zzC4EF", ":?P$urbwG'#zzC4EF");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2048);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1JW^B*uQmj", "Ulj{o1JW^B*uQmj");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)24, (byte) (-34));
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertEquals(52L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" atio'I ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" atio'I ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      jarArchiveEntry0.setSize(4294967296L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      File file0 = MockFile.createTempFile("'e(=v'ZuO8(C<~mxD+", "'e(=v'ZuO8(C<~mxD+");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      File file0 = MockFile.createTempFile("@|NK^B3w`]<", "@|NK^B3w`]<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("@|NK^B3w`]<");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(12);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("@|NK^B3w`]<", jarArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      File file0 = MockFile.createTempFile("@|NK^B3w`]<", "@|NK^B3w`]<");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("@|NK^B3w`]<");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setCrc(2048);
      jarArchiveEntry0.setSize(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setCrc(2128L);
      File file0 = MockFile.createTempFile("s_:?P$urbwG'#zzC4F", "s_:?P$urbwG'#zzC4F", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      Stack<FilterInputStream> stack0 = new Stack<FilterInputStream>();
      Enumeration<FilterInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      File file0 = MockFile.createTempFile("Ulj{o1KW^B*uQm", "Ulj{o1KW^B*uQm");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC hecksu forentry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":?P$urbwG'#zzC4EF", ":?P$urbwG'#zzC4EF");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":?P$urbwG'#zzC4EF");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(47L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding((String) null);
      zipArchiveOutputStream0.setEncoding((String) null);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":jP$urbwfG'#zgzC^F");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("not encodeable", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bad CRC checksum for entry ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-3930), (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":?P$urbwG'#zzC4EF", ":?P$urbwG'#zzC4EF");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      File file0 = MockFile.createTempFile("muBS'ZvUqtrT", "muBS'ZvUqtrT");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setFallbackToUTF8(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }
}
