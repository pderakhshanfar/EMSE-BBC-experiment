/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 15:10:00 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile(",g]8PF-", ",g]8PF-");
          assertNotNull(mockFile0);
          
          ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isHidden());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertEquals("/experiment/,g]8PF-/,g]8PF-", mockFile0.toString());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(",g]8PF-", mockFile0.getName());
          assertEquals("/experiment/,g]8PF-", mockFile0.getParent());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertFalse(zipArchiveOutputStream0.isSeekable());
          assertNotNull(zipArchiveOutputStream0);
          
          ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("lZU^^S'J}TW.K");
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.toString());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.getName());
          assertEquals((-1), zipArchiveEntry0.getMethod());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getPlatform());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          assertNotNull(zipArchiveEntry0);
          
          zipArchiveEntry0.setPlatform((-1937));
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.toString());
          assertEquals((-1937), zipArchiveEntry0.getPlatform());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.getName());
          assertEquals((-1), zipArchiveEntry0.getMethod());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          
          zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isHidden());
          assertEquals(43L, mockFile0.length());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertEquals("/experiment/,g]8PF-/,g]8PF-", mockFile0.toString());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(",g]8PF-", mockFile0.getName());
          assertEquals("/experiment/,g]8PF-", mockFile0.getParent());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertFalse(zipArchiveOutputStream0.isSeekable());
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.toString());
          assertEquals((-1937), zipArchiveEntry0.getPlatform());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.getName());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
          
          zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
          assertEquals(8, ZipArchiveOutputStream.DEFLATED);
          assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
          assertEquals(0, ZipArchiveOutputStream.STORED);
          assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
          assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
          assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
          assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
          assertTrue(mockFile0.isFile());
          assertTrue(mockFile0.canRead());
          assertTrue(mockFile0.canWrite());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertTrue(mockFile0.canExecute());
          assertFalse(mockFile0.isHidden());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertTrue(mockFile0.exists());
          assertEquals("/experiment/,g]8PF-/,g]8PF-", mockFile0.toString());
          assertEquals(102L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(",g]8PF-", mockFile0.getName());
          assertEquals("/experiment/,g]8PF-", mockFile0.getParent());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isDirectory());
          assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
          assertEquals(0, zipArchiveOutputStream0.getCount());
          assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
          assertFalse(zipArchiveOutputStream0.isSeekable());
          assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
          assertEquals(0, zipArchiveEntry0.getVersionRequired());
          assertFalse(zipArchiveEntry0.isDirectory());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.toString());
          assertEquals((-1937), zipArchiveEntry0.getPlatform());
          assertEquals(8, zipArchiveEntry0.getMethod());
          assertEquals(0, zipArchiveEntry0.getRawFlag());
          assertEquals((-1L), zipArchiveEntry0.getCrc());
          assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.getName());
          assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
          assertNull(zipArchiveEntry0.getComment());
          assertEquals((-1L), zipArchiveEntry0.getSize());
          assertFalse(zipArchiveEntry0.isStreamContiguous());
          assertEquals(0, zipArchiveEntry0.getUnixMode());
          assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
          assertEquals((-1L), zipArchiveEntry0.getDataOffset());
          assertFalse(zipArchiveEntry0.isUnixSymlink());
          assertEquals(0, zipArchiveEntry0.getInternalAttributes());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption", "encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveEntry0.setSize(4294967321L);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(4294967321L, zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption", "encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("encryption", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveEntry0.setMethod(2048);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(2048, zipArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("encryption", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(2048, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setLevel(8);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setLevel(9);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("I");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("I", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("I", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNotNull(jarArchiveEntry0);
      
      MockFile mockFile0 = new MockFile("I", "I");
      assertNotNull(mockFile0);
      
      jarArchiveEntry0.setCompressedSize(4294967295L);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("I", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("I", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(4294967295L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/I/I", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/I", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("I", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // I's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNotNull(jarArchiveEntry0);
      
      jarArchiveEntry0.setTime((-1193L));
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(118L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "encryption");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(40L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      
      zipArchiveEntry0.setSize(4294967295L);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(40L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(4294967295L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("encryption");
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(7163L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(7021, zipArchiveOutputStream0.getCount());
      assertEquals(7021L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(23, mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("o");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("o", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("o", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertNotNull(jarArchiveEntry0);
      
      MockFile mockFile0 = new MockFile("o", "o");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("o", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/o/o", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/o", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("o", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("o", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("o", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(31L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/o/o", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/o", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("o", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("o", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("o", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/o/o", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/o", mockFile0.getParent());
      assertEquals(80L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      jarArchiveEntry0.setCompressedSize((-2466L));
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-2466L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("o", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("o", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(4L, fileChannel0.size());
      assertEquals(4L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("archive's size exceeds the limit of 4GByte.", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)6, 6);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("encryption0encryption", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("encryption0encryption", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("encryption0encryption", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("encryption0encryption", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveOutputStream0.getEncoding());
      
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFile mockFile0 = new MockFile("22aC$U>f", "22aC$U>f");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "22aC$U>f");
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("22aC$U>f", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("22aC$U>f", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertEquals(38L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("22aC$U>f", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("22aC$U>f", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "T'?");
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertEquals(38L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals(38L, zipArchiveEntry1.getSize());
      assertEquals("T'?", zipArchiveEntry1.toString());
      assertEquals("T'?", zipArchiveEntry1.getName());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertNotNull(zipArchiveEntry1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("/", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("/", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertTrue(zipArchiveEntry0.isDirectory());
      assertNotNull(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Alignment must be between 0 and 0x7fff, was: ", "Alignment must be between 0 and 0x7fff, was: ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Alignment must be between 0 and 0x7fff, was: /Alignment must be between 0 and 0x7fff, was: ", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/Alignment must be between 0 and 0x7fff, was: ", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Alignment must be between 0 and 0x7fff, was: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 2875, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 18, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("AsNeeded", "AsNeeded");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/AsNeeded/AsNeeded", mockFile0.toString());
      assertEquals("/experiment/AsNeeded", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("AsNeeded", mockFile0.getName());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte) (-54), (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",g]8PF-");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(mockFile0.canRead());
      assertEquals(",g]8PF-", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 8, 362);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("6m/nh.=n*>F~M", false);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",g]8PF-");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",g]8PF-", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(mockFile0.isDirectory());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding("always");
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(mockFile0.isDirectory());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("always", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNotNull(jarArchiveEntry0);
      
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "encryption");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("encryption", mockFile0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(mockFile0.isDirectory());
      assertEquals(40L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("encryption", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      
      boolean boolean0 = mockFile0.delete();
      assertTrue(boolean0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("encryption", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals("encryption", mockFile0.getName());
      
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      File file0 = MockFile.createTempFile("Alignment must be between 0 and 0x7fff, was: ", ";jcQ#^uQ:[[:y@B");
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/Alignment must be between 0 and 0x7fff, was: 0;jcQ#^uQ:[[:y@B", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Alignment must be between 0 and 0x7fff, was: 0;jcQ#^uQ:[[:y@B", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/Alignment must be between 0 and 0x7fff, was: 0;jcQ#^uQ:[[:y@B", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("Alignment must be between 0 and 0x7fff, was: 0;jcQ#^uQ:[[:y@B", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("encryption", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "encryption");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("encryption", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(40L, mockFile0.length());
      assertEquals("encryption", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("encryption", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(4965L, mockFile0.length());
      assertEquals("encryption", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("encryption", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(4851, zipArchiveOutputStream0.getCount());
      assertEquals(4851L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(15, mockFileInputStream0.available());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(4965L, mockFile0.length());
      assertEquals("encryption", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("encryption", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(4851, zipArchiveOutputStream0.getCount());
      assertEquals(4851L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",g]8PF-", ",g]8PF-");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/,g]8PF-/,g]8PF-", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/,g]8PF-", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("lZU^^S'J}TW.K");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.getName());
      assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(43L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/,g]8PF-/,g]8PF-", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/,g]8PF-", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.getName());
      assertEquals("lZU^^S'J}TW.K", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      
      boolean boolean0 = mockFile0.setWritable(false);
      assertTrue(boolean0);
      assertEquals(43L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/,g]8PF-/,g]8PF-", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/,g]8PF-", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",g]8PF-");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",g]8PF-", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(",g]8PF-", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, mockFile0.length());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding("always");
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, mockFile0.length());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("always", zipArchiveOutputStream0.getEncoding());
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("archive's size exceeds the limit of 4GByte.", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "encryption");
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.setMethod(3);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(3, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      byte[] byteArray0 = new byte[5];
      try { 
        zipArchiveOutputStream0.write(byteArray0, 42, 31);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry encryption
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4hM[5a6z,5FG");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("4hM[5a6z,5FG", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("4hM[5a6z,5FG", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("'evB!");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("'evB!", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("'evB!", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(35L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("4hM[5a6z,5FG", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("4hM[5a6z,5FG", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("'evB!", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("'evB!", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, (-36), (-36));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("22aC$U>f", "22aC$U>f");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "bD5t^#|F!;r1==\u0003.rh");
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("bD5t^#|F!;r1==\u0003.rh", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("bD5t^#|F!;r1==\u0003.rh", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(48L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("bD5t^#|F!;r1==\u0003.rh", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("bD5t^#|F!;r1==\u0003.rh", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, 2162, (int) (byte) (-72));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(mockFile0.canWrite());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("22aC$U>f", "22aC$U>f");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.setMethod(3);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(30L, mockFile0.length());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(3, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      File file0 = MockFile.createTempFile("Stream has already been finished", "");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/Stream has already been finished0", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("Stream has already been finished0", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, "mf.!}G");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/Stream has already been finished0", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals("Stream has already been finished0", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp", file0.getParent());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("mf.!}G", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("mf.!}G", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNotNull(zipArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(file0, "encryption");
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.destroy();
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("not encodeable");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("not encodeable", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("not encodeable", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encryption");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNotNull(jarArchiveEntry0);
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertNotNull(resourceAlignmentExtraField0);
      
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4hM[5a6z,5FG");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals("4hM[5a6z,5FG", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("4hM[5a6z,5FG", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("4hM[5a6z,5FG", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("4hM[5a6z,5FG", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotNull(zipArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setMethod((-1));
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("*?nW&/");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals("*?nW&/", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("*?nW&/", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertTrue(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertNotNull(zipArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry((String) null, "");
      assertEquals(DumpArchiveEntry.TYPE.UNKNOWN, dumpArchiveEntry0.getType());
      assertNull(dumpArchiveEntry0.toString());
      assertNull(dumpArchiveEntry0.getName());
      assertFalse(dumpArchiveEntry0.isFifo());
      assertEquals(0, dumpArchiveEntry0.getGroupId());
      assertEquals(0, dumpArchiveEntry0.getUserId());
      assertFalse(dumpArchiveEntry0.isDeleted());
      assertFalse(dumpArchiveEntry0.isBlkDev());
      assertFalse(dumpArchiveEntry0.isSocket());
      assertEquals(0, dumpArchiveEntry0.getMode());
      assertEquals("", dumpArchiveEntry0.getSimpleName());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertEquals(0, dumpArchiveEntry0.getGeneration());
      assertFalse(dumpArchiveEntry0.isChrDev());
      assertFalse(dumpArchiveEntry0.isFile());
      assertEquals(0, dumpArchiveEntry0.getNlink());
      assertFalse(dumpArchiveEntry0.isDirectory());
      assertEquals(0, dumpArchiveEntry0.getVolume());
      assertEquals(0L, dumpArchiveEntry0.getSize());
      assertNotNull(dumpArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(dumpArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.dump.DumpArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.setEncoding("encryption");
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7'@x", true);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      mockFileOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",g]8PF-");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(mockFile0.canExecute());
      assertEquals(",g]8PF-", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(mockFile0.canExecute());
      assertEquals(",g]8PF-", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(",g]8PF-", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding("GNU.sparse.realsize");
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("GNU.sparse.realsize", zipArchiveOutputStream0.getEncoding());
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Too short content for ResourceAlignmentExtraField (0xa11e): ", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        zipArchiveOutputStream0.destroy();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryptio", "encryptio");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/encryptio", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/encryptio/encryptio", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals("encryptio", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption", "-q>P8a./jC(D]UK");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("jC(D]UK", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption/-q>P8a.", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/encryption/-q>P8a./jC(D]UK", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("-q>P8a./jC(D]UK");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("-q>P8a./jC(D]UK", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("-q>P8a./jC(D]UK", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.setMethod(3);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("jC(D]UK", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption/-q>P8a.", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/encryption/-q>P8a./jC(D]UK", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals("jC(D]UK", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption/-q>P8a.", mockFile0.getParent());
      assertEquals(45L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/encryption/-q>P8a./jC(D]UK", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("-q>P8a./jC(D]UK", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(3, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("-q>P8a./jC(D]UK", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_2' used in entry -q>P8a./jC(D]UK
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("windows");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("windows", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("windows", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(zipArchiveOutputStream0, false);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("windows", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("windows", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(bufferedOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("windows", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("windows", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(filterOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(filterOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("windows", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("windows", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      File file0 = MockFile.createTempFile("Alignment must be between 0 and 0x7fff, was: ", "Alignment must be between 0 and 0x7fff, was: ");
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Alignment must be between 0 and 0x7fff, was: 0Alignment must be between 0 and 0x7fff, was: ", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("Alignment must be between 0 and 0x7fff, was: 0Alignment must be between 0 and 0x7fff, was: ", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Alignment must be between 0 and 0x7fff, was: 0Alignment must be between 0 and 0x7fff, was: ", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("Alignment must be between 0 and 0x7fff, was: 0Alignment must be between 0 and 0x7fff, was: ", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding("always");
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/Alignment must be between 0 and 0x7fff, was: 0Alignment must be between 0 and 0x7fff, was: ", file0.toString());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals("Alignment must be between 0 and 0x7fff, was: 0Alignment must be between 0 and 0x7fff, was: ", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("always", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("encryption", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("encryption", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encryption");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNotNull(jarArchiveEntry0);
      
      jarArchiveEntry0.setMethod(38);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(38, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry encryption
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      File file0 = MockFile.createTempFile("encrjp@tion", "encrjp@tion");
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("encrjp@tion0encrjp@tion", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/encrjp@tion0encrjp@tion", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("encrjp@tion0encrjp@tion", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/encrjp@tion0encrjp@tion", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encrjp@tion");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("encrjp@tion", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("encrjp@tion", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.setMethod(0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("encrjp@tion0encrjp@tion", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/encrjp@tion0encrjp@tion", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("encrjp@tion0encrjp@tion", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/encrjp@tion0encrjp@tion", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("encrjp@tion", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("encrjp@tion", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("encrjp@tion0encrjp@tion", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/encrjp@tion0encrjp@tion", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertNotNull(zipArchiveOutputStream1);
      
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotNull(zipArchiveEntry0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(30L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encryption");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      
      zipArchiveOutputStream0.destroy();
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("J-");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("J-", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("J-", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNotNull(zipArchiveEntry0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("enc&yption");
      assertNotNull(mockFile0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("enc&yption");
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("enc&yption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("enc&yption", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNotNull(jarArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("enc&yption", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("enc&yption", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(40L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("enc&yption", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("enc&yption", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("enc&yption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("enc&yption", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1125), 8);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encryption");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("encryption", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("encryption", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      
      byte[] byteArray0 = new byte[2];
      zipArchiveOutputStream0.setEncoding("encryption");
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("encryption", zipArchiveOutputStream0.getEncoding());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" \u0000", "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption", "encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals("encryption", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNotNull(zipArchiveEntry0);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals("encryption", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("encryption", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(50L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, sequenceInputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("encryption", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(150L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("encryption", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/encryption", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(224L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/encryption/encryption", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFile mockFile0 = new MockFile("22aC$U>f", "22aC$U>f");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertNotNull(zipArchiveEntry0);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(50L, mockFile0.length());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFile0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertNotNull(zipArchiveOutputStream1);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(126L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      
      zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/22aC$U>f/22aC$U>f", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(126L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("22aC$U>f", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/22aC$U>f", mockFile0.getParent());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(1, zipArchiveOutputStream1.getCount());
      assertEquals(1L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      
      byte[] byteArray0 = new byte[5];
      zipArchiveOutputStream0.write(byteArray0, (int) (byte)4, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("encryption0encryption", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte) (-62), (int) (byte) (-32));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("encryption", mockFile0.toString());
      assertEquals("encryption", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("encryption");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(40L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("encryption", mockFile0.toString());
      assertEquals("encryption", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("encryption", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("encryption", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      assertFalse(file0.isDirectory());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(file0.isDirectory());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.finished = true;
      assertFalse(file0.isDirectory());
      assertEquals("encryption0encryption", file0.getName());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/encryption0encryption", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      try { 
        zipArchiveOutputStream0.createArchiveEntry(file0, "encryption");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("encryption", mockFile0.toString());
      assertEquals("encryption", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals("encryption", mockFile0.toString());
      assertEquals("encryption", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertNotNull(zipArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFile mockFile0 = new MockFile("2aC$U>uf", "2aC$U>uf");
      assertNotNull(mockFile0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/2aC$U>uf/2aC$U>uf", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("2aC$U>uf", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/2aC$U>uf", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNotNull(zipArchiveOutputStream0);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/2aC$U>uf/2aC$U>uf", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("2aC$U>uf", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/2aC$U>uf", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/experiment/2aC$U>uf/2aC$U>uf", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("2aC$U>uf", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/2aC$U>uf", mockFile0.getParent());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=>y%");
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("=>y%", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("=>y%", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNotNull(jarArchiveEntry0);
      
      MockFile mockFile0 = new MockFile("=>y%", "=>y%");
      assertNotNull(mockFile0);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("=>y%", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("=>y%", jarArchiveEntry0.toString());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals("/experiment/=>y%", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals("=>y%", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/=>y%/=>y%", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("=>y%", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("=>y%", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals("/experiment/=>y%", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals("=>y%", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/=>y%/=>y%", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(54L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("=>y%", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("=>y%", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals("/experiment/=>y%", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals("=>y%", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/=>y%/=>y%", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(124L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFile mockFile0 = new MockFile(",g]8PF-", ",g]8PF-");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("lZU^^S'J}TW.K");
      zipArchiveEntry0.setComment(",g]8PF-");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(109L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("i}%![Z!6@Y 8", "i}%![Z!6@Y 8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setSize(4294967295L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (xa11e): ", "Too short content for ResourceAlignmentExtraField (xa11e): ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Too short content for ResourceAlignmentExtraField (xa11e): ");
      jarArchiveEntry0.setComment("Too short content for ResourceAlignmentExtraField (xa11e): ");
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFile mockFile0 = new MockFile("22aC$U>f", "22aC$U>f");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      jarArchiveEntry0.setComment("");
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("encryption");
      zipArchiveEntry0.setComment("8");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (xa11e): ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Too short content for ResourceAlignmentExtraField (xa11e): ");
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(157L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("D'encrjp@&i=", "D'encrjp@&i=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("D'encrjp@&i=");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(2048, true);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encryptio");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true, 3);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      MockFile mockFile0 = new MockFile("encryptio", "encryptio");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(39L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      File file0 = MockFile.createTempFile("not encodeable", "not encodeable");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("e.xymXh]OiQ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("M\"Q-");
      jarArchiveEntry0.setAlignment(2);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      File file0 = MockFile.createTempFile("LtQc}", "LtQc}");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("lZU^^S'J}TW.K");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFile mockFile0 = new MockFile("22aC$U>f", "22aC$U>f");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, "bD5t^#|F!;r1==\u0003.rh");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(archiveEntry0);
      assertEquals(48L, mockFile0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFile mockFile0 = new MockFile("mfMS");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setMethod(1);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "mfMS");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals(1, zipArchiveEntry0.getMethod());
      assertEquals(34L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      File file0 = MockFile.createTempFile("Alignment must be between 0 and 0x7fff, was: ", "Alignment must be between 0 and 0x7fff, was: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bD5t^#|F!;r1==\u0003.rh");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("Too short content for ResourceAlignmentExtraField (0xa11e): ", 2048);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(arArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No current entry to close");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(2368);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 2368
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((-957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -957
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("lZU^^S'J}TW.K");
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("I");
      MockFile mockFile0 = new MockFile("I");
      jarArchiveEntry0.setCompressedSize(4294967312L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // I's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("=>y%");
      jarArchiveEntry0.setSize(1370L);
      MockFile mockFile0 = new MockFile("=>y%", "=>y%");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setMethod(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4hM[5a6z,5FG");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setLevel(8);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("4hM[5a6z,5FG");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(42L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setMethod(0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "encryption");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setSize(1095216660480L);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("encryption");
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      assertEquals(15752L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(file0, "encryption");
      zipArchiveOutputStream0.finished = true;
      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "encryption");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setSize(1095216660480L);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("encryption");
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      File file0 = MockFile.createTempFile("zNDBT:", "zNDBT:");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("zNDBT:");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad size for entry zNDBT:: 56 instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      File file0 = MockFile.createTempFile("encrjp@tion", (String) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encrjp@tion");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream1.closeArchiveEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry encrjp@tion: 15948ef4 instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = MockFile.createTempFile("encryption", "encryption");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("encryption");
      zipArchiveOutputStream0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(80, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ", "Too short content for ResourceAlignmentExtraField (0xa11e): ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      File file0 = MockFile.createTempFile(" instead of ", "USER_WRITE");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
      zipArchiveOutputStream0.finish();
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.setEncoding((String) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Too short content for ResourceAlignmentExtraField (0xa11e): ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFile mockFile0 = new MockFile("encmGrytion", "encmGrytion");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.setEncoding("AES192");
      zipArchiveOutputStream0.setEncoding("encmGrytion");
      assertEquals("encmGrytion", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("always", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(": ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setComment("");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFile mockFile0 = new MockFile("No current entry to close");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }
}
