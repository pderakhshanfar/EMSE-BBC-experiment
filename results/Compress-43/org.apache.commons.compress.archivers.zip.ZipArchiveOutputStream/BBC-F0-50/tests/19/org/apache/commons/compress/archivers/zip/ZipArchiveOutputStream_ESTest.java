/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 22:22:10 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      
      zipArchiveEntry0.setPlatform(3);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(3, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.closeArchiveEntry();
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(48, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.finish();
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0003\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000.\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(116, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("tar\u0000");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("tar\u0000", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("tar\u0000", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      
      jarArchiveEntry0.setMethod(3105);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("tar\u0000", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(3105, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("tar\u0000", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("tar\u0000", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(3105, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("tar\u0000", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      File file0 = MockFile.createTempFile(">)-=G!", ">)-=G!");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/>)-=G!0>)-=G!", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(">)-=G!0>)-=G!", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ">~ kj}.Yj");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/>)-=G!0>)-=G!", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(">)-=G!0>)-=G!", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.toString());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[9];
      zipExtraFieldArray0[0] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[1] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[3] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[4] = (ZipExtraField) resourceAlignmentExtraField0;
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      assertNotNull(x000A_NTFS0);
      
      zipExtraFieldArray0[5] = (ZipExtraField) x000A_NTFS0;
      zipExtraFieldArray0[6] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[7] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[8] = (ZipExtraField) resourceAlignmentExtraField0;
      zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals(9, zipExtraFieldArray0.length);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/>)-=G!0>)-=G!", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertEquals(">)-=G!0>)-=G!", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.toString());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.setLevel(3);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.setLevel(0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      zipArchiveOutputStream0.setLevel(9);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      
      zipArchiveEntry0.setCompressedSize(4294967295L);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(4294967295L, zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // 's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("nc%)u!yM/E4U");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      
      jarArchiveEntry0.setSize(4294967295L);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(4294967295L, jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\f\u0000\u0014\u0000nc%)u!yM/E4U\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(62, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(4294967295L, jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      
      zipArchiveEntry0.setTime((-51L));
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(78, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getSize());
      
      zipArchiveEntry0.setMethod(0);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getSize());
      
      zipArchiveEntry0.setSize(101075792L);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(101075792L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
       //  fail("Expecting exception: ZipException");
       // Unstable assertion
      } catch(ZipException e) {
         //
         // bad size for entry : 101075792 instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      
      byteArrayOutputStream0.writeTo(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000c```\u0010a\uFFFD\uFFFD\uFFFD`X\uFFFD\uFFFD\uFFFD\uFFFD\u0001\r\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0013\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(95, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(30L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(19L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(2296550133L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      
      zipArchiveEntry0.setMethod(0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(30L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(19L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(2296550133L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
       //  fail("Expecting exception: ZipException");
       // Unstable assertion
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry : 88e292f5 instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(78, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      
      zipArchiveEntry0.setCompressedSize((-810L));
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-810L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      //  // Unstable assertion: assertNotNull(fileDescriptor0);
      //  // Unstable assertion: assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      //  // Unstable assertion: assertNotNull(mockFileInputStream0);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 236);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      byte[] byteArray0 = new byte[0];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CHRDEtV");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(22L, fileChannel0.position());
      assertEquals(22L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      
      byte[] byteArray0 = new byte[0];
      zipArchiveOutputStream0.write(byteArray0, 0, 0);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fXK4Q(H1wjx`50/I");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      byte[] byteArray0 = new byte[5];
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)16, (-3001));
      assertEquals(5, byteArray0.length);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(60, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertNull(string0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(30L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "Lj\"#hJ8'i+INE~K{");
      assertNotNull(zipArchiveEntry1);
      assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(30L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry1.isUnixSymlink());
      assertFalse(zipArchiveEntry1.isDirectory());
      assertFalse(zipArchiveEntry1.isStreamContiguous());
      assertEquals("Lj\"#hJ8'i+INE~K{", zipArchiveEntry1.toString());
      assertEquals(0, zipArchiveEntry1.getPlatform());
      assertEquals((-1), zipArchiveEntry1.getMethod());
      assertEquals(0, zipArchiveEntry1.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
      assertEquals("Lj\"#hJ8'i+INE~K{", zipArchiveEntry1.getName());
      assertEquals((-1L), zipArchiveEntry1.getDataOffset());
      assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
      assertEquals(30L, zipArchiveEntry1.getSize());
      assertEquals(0, zipArchiveEntry1.getUnixMode());
      assertEquals(0, zipArchiveEntry1.getRawFlag());
      assertEquals((-1L), zipArchiveEntry1.getCrc());
      assertNull(zipArchiveEntry1.getComment());
      assertEquals(0, zipArchiveEntry1.getInternalAttributes());
      assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      assertNotNull(zipArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("/", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertTrue(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("/", zipArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("/GQ!usj/=qD$>");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("/GQ!usj/=qD$>");
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("/GQ!usj/=qD$>", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("/GQ!usj/=qD$>", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertTrue(fileChannel0.isOpen());
      assertEquals(63L, fileChannel0.position());
      assertEquals(63L, fileChannel0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("/GQ!usj/=qD$>", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("/GQ!usj/=qD$>", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertTrue(fileChannel0.isOpen());
      assertEquals(63L, fileChannel0.position());
      assertEquals(63L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      zipArchiveOutputStream1.close();
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      try { 
        zipArchiveOutputStream0.writeZip64CentralDirectory();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.PKWareExtraHeader");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 4, 22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 65535, (byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 236);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 809, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\"Zj}SJ&", "-h};N{6e-#26$,@z}");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/\"Zj}SJ&", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/\"Zj}SJ&/-h};N{6e-#26$,@z}", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("-h};N{6e-#26$,@z}", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/\"Zj}SJ&", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/\"Zj}SJ&/-h};N{6e-#26$,@z}", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("-h};N{6e-#26$,@z}", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.close();
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/\"Zj}SJ&", mockFile0.getParent());
      assertEquals(22L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/\"Zj}SJ&/-h};N{6e-#26$,@z}", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("-h};N{6e-#26$,@z}", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      byte[] byteArray0 = new byte[7];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AES_ENCRYPTED");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES_ENCRYPTED");
      assertNotNull(jarArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      
      zipArchiveOutputStream0.setEncoding("AES_ENCRYPTED");
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("AES_ENCRYPTED", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      
      zipArchiveOutputStream0.setEncoding("ZtLrE");
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("ZtLrE", zipArchiveOutputStream0.getEncoding());
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
       //  fail("Expecting exception: UnsupportedEncodingException");
       // Unstable assertion
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = MockFile.createTempFile("crc checksum is required for STORED method when not writing to a file", "crc checksum is required for STORED method when not writing to a file");
      assertNotNull(file0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":,C:XG6q8v-d", ":,C:XG6q8v-d");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/:,C:XG6q8v-d/:,C:XG6q8v-d", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(":,C:XG6q8v-d", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/:,C:XG6q8v-d", mockFile0.getParent());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/:,C:XG6q8v-d/:,C:XG6q8v-d", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(":,C:XG6q8v-d", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/:,C:XG6q8v-d", mockFile0.getParent());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.close();
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/:,C:XG6q8v-d/:,C:XG6q8v-d", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(22L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(":,C:XG6q8v-d", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/:,C:XG6q8v-d", mockFile0.getParent());
      assertFalse(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.setEncoding("Il");
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("Il", zipArchiveOutputStream0.getEncoding());
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.setMethod(2);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(2, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      
      byte[] byteArray0 = new byte[5];
      try { 
        zipArchiveOutputStream0.write(byteArray0, 36864, 2);
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_1' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)42, 1800);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.setMethod(2);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(2, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("tZ?{q", (byte) (-109));
      //  // Unstable assertion: assertNotNull(tarArchiveEntry0);
      //  // Unstable assertion: assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      //  // Unstable assertion: assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      //  // Unstable assertion: assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      //  // Unstable assertion: assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isPaxHeader());
      //  // Unstable assertion: assertEquals(0L, tarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isBlockDevice());
      //  // Unstable assertion: assertEquals(0L, tarArchiveEntry0.getLongUserId());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", tarArchiveEntry0.getGroupName());
      //  // Unstable assertion: assertEquals(0, tarArchiveEntry0.getUserId());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isStarSparse());
      //  // Unstable assertion: assertEquals(0, tarArchiveEntry0.getDevMinor());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isExtended());
      //  // Unstable assertion: assertEquals("tZ?{q", tarArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isOldGNUSparse());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isSymbolicLink());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isFIFO());
      //  // Unstable assertion: assertEquals(0L, tarArchiveEntry0.getLongGroupId());
      //  // Unstable assertion: assertEquals(0, tarArchiveEntry0.getGroupId());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isSparse());
      //  // Unstable assertion: assertTrue(tarArchiveEntry0.isFile());
      //  // Unstable assertion: assertEquals("", tarArchiveEntry0.getLinkName());
      //  // Unstable assertion: assertEquals("", tarArchiveEntry0.getUserName());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isCharacterDevice());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isGNUSparse());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      //  // Unstable assertion: assertEquals(0L, tarArchiveEntry0.getRealSize());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isPaxGNUSparse());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isLink());
      //  // Unstable assertion: assertEquals(0, tarArchiveEntry0.getDevMajor());
      //  // Unstable assertion: assertFalse(tarArchiveEntry0.isCheckSumOK());
      //  // Unstable assertion: assertEquals(33188, tarArchiveEntry0.getMode());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_1' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hp7iWej^!P", false);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.destroy();
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      File file0 = MockFile.createTempFile(">)-=G!", ">)-=G!");
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(">)-=G!0>)-=G!", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/>)-=G!0>)-=G!", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(file0, ">~ kj}.Yj");
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(">)-=G!0>)-=G!", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/>)-=G!0>)-=G!", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(">)-=G!0>)-=G!", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/>)-=G!0>)-=G!", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(">~ kj}.Yj", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.setMethod((-1));
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      assertNotNull(dumpArchiveEntry0);
      assertEquals(0, dumpArchiveEntry0.getGroupId());
      assertFalse(dumpArchiveEntry0.isFile());
      assertFalse(dumpArchiveEntry0.isBlkDev());
      assertFalse(dumpArchiveEntry0.isDeleted());
      assertEquals(0, dumpArchiveEntry0.getVolume());
      assertEquals(0, dumpArchiveEntry0.getNlink());
      assertEquals(0L, dumpArchiveEntry0.getSize());
      assertNull(dumpArchiveEntry0.getSimpleName());
      assertFalse(dumpArchiveEntry0.isFifo());
      assertEquals(0, dumpArchiveEntry0.getGeneration());
      assertEquals(0, dumpArchiveEntry0.getUserId());
      assertFalse(dumpArchiveEntry0.isDirectory());
      assertNull(dumpArchiveEntry0.getName());
      assertFalse(dumpArchiveEntry0.isChrDev());
      assertEquals(0L, dumpArchiveEntry0.getOffset());
      assertFalse(dumpArchiveEntry0.isSocket());
      assertEquals(0, dumpArchiveEntry0.getMode());
      assertEquals(DumpArchiveEntry.TYPE.UNKNOWN, dumpArchiveEntry0.getType());
      assertNull(dumpArchiveEntry0.toString());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(dumpArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.dump.DumpArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      zipArchiveOutputStream0.setEncoding("RVCZt6_2");
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("RVCZt6_2", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(50, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      
      Zip64Mode zip64Mode1 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode1);
      //  // Unstable assertion: assertNotSame(zip64Mode1, zip64Mode0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(50, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertFalse(zip64Mode1.equals((Object)zip64Mode0));
      
      zipArchiveOutputStream0.closeArchiveEntry();
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(76, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      try { 
        zipArchiveOutputStream0.finish();
       //  fail("Expecting exception: Zip64RequiredException");
       // Unstable assertion
      } catch(Zip64RequiredException e) {
         //
         // archive's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.setMethod(1796);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0004\u0007\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(1796, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0004\u0007\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      try { 
        zipArchiveOutputStream1.finish();
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      zipArchiveOutputStream0.setEncoding("w");
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("w", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry((File) null, "not encodeable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.setMethod(2);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(2, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_1' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      zipArchiveEntry0.setMethod(0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
       //  fail("Expecting exception: ZipException");
       // Unstable assertion
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry : ffffffffffffffff instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.setMethod(2);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(2, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      try { 
        zipArchiveOutputStream1.close();
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_1' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      
      zipArchiveOutputStream0.setMethod(2);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(2, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_1' used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveEntry0.setMethod(0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      //  // Unstable assertion: assertNotNull(fileDescriptor0);
      //  // Unstable assertion: assertFalse(fileDescriptor0.valid());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      //  // Unstable assertion: assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      //  // Unstable assertion: assertNotNull(fileChannel0);
      //  // Unstable assertion: assertFalse(fileDescriptor0.valid());
      //  // Unstable assertion: assertTrue(fileChannel0.isOpen());
      //  // Unstable assertion: assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertFalse(fileDescriptor0.valid());
      //  // Unstable assertion: assertTrue(fileChannel0.isOpen());
      //  // Unstable assertion: assertEquals(0L, fileChannel0.position());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertTrue(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
       //  fail("Expecting exception: NonWritableChannelException");
       // Unstable assertion
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      File file0 = MockFile.createTempFile("UTF8", "5vT/*7pn", (File) null);
      //  // Unstable assertion: assertNotNull(file0);
      //  // Unstable assertion: assertEquals("*7pn", file0.getName());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals("/tmp/UTF805vT", file0.getParent());
      //  // Unstable assertion: assertEquals("/tmp/UTF805vT/*7pn", file0.toString());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      //  // Unstable assertion: assertNotNull(mockFileInputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream2);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream2.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream2.isSeekable());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("", zipArchiveEntry0.getName());
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1249), 0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(1, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AES_ENCRYPTED");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertTrue(fileChannel0.isOpen());
      assertEquals(50L, fileChannel0.position());
      assertEquals(50L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      zipArchiveOutputStream0.setEncoding("AES_ENCRYPTED");
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertTrue(fileChannel0.isOpen());
      assertEquals(50L, fileChannel0.position());
      assertEquals(50L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("AES_ENCRYPTED", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      File file0 = MockFile.createTempFile("tar\u0000", "tar\u0000", (File) null);
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("tar\u00000tar\u0000", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/tar\u00000tar\u0000", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(50, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveOutputStream0.closeArchiveEntry();
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(76, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(150, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, 85, 730);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte)91, (int) (byte)91);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(78, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      File file0 = MockFile.createTempFile("UTF8", ", name=", (File) null);
      //  // Unstable assertion: assertNotNull(file0);
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertEquals("/tmp", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertEquals("UTF80, name=", file0.getName());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertEquals("/tmp/UTF80, name=", file0.toString());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      //  // Unstable assertion: assertNotNull(mockFileInputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(78, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      
      zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      //  // Unstable assertion: assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(2L, zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(108, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertTrue(file0.canRead());
      //  // Unstable assertion: assertEquals("/tmp", file0.getParent());
      //  // Unstable assertion: assertTrue(file0.canWrite());
      //  // Unstable assertion: assertTrue(file0.canExecute());
      //  // Unstable assertion: assertTrue(file0.isFile());
      //  // Unstable assertion: assertEquals("UTF80, name=", file0.getName());
      //  // Unstable assertion: assertTrue(file0.exists());
      //  // Unstable assertion: assertEquals(0L, file0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, file0.lastModified());
      //  // Unstable assertion: assertFalse(file0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, file0.getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, file0.length());
      //  // Unstable assertion: assertEquals("/tmp/UTF80, name=", file0.toString());
      //  // Unstable assertion: assertFalse(file0.isHidden());
      //  // Unstable assertion: assertTrue(file0.isAbsolute());
      //  // Unstable assertion: assertEquals(0L, file0.getUsableSpace());
      //  // Unstable assertion: assertEquals((-1), mockFileInputStream0.available());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(30L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("foo.bar", mockFile0.getName());
      assertEquals("/tmp", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.finished = true;
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      
      zipArchiveOutputStream0.closeArchiveEntry();
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(48, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.finish();
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000.\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(116, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AES_ENCRYPTED");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES_ENCRYPTED");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      
      jarArchiveEntry0.setComment("AES_ENCRYPTED");
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.toString());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertTrue(fileChannel0.isOpen());
      assertEquals(63L, fileChannel0.size());
      assertEquals(63L, fileChannel0.position());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(139L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(139L, fileChannel0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("AES_ENCRYPTED", jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("crc checksum is required for STORED method when not writing to a file");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("crc checksum is required for STORED method when not writing to a file");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("crc checksum is required for STORED method when not writing to a file", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("crc checksum is required for STORED method when not writing to a file", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(119L, fileChannel0.position());
      assertEquals(119L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("crc checksum is required for STORED method when not writing to a file", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("crc checksum is required for STORED method when not writing to a file", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(119L, fileChannel0.position());
      assertEquals(119L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // archive's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0018\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(104, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      
      jarArchiveEntry0.setComment("&WIH<2tsusK}J");
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("&WIH<2tsusK}J", jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0000w\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicyup]\u0000\u0001\uFFFD\u0001\uFFFDaorg.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicyuc\u0012\u0000\u0001_@\uFFFD\uFFFD&WIH<2tsusK}J", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(237, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("&WIH<2tsusK}J", jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveEntry0.setComment("");
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      
      zipArchiveEntry0.setComment("&WIH<2tsusK}J");
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("&WIH<2tsusK}J", zipArchiveEntry0.getComment());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("&WIH<2tsusK}J", zipArchiveEntry0.getComment());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(215, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0000a\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicyup]\u0000\u0001\uFFFD\u0001\uFFFDaorg.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      MockFile mockFile0 = new MockFile(">)-=G!", ">)-=G!");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, ">~ k./j");
      assertNotNull(zipArchiveEntry0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/>)-=G!", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/>)-=G!/>)-=G!", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(">)-=G!", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(">~ k./j", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(">~ k./j", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(2048, true);
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)2048, resourceAlignmentExtraField0.getAlignment());
      
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/>)-=G!", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/>)-=G!/>)-=G!", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(">)-=G!", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(">~ k./j", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(">~ k./j", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)2048, resourceAlignmentExtraField0.getAlignment());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
      //  // Unstable assertion: assertNotNull(resourceAlignmentExtraField0);
      //  // Unstable assertion: assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      //  // Unstable assertion: assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      //  // Unstable assertion: assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      //  // Unstable assertion: assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      //  // Unstable assertion: assertNotNull(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveEntry0.setAlignment(8);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1), zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u001E\uFFFD\u0006\u0000\b\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(40, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", zipArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertFalse(zipArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(8, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), zipArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(zipArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, zipArchiveEntry0.getInternalAttributes());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      
      zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      
      zipArchiveEntry0.setMethod(8730);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(8730, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals("", zipArchiveEntry0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      
      zipArchiveOutputStream0.flush();
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      
      zipArchiveOutputStream0.flush();
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("fXK4Q(H1wjx`50/I");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.close();
      zipArchiveOutputStream0.close();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(1);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals(1, zipArchiveEntry0.getMethod());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(6);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      //  // Unstable assertion: assertEquals(6, zipArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0006\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Dly\"8(", (byte)16);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(tarArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(36);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 36
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((-718));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -718
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setMethod(646);
      zipArchiveEntry0.setCompressedSize(71776119061217280L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("never");
      jarArchiveEntry0.setSize(5816858572800000L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setMethod(0);
      MockFile mockFile0 = new MockFile("P.N", "P.N");
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, "P.N");
      try { 
        zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setLevel(3);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setMethod(0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(128, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.setMethod(0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AES_ENCRYPTED");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES_ENCRYPTED");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals(52L, fileChannel0.size());
      assertEquals(52L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("AES_ENCRYPTED");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("AES_ENCRYPTED");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(88L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.finish();
      //  // Unstable assertion: assertEquals(248, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000J\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setCrc(0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setMethod(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad size for entry : -1 instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CHRDEtV");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getCompressedSize());
      assertEquals(80L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveEntry0.setCompressedSize((-1));
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(945);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setCrc(555L);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("NF1", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      zipArchiveOutputStream0.finish();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.finished = true;
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 53);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.finish();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.deflate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.setEncoding((String) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertFalse(zipArchiveOutputStream0.isSeekable());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 53);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setEncoding("always");
      zipArchiveOutputStream0.setEncoding("always");
      assertEquals("always", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":,C:XG6q8v-d");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertTrue(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("never", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setComment("UTF8");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[6];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte)50, 20);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("CHRDEtV");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("CHRDEtV");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      MockFile mockFile0 = new MockFile("CHRDEtV");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, mockFileInputStream0);
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(7605L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 53);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setFallbackToUTF8(false);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("t'");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }
}
