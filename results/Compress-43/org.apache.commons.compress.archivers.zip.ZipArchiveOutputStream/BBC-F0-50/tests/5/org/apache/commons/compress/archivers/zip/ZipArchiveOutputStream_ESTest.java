/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:03:01 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.JarMarker;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodePathExtraField;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X000A_NTFS;
import org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.apache.commons.compress.archivers.zip.ZipLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setSize(8589934589L);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(8589934589L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(8589934589L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(8589934589L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(52L, fileChannel0.position());
      assertEquals(52L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setUnixMode(8);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(524289L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(8, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(3, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(104L, fileChannel0.position());
      assertEquals(104L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(524289L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(8, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(3, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("]", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("]", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setSize(8589934609L);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("]", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(8589934609L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("(");
      assertNotNull(jarArchiveEntry0);
      assertEquals("(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(9);
      assertEquals("(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(9, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(9, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setLevel(3);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setLevel(0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("T>-a;7,");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("T>-a;7,", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("T>-a;7,", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      assertNotNull(zip64ExtendedInformationExtraField0);
      
      zipExtraFieldArray0[0] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      assertNotNull(unicodeCommentExtraField0);
      assertEquals(0L, unicodeCommentExtraField0.getNameCRC32());
      
      zipExtraFieldArray0[1] = (ZipExtraField) unicodeCommentExtraField0;
      X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
      assertNotNull(x000A_NTFS0);
      
      zipExtraFieldArray0[2] = (ZipExtraField) x000A_NTFS0;
      AsiExtraField asiExtraField0 = new AsiExtraField();
      assertNotNull(asiExtraField0);
      assertEquals(0, asiExtraField0.getMode());
      assertFalse(asiExtraField0.isDirectory());
      assertEquals(0, asiExtraField0.getUserId());
      assertFalse(asiExtraField0.isLink());
      assertEquals(0, asiExtraField0.getGroupId());
      assertEquals("", asiExtraField0.getLinkedFile());
      
      zipExtraFieldArray0[3] = (ZipExtraField) asiExtraField0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[4] = (ZipExtraField) resourceAlignmentExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("T>-a;7,", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("T>-a;7,", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(5, zipExtraFieldArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("bT+A");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setSize(1392409281320L);
      //  // Unstable assertion: assertEquals(1392409281320L, jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(54, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0004\u0000\u0014\u0000bT+A\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(1392409281320L, jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(8, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(166, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0004\u0000\u0014\u0000bT+A\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0004\u0000\u0014\u0000bT+A\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0007\b\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD(\uFFFD\u000F2D\u0001\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(8, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(8L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals("bT+A", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(105);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      byte[] byteArray0 = new byte[2];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals(2, pipedInputStream0.available());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[6];
      zipArchiveOutputStream0.write(byteArray0, 3, 0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(", lastChapter=");
      assertNotNull(jarArchiveEntry0);
      assertEquals(", lastChapter=", jarArchiveEntry0.toString());
      assertEquals(", lastChapter=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(", lastChapter=", jarArchiveEntry0.toString());
      assertEquals(", lastChapter=", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.closeArchiveEntry();
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[7];
      zipArchiveOutputStream0.writeOut(byteArray0, (byte)1, 9488);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 434);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("|o!j%Pn/d O/jOH0-");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertNull(string0);
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      MockFile mockFile0 = new MockFile("Y%`)");
      assertNotNull(mockFile0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Y%`)");
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, ", lastChapter=");
      assertNotNull(zipArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(9L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Y%`)", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals("Y%`)", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(", lastChapter=", zipArchiveEntry0.toString());
      assertEquals(", lastChapter=", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(9L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      assertNotNull(zipArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertTrue(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("/", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals("/", zipArchiveEntry0.getName());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals(130L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(130L, fileChannel0.size());
      assertEquals(130L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        zipArchiveOutputStream0.writeZip64CentralDirectory();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setMethod(2048);
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(2048, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0000\b\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDN\u0000\u0000\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(108, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(2048, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0000\b\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDN\u0000\u0000\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(108, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      byte[] byteArray0 = new byte[7];
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, (byte)45, (-2369));
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      
      OpenOption[] openOptionArray0 = new OpenOption[2];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      assertEquals(StandardOpenOption.CREATE, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      assertNotNull(fileChannel0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertTrue(fileChannel0.isOpen());
      assertEquals(2, openOptionArray0.length);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2, openOptionArray0.length);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 3772, 3772);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 209, 209);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-3198), (byte)28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$:iFX;`]&jw:bSh&KL");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      byte[] byteArray0 = new byte[7];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte)23, (byte)23);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      File file0 = MockFile.createTempFile("archive's size exceeds the limit of 4GByte.", "NxX3w{z?N[KB@? Y");
      assertNotNull(file0);
      assertEquals("/tmp/archive's size exceeds the limit of 4GByte.0NxX3w{z?N[KB@? Y", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("archive's size exceeds the limit of 4GByte.0NxX3w{z?N[KB@? Y", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals("/tmp/archive's size exceeds the limit of 4GByte.0NxX3w{z?N[KB@? Y", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("archive's size exceeds the limit of 4GByte.0NxX3w{z?N[KB@? Y", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("/tmp/archive's size exceeds the limit of 4GByte.0NxX3w{z?N[KB@? Y", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("archive's size exceeds the limit of 4GByte.0NxX3w{z?N[KB@? Y", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      zipArchiveOutputStream0.setComment("z5");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(1, zipArchiveOutputStream0.getCount());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(1, byteArray0.length);
      
      zipArchiveOutputStream0.close();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(1, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("P");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("P", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("P", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("P", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("P", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setEncoding("P");
      assertEquals("P", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("P");
      assertNotNull(zipArchiveEntry0);
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("P", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("P", zipArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals("P", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals("P", zipArchiveEntry0.getName());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      jarArchiveEntry0.setMethod(2048);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(2048, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(2048, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry z5
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+32EmO~TFO1sFld+", "+32EmO~TFO1sFld+");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/+32EmO~TFO1sFld+/+32EmO~TFO1sFld+", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("+32EmO~TFO1sFld+", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/+32EmO~TFO1sFld+", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      mockFileOutputStream0.close();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/+32EmO~TFO1sFld+/+32EmO~TFO1sFld+", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("+32EmO~TFO1sFld+", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/+32EmO~TFO1sFld+", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/+32EmO~TFO1sFld+/+32EmO~TFO1sFld+", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals("+32EmO~TFO1sFld+", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/+32EmO~TFO1sFld+", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setEncoding("z5");
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("z5", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("]", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("]", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setMethod(2048);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("]", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(2048, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("]", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0000\b\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0000\u0000]", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(31, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals("]", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(2048, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("]", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[5];
      try { 
        zipArchiveOutputStream0.write(byteArray0, 649, (int) (byte)44);
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry ]
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(130L, fileChannel0.position());
      assertEquals(130L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (int) (byte) (-83), 2127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding(", reserved=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , reserved=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      File file0 = MockFile.createTempFile(", lastChapter=", "");
      assertNotNull(file0);
      assertEquals("/tmp/, lastChapter=0", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(", lastChapter=0", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals("/tmp/, lastChapter=0", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(", lastChapter=0", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("/tmp/, lastChapter=0", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(", lastChapter=0", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(2211);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(2211, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("/tmp/, lastChapter=0", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(", lastChapter=0", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(50L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(50L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(50L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(2211, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      fileChannel0.close();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("jcAGfUI[`^JTsy");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("jcAGfUI[`^JTsy", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("jcAGfUI[`^JTsy", jarArchiveEntry0.getName());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("E");
      assertNotNull(jarArchiveEntry0);
      assertEquals("E", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("E", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      
      FileChannel fileChannel1 = fileChannel0.position(4294967295L);
      assertNotNull(fileChannel1);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals((-1L), fileChannel0.position());
      assertEquals(0L, fileChannel1.size());
      assertEquals((-1L), fileChannel1.position());
      assertTrue(fileChannel1.isOpen());
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setMethod((-1840));
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.tar.TarArchiveEntry");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", jarArchiveEntry0.getName());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1840
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("e", 2520L);
      assertNotNull(cpioArchiveEntry0);
      assertEquals(2520L, cpioArchiveEntry0.getSize());
      assertEquals((short)1, cpioArchiveEntry0.getFormat());
      assertEquals(32768L, cpioArchiveEntry0.getMode());
      assertEquals(0L, cpioArchiveEntry0.getGID());
      assertEquals(0L, cpioArchiveEntry0.getInode());
      assertEquals("e", cpioArchiveEntry0.getName());
      assertEquals(0, cpioArchiveEntry0.getHeaderPadCount());
      assertEquals(0L, cpioArchiveEntry0.getUID());
      assertEquals(0, cpioArchiveEntry0.getDataPadCount());
      assertEquals(0L, cpioArchiveEntry0.getTime());
      assertEquals(4, cpioArchiveEntry0.getAlignmentBoundary());
      assertEquals(110, cpioArchiveEntry0.getHeaderSize());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(cpioArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.tar.TarArchiveEntry");
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.tar.TarArchiveEntry");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("org.apache.commons.compress.archivers.tar.TarArchiveEntry", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      fileChannel0.close();
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertFalse(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream1);
      assertNotNull(zipArchiveOutputStream2);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream2.getCount());
      assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
      assertFalse(zipArchiveOutputStream2.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream2.destroy();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        zipArchiveOutputStream0.destroy();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" data of ");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.finish();
      assertTrue(fileChannel0.isOpen());
      assertEquals(22L, fileChannel0.position());
      assertEquals(22L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.deflate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      MockFile mockFile0 = new MockFile("Y%`)");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(57);
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(575);
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(575, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\n\u0000\u0000\b?\u0002\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDP\u0000\u0000\u0000org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(110, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(575, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setCrc(2048);
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(2048L, jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(0);
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(2048L, jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setSize(0);
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(2048L, jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0000\u0000\uFFFD\uFFFDND\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(2048L, jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
       //  fail("Expecting exception: ZipException");
       // Unstable assertion
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry : 800 instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(130L, mockFile0.length());
      assertEquals(130L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(130L, fileChannel0.size());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.destroy();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(130L, mockFile0.length());
      assertFalse(fileChannel0.isOpen());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setMethod(2048);
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(2048, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(108, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0000\b\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDN\u0000\u0000\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(2048, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      //  // Unstable assertion: assertEquals(108, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0000\b\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDN\u0000\u0000\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream1.close();
       //  fail("Expecting exception: UnsupportedZipFeatureException");
       // Unstable assertion
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setEncoding("LINK");
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("LINK", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("o1TTr|ti>D -");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("o1TTr|ti>D -", true);
      //  // Unstable assertion: assertNotNull(mockFileOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000o1TTr|ti>D -", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(42, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArrayInputStream0);
      //  // Unstable assertion: assertEquals(2, byteArrayInputStream0.available());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      MockFile mockFile0 = new MockFile((File) null, "o1TTr|ti>D -");
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      //  // Unstable assertion: assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      //  // Unstable assertion: assertNotNull(fileChannel0);
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0, mockFileInputStream0.available());
      //  // Unstable assertion: assertTrue(fileChannel0.isOpen());
      //  // Unstable assertion: assertEquals(0L, fileChannel0.size());
      //  // Unstable assertion: assertEquals(0L, fileChannel0.position());
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream1);
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      //  // Unstable assertion: assertNull(mockFile0.getParent());
      //  // Unstable assertion: assertEquals(0L, mockFile0.length());
      //  // Unstable assertion: assertFalse(mockFile0.isAbsolute());
      //  // Unstable assertion: assertTrue(mockFile0.canWrite());
      //  // Unstable assertion: assertFalse(mockFile0.isDirectory());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getFreeSpace());
      //  // Unstable assertion: assertTrue(mockFile0.canExecute());
      //  // Unstable assertion: assertTrue(mockFile0.canRead());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", mockFile0.getName());
      //  // Unstable assertion: assertFalse(mockFile0.isHidden());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getUsableSpace());
      //  // Unstable assertion: assertEquals(0L, mockFile0.getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, mockFile0.lastModified());
      //  // Unstable assertion: assertEquals("o1TTr|ti>D -", mockFile0.toString());
      //  // Unstable assertion: assertTrue(mockFile0.exists());
      //  // Unstable assertion: assertTrue(mockFile0.isFile());
      //  // Unstable assertion: assertEquals(0, mockFileInputStream0.available());
      //  // Unstable assertion: assertTrue(fileChannel0.isOpen());
      //  // Unstable assertion: assertEquals(0L, fileChannel0.size());
      //  // Unstable assertion: assertEquals(0L, fileChannel0.position());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream1.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      //  // Unstable assertion: assertTrue(zipArchiveOutputStream1.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
       //  fail("Expecting exception: NonWritableChannelException");
       // Unstable assertion
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(130L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(130L, fileChannel0.position());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      mockFileOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setCrc(2048);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2048L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setMethod(0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2048L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[3];
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertNotNull(resourceAlignmentExtraField0);
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[0] = (ZipExtraField) resourceAlignmentExtraField0;
      UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
      assertNotNull(unparseableExtraFieldData0);
      
      zipExtraFieldArray0[1] = (ZipExtraField) unparseableExtraFieldData0;
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      assertNotNull(x0016_CertificateIdForCentralDirectory0);
      assertEquals(0, x0016_CertificateIdForCentralDirectory0.getRecordCount());
      assertNull(x0016_CertificateIdForCentralDirectory0.getHashAlgorithm());
      
      zipExtraFieldArray0[2] = (ZipExtraField) x0016_CertificateIdForCentralDirectory0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2048L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(3, zipExtraFieldArray0.length);
      
      jarArchiveEntry0.setSize(0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2048L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3552);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setMethod(1363);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(1363, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2243, 1363);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-2237), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertNotNull(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-5), 511);
      assertNotNull(byteArrayInputStream0);
      assertEquals(12, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("J");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("J", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("J", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(2048);
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("J", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("J", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(2048, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setEncoding("3jgL9");
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("3jgL9", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.achecommons.comprezs.archivers.zip.ZipAchiveOutputStgeam$EntryMeaData");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("org.achecommons.comprezs.archivers.zip.ZipAchiveOutputStgeam$EntryMeaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("org.achecommons.comprezs.archivers.zip.ZipAchiveOutputStgeam$EntryMeaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(103, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000I\u0000\u0000\u0000org.achecommons.comprezs.archivers.zip.ZipAchiveOutputStgeam$EntryMeaData", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("org.achecommons.comprezs.archivers.zip.ZipAchiveOutputStgeam$EntryMeaData", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("org.achecommons.comprezs.archivers.zip.ZipAchiveOutputStgeam$EntryMeaData", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      //  // Unstable assertion: assertNotNull(pipedInputStream0);
      //  // Unstable assertion: assertEquals(0, pipedInputStream0.available());
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
       //  fail("Expecting exception: IOException");
       // Unstable assertion
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("SbVJN;/qfx|KMiQx2K'");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setCompressedSize(405L);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.toString());
      assertEquals(405L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setCrc(2048);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(2048L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.toString());
      assertEquals(405L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(0);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(2048L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.toString());
      assertEquals(405L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setSize(0);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(2048L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("SbVJN;/qfx|KMiQx2K'", jarArchiveEntry0.toString());
      assertEquals(405L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(", lastChapter=");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(", lastChapter=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(", lastChapter=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(", lastChapter=", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(", lastChapter=", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, (-1), 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, 30, 30);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d&6#(-Gp");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("d&6#(-Gp");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.getName());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.getName());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("d&6#(-Gp", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(6, zipArchiveOutputStream1.getCount());
      assertEquals(6L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream1.destroy();
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals(22L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("rPIE;pT$9#");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("rPIE;pT$9#", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("rPIE;pT$9#", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(130L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(130L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(130L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(206L, mockFile0.length());
      assertEquals(206L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(206L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.finish();
      assertEquals("PK\u0005\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(22, byteArrayOutputStream0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("GNU.sparse.size");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.getName());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.getName());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.getName());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.getName());
      assertEquals("GNU.sparse.size", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setComment("z5");
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("z5", jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("z5", jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0(,_x.#YlQYHNNS");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("0(,_x.#YlQYHNNS");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("0(,_x.#YlQYHNNS", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("0(,_x.#YlQYHNNS", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("0(,_x.#YlQYHNNS", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("0(,_x.#YlQYHNNS", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("0(,_x.#YlQYHNNS", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("0(,_x.#YlQYHNNS", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("UTF8");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("UTF8", jarArchiveEntry0.toString());
      assertEquals("UTF8", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("UTF8", jarArchiveEntry0.toString());
      assertEquals("UTF8", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setComment("z5");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals("z5", jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals("z5", jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("P");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("P");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("P", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("P", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setComment("P");
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("P", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("P", jarArchiveEntry0.toString());
      assertEquals("P", jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("P", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("P", jarArchiveEntry0.toString());
      assertEquals("P", jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setComment("");
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.setCreateUnicodeExtraFields((ZipArchiveOutputStream.UnicodeExtraFieldPolicy) null);
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(30, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals("", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Y#Uy3HXN$4__");
      //  // Unstable assertion: assertNotNull(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("Y#Uy3HXN$4__", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("Y#Uy3HXN$4__", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[9];
      JarMarker jarMarker0 = new JarMarker();
      //  // Unstable assertion: assertNotNull(jarMarker0);
      
      zipExtraFieldArray0[0] = (ZipExtraField) jarMarker0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true, 4);
      //  // Unstable assertion: assertNotNull(resourceAlignmentExtraField0);
      //  // Unstable assertion: assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      //  // Unstable assertion: assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      //  // Unstable assertion: assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[1] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[2] = (ZipExtraField) jarMarker0;
      zipExtraFieldArray0[3] = (ZipExtraField) resourceAlignmentExtraField0;
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(zipEightByteInteger0);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      
      ZipLong zipLong0 = ZipLong.LFH_SIG;
      //  // Unstable assertion: assertNotNull(zipLong0);
      //  // Unstable assertion: assertEquals(67324752L, zipLong0.getValue());
      
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
      //  // Unstable assertion: assertNotNull(zip64ExtendedInformationExtraField0);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(67324752L, zipLong0.getValue());
      
      zipExtraFieldArray0[4] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      //  // Unstable assertion: assertNotNull(x0017_StrongEncryptionHeader0);
      //  // Unstable assertion: assertNull(x0017_StrongEncryptionHeader0.getEncryptionAlgorithm());
      //  // Unstable assertion: assertEquals(0L, x0017_StrongEncryptionHeader0.getRecordCount());
      //  // Unstable assertion: assertNull(x0017_StrongEncryptionHeader0.getHashAlgorithm());
      
      zipExtraFieldArray0[5] = (ZipExtraField) x0017_StrongEncryptionHeader0;
      zipExtraFieldArray0[6] = (ZipExtraField) resourceAlignmentExtraField0;
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      //  // Unstable assertion: assertNotNull(x7875_NewUnix0);
      
      zipExtraFieldArray0[7] = (ZipExtraField) x7875_NewUnix0;
      AsiExtraField asiExtraField0 = new AsiExtraField();
      //  // Unstable assertion: assertNotNull(asiExtraField0);
      //  // Unstable assertion: assertFalse(asiExtraField0.isLink());
      //  // Unstable assertion: assertEquals(0, asiExtraField0.getGroupId());
      //  // Unstable assertion: assertEquals(0, asiExtraField0.getUserId());
      //  // Unstable assertion: assertEquals(0, asiExtraField0.getMode());
      //  // Unstable assertion: assertEquals("", asiExtraField0.getLinkedFile());
      //  // Unstable assertion: assertFalse(asiExtraField0.isDirectory());
      
      zipExtraFieldArray0[8] = (ZipExtraField) asiExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("Y#Uy3HXN$4__", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals((-1), jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("Y#Uy3HXN$4__", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      //  // Unstable assertion: assertEquals(9, zipExtraFieldArray0.length);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      //  // Unstable assertion: assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\r\u0000=\u0000Y#Uy3HXN$4__\uFFFD\uFFFD\u0000\u0000\uFFFD\uFFFD\u0000\u0000\u0001\u0000\u0010\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000ux\u0007\u0000\u0001\u0002\uFFFD\u0003\u0002\uFFFD\u0003nu\u000E\u0000vh\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(104, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionRequired());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCrc());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getRawFlag());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getUnixMode());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isUnixSymlink());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getPlatform());
      //  // Unstable assertion: assertEquals("Y#Uy3HXN$4__", jarArchiveEntry0.toString());
      //  // Unstable assertion: assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      //  // Unstable assertion: assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      //  // Unstable assertion: assertNull(jarArchiveEntry0.getComment());
      //  // Unstable assertion: assertEquals("Y#Uy3HXN$4__", jarArchiveEntry0.getName());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isStreamContiguous());
      //  // Unstable assertion: assertEquals(8, jarArchiveEntry0.getMethod());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getSize());
      //  // Unstable assertion: assertFalse(jarArchiveEntry0.isDirectory());
      //  // Unstable assertion: assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      //  // Unstable assertion: assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      //  // Unstable assertion: assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setAlignment(8);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[5];
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(2823, true);
      assertNotNull(resourceAlignmentExtraField0);
      assertTrue(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)2823, resourceAlignmentExtraField0.getAlignment());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      
      zipExtraFieldArray0[0] = (ZipExtraField) resourceAlignmentExtraField0;
      AsiExtraField asiExtraField0 = new AsiExtraField();
      assertNotNull(asiExtraField0);
      assertFalse(asiExtraField0.isDirectory());
      assertEquals(0, asiExtraField0.getUserId());
      assertEquals(0, asiExtraField0.getGroupId());
      assertFalse(asiExtraField0.isLink());
      assertEquals("", asiExtraField0.getLinkedFile());
      assertEquals(0, asiExtraField0.getMode());
      
      zipExtraFieldArray0[1] = (ZipExtraField) asiExtraField0;
      X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new X5455_ExtendedTimestamp();
      assertNotNull(x5455_ExtendedTimestamp0);
      assertFalse(x5455_ExtendedTimestamp0.isBit0_modifyTimePresent());
      assertEquals((byte)0, x5455_ExtendedTimestamp0.getFlags());
      assertFalse(x5455_ExtendedTimestamp0.isBit1_accessTimePresent());
      assertFalse(x5455_ExtendedTimestamp0.isBit2_createTimePresent());
      assertEquals((byte)2, X5455_ExtendedTimestamp.ACCESS_TIME_BIT);
      assertEquals((byte)1, X5455_ExtendedTimestamp.MODIFY_TIME_BIT);
      assertEquals((byte)4, X5455_ExtendedTimestamp.CREATE_TIME_BIT);
      
      zipExtraFieldArray0[2] = (ZipExtraField) x5455_ExtendedTimestamp0;
      X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new X0016_CertificateIdForCentralDirectory();
      assertNotNull(x0016_CertificateIdForCentralDirectory0);
      assertEquals(0, x0016_CertificateIdForCentralDirectory0.getRecordCount());
      assertNull(x0016_CertificateIdForCentralDirectory0.getHashAlgorithm());
      
      zipExtraFieldArray0[3] = (ZipExtraField) x0016_CertificateIdForCentralDirectory0;
      UnicodePathExtraField unicodePathExtraField0 = new UnicodePathExtraField();
      assertNotNull(unicodePathExtraField0);
      assertEquals(0L, unicodePathExtraField0.getNameCRC32());
      
      zipExtraFieldArray0[4] = (ZipExtraField) unicodePathExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(5, zipExtraFieldArray0.length);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(2959, byteArrayOutputStream0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.flush();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.close();
      assertEquals("PK\u0005\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(22, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.close();
      assertEquals("PK\u0005\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(22, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("[D-7fyJ");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("[D-7fyJ", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("[D-7fyJ", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("[D-7fyJ", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("[D-7fyJ", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(37, pipedInputStream0.available());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      // Undeclared exception!
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertNotNull(zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(zipArchiveEntry0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", zipArchiveEntry0.getName());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(110L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(110L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(110L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(110L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getParent());
      assertEquals("/experiment/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE/org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.toString());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(110L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(110L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("z5");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ONHu[+P");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("ONHu[+P", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("ONHu[+P", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setMethod(1);
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(1, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("ONHu[+P", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("ONHu[+P", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(1, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("ONHu[+P", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("ONHu[+P", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("z5");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ONHu[+P");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("ONHu[+P", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("ONHu[+P", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("ONHu[+P", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("ONHu[+P", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData((ArchiveEntry) null);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      OpenOption[] openOptionArray0 = new OpenOption[2];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      assertEquals(StandardOpenOption.CREATE, standardOpenOption0);
      
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      openOptionArray0[1] = (OpenOption) standardOpenOption0;
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      assertNotNull(fileChannel0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(fileChannel0.isOpen());
      assertEquals(2, openOptionArray0.length);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(2, openOptionArray0.length);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(834);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 834
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((short) (-533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -533
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertNotNull(zipArchiveOutputStream0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      assertNotNull(jarArchiveEntry0);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(110L, fileChannel0.position());
      assertEquals(110L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", jarArchiveEntry0.toString());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]");
      assertNotNull(jarArchiveEntry0);
      assertEquals("]", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("]", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setSize(8589934609L);
      assertEquals("]", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("]", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8589934609L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // ]'s size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      jarArchiveEntry0.setMethod(0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setSize(0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      assertNotNull(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("(");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setMethod(0);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("(", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("(", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = MockFile.createTempFile("1qnh", "1qnh");
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/1qnh01qnh", file0.toString());
      assertEquals("1qnh01qnh", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/1qnh01qnh", file0.toString());
      assertEquals("1qnh01qnh", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("1qnh");
      assertNotNull(zipArchiveEntry0);
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("1qnh", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("1qnh", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setLevel(0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/1qnh01qnh", file0.toString());
      assertEquals("1qnh01qnh", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(34L, file0.length());
      assertEquals("/tmp/1qnh01qnh", file0.toString());
      assertEquals("1qnh01qnh", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("1qnh", zipArchiveEntry0.getName());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("1qnh", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      assertNotNull(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setCrc(8);
      assertEquals(8L, jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setSize(8589934591L);
      assertEquals(8L, jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(8589934591L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setMethod(0);
      assertEquals(8L, jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(8589934591L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      assertNotNull(jarArchiveEntry0);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      jarArchiveEntry0.setSize(4294967295L);
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("z5", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(4294967295L, jarArchiveEntry0.getSize());
      assertEquals("z5", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("archive contains more than 65535 entries.");
      assertNotNull(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals("archive contains more than 65535 entries.", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("archive contains more than 65535 entries.", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertNotNull(zipArchiveOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.finished = true;
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(372L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(262L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Lu#W;?DRsc(P");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(260, byteArrayOutputStream0.size());
      assertEquals("PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\f\u0000\u0014\u0000Lu#W;?DRsc(P\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\f\u0000\u0014\u0000Lu#W;?DRsc(P\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0007\b\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0001\u0002-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\f\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFDLu#W;?DRsc(P\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("og.achecommons.comprezs.arhivers.zip.ZipAciveOutputStgeam$EntryMeaData");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      jarArchiveEntry0.setMethod(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad size for entry og.achecommons.comprezs.arhivers.zip.ZipAciveOutputStgeam$EntryMeaData: 0 instead of 22
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("og.achecommons.comprezs.arhivers.zip.ZipAciveOutputStgeam$EntryMeaData");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(318, byteArrayOutputStream0.size());
      assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000og.achecommons.comprezs.arhivers.zip.ZipAciveOutputStgeam$EntryMeaData\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000og.achecommons.comprezs.arhivers.zip.ZipAciveOutputStgeam$EntryMeaDataPK\u0003\u0004\n\u0000\u0000\b\u0000\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0000\u0000\u0000og.achecommons.comprezs.arhivers.zip.ZipAciveOutputStgeam$EntryMeaData", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(84L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(12);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry : ffffffffffffffff instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(57);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      jarArchiveEntry0.setCrc(1431L);
      jarArchiveEntry0.setMethod(57);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)115, 0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("|o!j%Pn/d O/jOH0-");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("{+h9v<S");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(135L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z5");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("z5");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = jarArchiveEntry0.getCentralDirectoryExtra();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 246);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      MockFile mockFile0 = new MockFile("Y%`)");
      ArchiveEntry archiveEntry0 = zipArchiveOutputStream0.createArchiveEntry(mockFile0, ", lastChapter=");
      zipArchiveOutputStream0.putArchiveEntry(archiveEntry0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setEncoding("B");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("B", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.setEncoding("B");
      assertEquals("B", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE", "org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertTrue(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("always", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3,|?s/)55I'N");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("[D-7fyJ");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 209, 209);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", "tar\u0000");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(", lastChapter=", true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setFallbackToUTF8(false);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }
}
