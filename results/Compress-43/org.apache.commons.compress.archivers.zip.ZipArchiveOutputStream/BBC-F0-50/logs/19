* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Starting Client-0
* Connecting to master process on port 2195
* Analyzing classpath: 
  - subjects/buggy-versions/Compress-43/target/classes
  - defects4j/framework/projects/Compress/lib/org/brotli/dec/0.1.2/dec-0.1.2.jar
  - defects4j/framework/projects/Compress/lib/org/tukaani/xz/1.6/xz-1.6.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2207
* Using seed 2101100096
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 864 / 2207
[MASTER] 22:09:58.724 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1683: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - true: 1735
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1682: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1547: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1243: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1242: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1684: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1241: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([B)V: Line 1456: 26
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([B)V: Line 1457: 126
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1681: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - false: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1098: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1549: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1245: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I18 Branch 48 IFNE L813 - true: 320
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1088: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1235: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1085: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1475: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1234: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1476: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I12 Branch 145 IF_ICMPNE L1572 - true: 708
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1240: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1239: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1479: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1079: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1080: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I29 Branch 18 IFEQ L584 - true: 1192
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I51 Branch 93 IF_ACMPEQ L1152 - true: 288
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1077: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I29 Branch 97 IFNE L1176 - true: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1083: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1474: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1231: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1071: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1069: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1075: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1074: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I29 Branch 18 IFEQ L584 - false: 48
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - true: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1067: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1068: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - false: 1609
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1066: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - true: 53
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I33 Branch 32 IFNE L677 - false: 65
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I207 Branch 84 IFNULL L1090 - false: 249
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1054: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - false: 2538
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1528: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I41 Branch 61 IF_ICMPEQ L877 - true: 33
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1532: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I24 Branch 65 IFEQ L902 - false: 603
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1531: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1045: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1536: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1049: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1050: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I4 Branch 135 IF_ICMPNE L1493 - false: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1043: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I4 Branch 135 IF_ICMPNE L1493 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: Line 1582: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1032: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1033: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1034: 1385
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I32 Branch 102 IF_ACMPNE L1201 - false: 5151
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I13 Branch 125 IFNE L1393 - true: 714
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1035: 1385
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1036: 1385
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: Line 812: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1037: 1385
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I53 Branch 94 IFNE L1152 - false: 17994
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: I4 Branch 1 IFNULL L338 - true: 851
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1038: 1385
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I22 Branch 57 IFNULL L848 - false: 377
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1025: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1026: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: I4 Branch 1 IFNULL L338 - false: 1020
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I18 Branch 99 IFGE L1201 - true: 10365
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1028: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - true: 2674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 95 IF_ICMPNE L1171 - true: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - false: 1077
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I8 Branch 5 IFEQ L377 - true: 12817
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 95 IF_ICMPNE L1171 - false: 1518
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I28 Branch 128 IF_ICMPLT L1393 - false: 9595
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: Line 1583: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 963: 441
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 964: 441
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 960: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I7 Branch 60 IF_ICMPLE L872 - true: 33
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([BII)V: Line 1470: 889
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I45 Branch 23 IFEQ L620 - false: 151
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: Line 1483: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - false: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I67 Branch 51 IFLT L825 - false: 3272
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I4 Branch 149 IFNULL L1599 - false: 341
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - true: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - true: 6149
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - false: 6149
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - true: 5401
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I4 Branch 6 IFEQ L462 - false: 1030
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I4 Branch 149 IFNULL L1599 - true: 102
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I4 Branch 59 IF_ICMPLT L872 - true: 35
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I9 Branch 54 IFGE L848 - true: 11767
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: I4 Branch 138 IFEQ L1514 - false: 240
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - false: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - false: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - true: 18591
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I268 Branch 87 IF_ICMPEQ L1107 - false: 630
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - true: 1910
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1308: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1306: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1305: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1312: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1311: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1321: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1303: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - false: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - true: 5042
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1290: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1642: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1296: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1643: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - false: 377
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1644: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1293: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1284: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1282: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1287: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - true: 4998
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: root-Branch: 660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 610: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I21 Branch 64 IF_ICMPEQ L902 - true: 2579
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1279: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I60 Branch 118 IFGE L1333 - true: 4914
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1268: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - false: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - false: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - true: 31765
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - true: 5753
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1269: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1259: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1263: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - true: 3474
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1252: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1249: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1256: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1254: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - false: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1253: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - false: 68
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 535: 8132
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 533: 8132
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 534: 8132
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I25 Branch 117 IF_ACMPNE L1323 - true: 2513
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 531: 8132
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 532: 8132
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;: Line 1588: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 530: 8132
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 596: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I243 Branch 113 IF_ACMPNE L1296 - false: 148
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I15 Branch 2 IFEQ L353 - false: 14
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 599: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I15 Branch 2 IFEQ L353 - true: 87
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I84 Branch 79 IFEQ L1062 - false: 81
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I47 Branch 68 IFLT L942 - false: 671
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - false: 1994
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: I19 Branch 71 IF_ACMPEQ L1028 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: I19 Branch 71 IF_ACMPEQ L1028 - false: 3656
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I13 Branch 98 IFNE L1201 - true: 687
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1338: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I47 Branch 68 IFLT L942 - true: 86
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - true: 288
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I81 Branch 38 IFEQ L759 - false: 288
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - false: 5923
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - true: 8788
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - true: 3105
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1163: 8674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - false: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;: root-Branch: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - true: 766
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1147: 8674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1148: 8674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - false: 13392
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I34 Branch 19 IFEQ L584 - true: 1258
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I8 Branch 144 IFNONNULL L1572 - true: 375
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 727: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 728: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - false: 626
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - true: 8983
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1138: 8674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - true: 5753
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - false: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I11 Branch 30 IFLT L663 - false: 26567
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - true: 16009
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I26 Branch 74 IFNULL L1050 - false: 68
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I8 Branch 28 IFEQ L659 - false: 26540
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I7 Branch 90 IFNE L1138 - false: 21380
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - true: 7775
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - false: 27469
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - false: 3361
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - true: 1666
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: root-Branch: 8132
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - false: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: I4 Branch 137 IF_ICMPNE L1497 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I14 Branch 150 IFNULL L1602 - false: 183
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: I4 Branch 137 IF_ICMPNE L1497 - false: 3023
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: Line 549: 660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I14 Branch 150 IFNULL L1602 - true: 102
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I18 Branch 3 IFNE L353 - true: 61
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I24 Branch 8 IFEQ L486 - false: 1284
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - true: 3272
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - false: 8674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: Line 900: 1767
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I25 Branch 120 IF_ICMPLE L1356 - false: 10139
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(Ljava/lang/String;)V: root-Branch: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I29 Branch 7 IFNULL L466 - false: 1107
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I3 Branch 133 IFEQ L1483 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I24 Branch 73 IFGT L1050 - true: 8828
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - true: 18588
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I38 Branch 76 IFNULL L1054 - false: 289
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - false: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I41 Branch 61 IF_ICMPEQ L877 - false: 45
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - true: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I38 Branch 129 IFNE L1400 - true: 714
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - false: 637
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - true: 1345
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - false: 1924
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1196: 681
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - false: 1529
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1195: 681
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I24 Branch 73 IFGT L1050 - false: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - true: 7694
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I3 Branch 133 IFEQ L1483 - false: 1811
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - true: 61961
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - true: 1147
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - false: 61961
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - false: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I11 Branch 147 IFNE L1583 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1171: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - true: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - false: 18588
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 659: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I11 Branch 147 IFNE L1583 - false: 63276
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: Line 663: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: root-Branch: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - false: 10483
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I248 Branch 86 IFEQ L1104 - false: 1027
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I6 Branch 11 IFNULL L538 - false: 226
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I14 Branch 55 IFGE L848 - true: 3025
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I128 Branch 34 IFNE L696 - false: 65
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - true: 1323
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 798: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 794: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I21 Branch 116 IFGE L1323 - true: 4914
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I84 Branch 24 IFEQ L628 - false: 335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 652: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - false: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 651: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I178 Branch 43 IFEQ L782 - false: 303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I43 Branch 122 IFLE L1361 - false: 16970
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - true: 2671
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I5 Branch 142 IFNULL L1559 - false: 802
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - false: 208
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - true: 7694
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I36 Branch 75 IF_ICMPGT L1054 - true: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I36 Branch 75 IF_ICMPGT L1054 - false: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - false: 289
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1628: 100039
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1629: 100039
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: Line 1497: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1630: 100039
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: Line 936: 7775
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: Line 947: 86
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - true: 16769
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I160 Branch 110 IFGE L1269 - true: 12587
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I23 Branch 100 IFGE L1201 - true: 10365
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I24 Branch 132 IFEQ L1476 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I29 Branch 37 IFNULL L747 - false: 423
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - true: 6864
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 356: 14
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 353: 14
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I60 Branch 50 IFGE L825 - true: 12545
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - false: 320
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - false: 4463
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 677: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 676: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 675: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 673: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - true: 4998
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - true: 1098
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I23 Branch 127 IFGE L1393 - true: 15510
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I29 Branch 14 IFNONNULL L553 - true: 637
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 685: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 305: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([B)V: root-Branch: 26
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 304: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 307: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 306: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - true: 2466
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 801: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - false: 1046
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1207: 590
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - false: 10182
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I10 Branch 72 IFNULL L1045 - false: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 584: 3205
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I10 Branch 72 IFNULL L1045 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 588: 3205
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 297: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 587: 3205
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - true: 10182
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 590: 3261
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 299: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I11 Branch 140 IFNE L1529 - true: 633
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 589: 3261
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 298: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 716: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 301: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 715: 6660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 300: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 303: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 302: 7946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - false: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 578: 3205
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 577: 2044
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I11 Branch 130 IFNE L1475 - false: 1449
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1021: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1022: 2610
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I17 Branch 146 IFEQ L1572 - false: 233
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I11 Branch 130 IFNE L1475 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I175 Branch 42 IF_ICMPNE L782 - true: 878
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I24 Branch 132 IFEQ L1476 - false: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: Line 1493: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - false: 21128
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I191 Branch 82 IFEQ L1088 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 517: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 513: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 514: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 515: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - true: 134
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 516: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I164 Branch 111 IF_ACMPNE L1269 - false: 148
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 510: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 511: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 512: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 506: 660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 508: 1294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - false: 5401
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - false: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - false: 11129
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - true: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 546: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 545: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - true: 8674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - true: 18590
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1657: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - true: 3205
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - false: 3438
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I155 Branch 80 IFNE L1079 - false: 60238
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1653: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - true: 16970
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I19 Branch 56 IFNE L848 - true: 234
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - false: 16970
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1662: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1666: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I191 Branch 82 IFEQ L1088 - false: 3125
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - true: 590
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I18 Branch 126 IFGE L1393 - true: 15510
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - false: 643
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I204 Branch 83 IF_ICMPEQ L1090 - true: 68
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - true: 630
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: I4 Branch 70 IFNULL L974 - false: 78
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - true: 3205
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - false: 3253
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - false: 2268
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - true: 1789
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I171 Branch 35 IFEQ L710 - false: 65
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I155 Branch 80 IFNE L1079 - true: 1317
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I171 Branch 35 IFEQ L710 - true: 7022
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: Line 338: 851
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 542: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 538: 5198
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: I4 Branch 66 IFNONNULL L918 - true: 1932
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - false: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I11 Branch 134 IFEQ L1486 - false: 68
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - false: 10706
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1599: 102
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1602: 102
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - true: 203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1605: 102
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I4 Branch 62 IFEQ L900 - true: 1767
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - true: 12587
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I4 Branch 62 IFEQ L900 - false: 1969
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - false: 58923
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - false: 12587
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I5 Branch 124 IF_ACMPNE L1389 - false: 3265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - true: 58923
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 743: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - true: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - false: 2547
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I122 Branch 40 IFNE L768 - false: 3105
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - true: 5062
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(Ljava/lang/String;)V: Line 861: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: root-Branch: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(Ljava/lang/String;)V: Line 860: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - false: 148
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - false: 6008
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 848: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: Line 1572: 1503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I4 Branch 13 IFEQ L549 - true: 660
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1126: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I4 Branch 13 IFEQ L549 - false: 1281
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I7 Branch 136 IFNONNULL L1493 - false: 68
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1118: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - true: 18588
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I7 Branch 136 IFNONNULL L1493 - true: 414
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1124: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1121: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1115: 1384
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I64 Branch 119 IF_ACMPNE L1333 - true: 2513
Number of times BBC is called in total: 2300548
* Search finished after 602s and 1090 generations, 435327 statements, best individual has fitness: 253.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 514
* Number of covered goals: 492
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 320
* Number of covered goals: 284
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 74
* Number of covered goals: 74
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 978
* Number of covered goals: 906
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 11
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 32
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 320
* Number of covered goals: 267
* Generated 138 tests with total length 718
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:21:18.186 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6669% of time used, but only 47/138 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
[MASTER] 22:21:42.566 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    -  ??ND    ????????                                                 - -  ??ND    ????????             ????                             ,       - -                       J       L       PK]    ?          PK...> but was:<[PK-  ??ND    ????????                      PK                   PK- -  ??ND    ????????             ????                         PK,       - -                       J       L       PK]    ?          PK...>
[MASTER] 22:21:42.567 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
Zip64Mode zip64Mode0 = Zip64Mode.Always;
zipArchiveOutputStream0.setUseZip64(zip64Mode0);
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.closeArchiveEntry();
zipArchiveOutputStream0.finish();
assertEquals(248, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000J\u0000\u0000\u0000L\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:21:46.995 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
   ??ND??????????...> but was:<[PK]
   ??ND??????????...>
[MASTER] 22:21:46.996 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.setMethod(6);
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
assertEquals(6, zipArchiveEntry0.getMethod());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0006\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:21:48.117 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:48.119 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());

zipArchiveEntry0.setAlignment(8);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u001E\uFFFD\u0006\u0000\b\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(40, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());


[MASTER] 22:21:48.322 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:48.323 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());

ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
assertNotNull(resourceAlignmentExtraField0);
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
assertTrue(resourceAlignmentExtraField0.allowMethodChange());

zipArchiveEntry0.addExtraField(resourceAlignmentExtraField0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
assertTrue(resourceAlignmentExtraField0.allowMethodChange());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());


[MASTER] 22:21:48.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:48.958 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());

ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
assertNotNull(jarArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertNull(jarArchiveEntry0.getComment());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getRawFlag());

zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(215, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0000a\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicyup]\u0000\u0001\uFFFD\u0001\uFFFDaorg.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(8, jarArchiveEntry0.getMethod());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertNull(jarArchiveEntry0.getComment());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getRawFlag());


[MASTER] 22:21:49.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:49.174 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());

zipArchiveEntry0.setComment("&WIH<2tsusK}J");
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("&WIH<2tsusK}J", zipArchiveEntry0.getComment());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("&WIH<2tsusK}J", zipArchiveEntry0.getComment());


[MASTER] 22:21:49.556 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:49.558 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

zipArchiveEntry0.setComment("");
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());


[MASTER] 22:21:49.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:49.827 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());

JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy");
assertNotNull(jarArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertNull(jarArchiveEntry0.getComment());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals(0, jarArchiveEntry0.getVersionRequired());

jarArchiveEntry0.setComment("&WIH<2tsusK}J");
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals("&WIH<2tsusK}J", jarArchiveEntry0.getComment());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals(0, jarArchiveEntry0.getVersionRequired());

zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0000w\u0000org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicyup]\u0000\u0001\uFFFD\u0001\uFFFDaorg.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicyuc\u0012\u0000\u0001_@\uFFFD\uFFFD&WIH<2tsusK}J", byteArrayOutputStream0.toString());
assertEquals(237, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.getName());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals("&WIH<2tsusK}J", jarArchiveEntry0.getComment());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(8, jarArchiveEntry0.getMethod());
assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy", jarArchiveEntry0.toString());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals(0, jarArchiveEntry0.getVersionRequired());


[MASTER] 22:21:50.051 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:50.066 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());

Zip64Mode zip64Mode0 = Zip64Mode.Always;
zipArchiveOutputStream0.setUseZip64(zip64Mode0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0018\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(104, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());


[MASTER] 22:21:50.596 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:50.598 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

Zip64Mode zip64Mode0 = Zip64Mode.Never;
zipArchiveOutputStream0.setUseZip64(zip64Mode0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(48, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.finish();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000.\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(116, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());


[MASTER] 22:21:51.367 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:51.370 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
assertNotNull(mockPrintStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(78, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

File file0 = MockFile.createTempFile("UTF8", ", name=", (File) null);
assertNotNull(file0);
assertTrue(file0.canRead());
assertEquals("/tmp", file0.getParent());
assertTrue(file0.canWrite());
assertTrue(file0.canExecute());
assertTrue(file0.isFile());
assertEquals("UTF80, name=", file0.getName());
assertTrue(file0.exists());
assertEquals(0L, file0.getTotalSpace());
assertEquals(1392409281320L, file0.lastModified());
assertFalse(file0.isDirectory());
assertEquals(0L, file0.getFreeSpace());
assertEquals(0L, file0.length());
assertEquals("/tmp/UTF80, name=", file0.toString());
assertFalse(file0.isHidden());
assertTrue(file0.isAbsolute());
assertEquals(0L, file0.getUsableSpace());

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
assertNotNull(mockFileInputStream0);

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream1);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(78, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(108, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertTrue(file0.canRead());
assertEquals("/tmp", file0.getParent());
assertTrue(file0.canWrite());
assertTrue(file0.canExecute());
assertTrue(file0.isFile());
assertEquals("UTF80, name=", file0.getName());
assertTrue(file0.exists());
assertEquals(0L, file0.getTotalSpace());
assertEquals(1392409281320L, file0.lastModified());
assertFalse(file0.isDirectory());
assertEquals(0L, file0.getFreeSpace());
assertEquals(0L, file0.length());
assertEquals("/tmp/UTF80, name=", file0.toString());
assertFalse(file0.isHidden());
assertTrue(file0.isAbsolute());
assertEquals(0L, file0.getUsableSpace());
assertEquals((-1), mockFileInputStream0.available());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));


[MASTER] 22:21:51.808 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:51.809 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());

zipArchiveOutputStream0.write((byte[]) null, 85, 730);

[MASTER] 22:21:52.094 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]-  ??ND    ??????...> but was:<[PK]-  ??ND    ??????...>
[MASTER] 22:21:52.278 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());

Zip64Mode zip64Mode0 = Zip64Mode.Always;
zipArchiveOutputStream0.setUseZip64(zip64Mode0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(50, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(76, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(150, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());


[MASTER] 22:21:53.676 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:53.678 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

byte[] byteArray0 = new byte[0];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 3);
assertEquals(0, byteArray0.length);
assertNotNull(byteArrayInputStream0);
assertEquals(1, byteArrayInputStream0.available());
assertArrayEquals(new byte[] {}, byteArray0);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);

[MASTER] 22:21:54.257 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:54.258 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream1);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

File file0 = MockFile.createTempFile("UTF8", "5vT/*7pn", (File) null);
assertNotNull(file0);
assertEquals("*7pn", file0.getName());
assertTrue(file0.canWrite());
assertTrue(file0.isFile());
assertFalse(file0.isHidden());
assertEquals(0L, file0.getUsableSpace());
assertTrue(file0.isAbsolute());
assertTrue(file0.canRead());
assertTrue(file0.canExecute());
assertEquals(0L, file0.length());
assertFalse(file0.isDirectory());
assertEquals(0L, file0.getFreeSpace());
assertEquals(0L, file0.getTotalSpace());
assertEquals(1392409281320L, file0.lastModified());
assertTrue(file0.exists());
assertEquals("/tmp/UTF805vT", file0.getParent());
assertEquals("/tmp/UTF805vT/*7pn", file0.toString());

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
assertNotNull(mockFileInputStream0);

ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
assertNotNull(zipArchiveOutputStream2);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0L, zipArchiveOutputStream2.getBytesWritten());
assertEquals(0, zipArchiveOutputStream2.getCount());
assertEquals("UTF8", zipArchiveOutputStream2.getEncoding());
assertFalse(zipArchiveOutputStream2.isSeekable());
assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream1));
assertFalse(zipArchiveOutputStream2.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);

[MASTER] 22:21:54.675 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:54.676 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("", zipArchiveEntry0.getName());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
assertNotNull(mockFileInputStream0);

FileChannel fileChannel0 = mockFileInputStream0.getChannel();
assertNotNull(fileChannel0);
assertFalse(fileDescriptor0.valid());
assertTrue(fileChannel0.isOpen());
assertEquals(0L, fileChannel0.position());

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
assertNotNull(zipArchiveOutputStream1);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertFalse(fileDescriptor0.valid());
assertTrue(fileChannel0.isOpen());
assertEquals(0L, fileChannel0.position());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertTrue(zipArchiveOutputStream1.isSeekable());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);

[MASTER] 22:21:55.194 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
   ??ND??????????...> but was:<[PK]
   ??ND??????????...>
[MASTER] 22:21:55.195 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.setMethod(2);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(2, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);

[MASTER] 22:21:56.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
   ??ND??????????...> but was:<[PK]
   ??ND??????????...>
[MASTER] 22:21:56.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.setMethod(2);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(2, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
assertNotNull(zipArchiveOutputStream1);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.close();

[MASTER] 22:21:56.561 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:21:56.563 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

zipArchiveEntry0.setMethod(0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

zipArchiveOutputStream0.closeArchiveEntry();

[MASTER] 22:21:56.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
   ??ND??????????...> but was:<[PK]
   ??ND??????????...>
[MASTER] 22:21:56.792 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.setMethod(2);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(2, zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());

zipArchiveOutputStream0.closeArchiveEntry();

[MASTER] 22:21:59.616 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
  ??ND??????????...> but was:<[PK]
  ??ND??????????...>
[MASTER] 22:21:59.617 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.setMethod(1796);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0004\u0007\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(1796, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
assertNotNull(zipArchiveOutputStream1);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0004\u0007\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.finish();

[MASTER] 22:21:59.771 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]-  ??ND    ??????...> but was:<[PK]-  ??ND    ??????...>
[MASTER] 22:21:59.772 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());

Zip64Mode zip64Mode0 = Zip64Mode.Always;
zipArchiveOutputStream0.setUseZip64(zip64Mode0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(50, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());

Zip64Mode zip64Mode1 = Zip64Mode.Never;
zipArchiveOutputStream0.setUseZip64(zip64Mode1);
assertNotSame(zip64Mode1, zip64Mode0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(50, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertFalse(zip64Mode1.equals((Object)zip64Mode0));

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(76, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.finish();

[MASTER] 22:22:01.770 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
   ??ND??????????...> but was:<[PK]
   ??ND??????????...>
[MASTER] 22:22:01.771 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.setMethod(2);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(2, zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());

TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("tZ?{q", (byte) (-109));
assertNotNull(tarArchiveEntry0);
assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
assertFalse(tarArchiveEntry0.isPaxHeader());
assertEquals(0L, tarArchiveEntry0.getSize());
assertFalse(tarArchiveEntry0.isBlockDevice());
assertEquals(0L, tarArchiveEntry0.getLongUserId());
assertFalse(tarArchiveEntry0.isDirectory());
assertEquals("", tarArchiveEntry0.getGroupName());
assertEquals(0, tarArchiveEntry0.getUserId());
assertFalse(tarArchiveEntry0.isStarSparse());
assertEquals(0, tarArchiveEntry0.getDevMinor());
assertFalse(tarArchiveEntry0.isExtended());
assertEquals("tZ?{q", tarArchiveEntry0.getName());
assertFalse(tarArchiveEntry0.isOldGNUSparse());
assertFalse(tarArchiveEntry0.isSymbolicLink());
assertFalse(tarArchiveEntry0.isFIFO());
assertEquals(0L, tarArchiveEntry0.getLongGroupId());
assertEquals(0, tarArchiveEntry0.getGroupId());
assertFalse(tarArchiveEntry0.isSparse());
assertTrue(tarArchiveEntry0.isFile());
assertEquals("", tarArchiveEntry0.getLinkName());
assertEquals("", tarArchiveEntry0.getUserName());
assertFalse(tarArchiveEntry0.isCharacterDevice());
assertFalse(tarArchiveEntry0.isGNUSparse());
assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
assertEquals(0L, tarArchiveEntry0.getRealSize());
assertFalse(tarArchiveEntry0.isGNULongNameEntry());
assertFalse(tarArchiveEntry0.isPaxGNUSparse());
assertFalse(tarArchiveEntry0.isLink());
assertEquals(0, tarArchiveEntry0.getDevMajor());
assertFalse(tarArchiveEntry0.isCheckSumOK());
assertEquals(33188, tarArchiveEntry0.getMode());

zipArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);

[MASTER] 22:22:02.458 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
   ??ND??????????...> but was:<[PK]
   ??ND??????????...>
[MASTER] 22:22:02.459 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.setMethod(2);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(2, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());

byte[] byteArray0 = new byte[5];
zipArchiveOutputStream0.write(byteArray0, 36864, 2);

[MASTER] 22:22:03.811 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:22:03.812 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());

zipArchiveOutputStream0.setEncoding("ZtLrE");
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("ZtLrE", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);

[MASTER] 22:22:06.766 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:22:06.768 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());

zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(60, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());


[MASTER] 22:22:07.028 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:22:07.030 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.getName());

byte[] byteArray0 = new byte[0];
zipArchiveOutputStream0.write(byteArray0, 0, 0);
assertEquals(0, byteArray0.length);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertArrayEquals(new byte[] {}, byteArray0);


[MASTER] 22:22:07.820 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:22:07.822 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(78, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("", zipArchiveEntry0.getName());

zipArchiveEntry0.setCompressedSize((-810L));
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-810L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("", zipArchiveEntry0.getName());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
assertNotNull(mockFileInputStream0);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);

[MASTER] 22:22:07.973 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:22:07.976 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isUnixSymlink());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isUnixSymlink());

byteArrayOutputStream0.writeTo(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000c```\u0010a\uFFFD\uFFFD\uFFFD`X\uFFFD\uFFFD\uFFFD\uFFFD\u0001\r\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0013\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(95, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(30L, zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(19L, zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(2296550133L, zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isUnixSymlink());

zipArchiveEntry0.setMethod(0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(30L, zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(19L, zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(2296550133L, zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isUnixSymlink());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);

[MASTER] 22:22:08.159 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:22:08.161 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(78, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getSize());

zipArchiveEntry0.setMethod(0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getSize());

zipArchiveEntry0.setSize(101075792L);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(101075792L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);

[MASTER] 22:22:08.327 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]   !            ...> but was:<[PK]   !            ...>
[MASTER] 22:22:08.329 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());

zipArchiveEntry0.setTime((-51L));
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());


[MASTER] 22:22:08.499 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]-  ??ND    ??????...> but was:<[PK]-  ??ND    ??????...>
[MASTER] 22:22:08.500 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("nc%)u!yM/E4U");
assertNotNull(jarArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.toString());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.getName());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertNull(jarArchiveEntry0.getComment());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());

jarArchiveEntry0.setSize(4294967295L);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(4294967295L, jarArchiveEntry0.getSize());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.toString());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.getName());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertNull(jarArchiveEntry0.getComment());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());

zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\f\u0000\u0014\u0000nc%)u!yM/E4U\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(62, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(4294967295L, jarArchiveEntry0.getSize());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.toString());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals(8, jarArchiveEntry0.getMethod());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertEquals("nc%)u!yM/E4U", jarArchiveEntry0.getName());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertNull(jarArchiveEntry0.getComment());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());


[MASTER] 22:22:09.642 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:22:09.643 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertNotNull(zipArchiveOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertNotNull(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());

zipArchiveEntry0.setPlatform(3);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(3, zipArchiveEntry0.getPlatform());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(48, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.finish();
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0003\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000.\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(116, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());


* Permissions denied during test execution: 
  - java.io.FilePermission: 
         write UTF-16BE: 1
         write |H:r%j0X(j.()unH=: 1
         write /tmp/CRDEtV0z53r{q"/0PDtotVz: 1
         and other 1981 cases of action/name for this exception class
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 271
  - java.net.SocketPermission: 
         connect,resolve 200.42.42.0:2162: 1
         listen,resolve localhost:292: 1
         listen,resolve localhost:0: 1
* Writing tests to file
* Writing JUnit test case 'ZipArchiveOutputStream_ESTest' to results/Compress-43/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/BBC-F0-50/tests/19
* Done!

* Computation finished
