* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Starting Client-0
* Connecting to master process on port 10887
* Analyzing classpath: 
  - subjects/buggy-versions/Compress-43/target/classes
  - defects4j/framework/projects/Compress/lib/org/brotli/dec/0.1.2/dec-0.1.2.jar
  - defects4j/framework/projects/Compress/lib/org/tukaani/xz/1.6/xz-1.6.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2207
* Using seed 1681754222
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 864 / 2207
[MASTER] 22:06:23.049 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:07:48.531 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1683: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - true: 441
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding()Ljava/lang/String;: root-Branch: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1682: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1547: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1243: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1242: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1684: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1241: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1681: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - false: 345
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1549: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1245: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I18 Branch 48 IFNE L813 - true: 224
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1235: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1234: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I12 Branch 145 IF_ICMPNE L1572 - true: 1037
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1240: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1239: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I29 Branch 18 IFEQ L584 - true: 9149
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I29 Branch 97 IFNE L1176 - true: 242
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1231: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I51 Branch 93 IF_ACMPEQ L1152 - false: 417
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I29 Branch 18 IFEQ L584 - false: 94
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - true: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - false: 116
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I33 Branch 32 IFNE L677 - true: 2170
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - true: 49
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I207 Branch 84 IFNULL L1090 - false: 451
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - false: 54
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1528: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I41 Branch 61 IF_ICMPEQ L877 - true: 80
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1532: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I24 Branch 65 IFEQ L902 - false: 204
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1531: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1536: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I4 Branch 135 IF_ICMPNE L1493 - false: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1034: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I32 Branch 102 IF_ACMPNE L1201 - false: 1171
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1035: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I13 Branch 125 IFNE L1393 - true: 380
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I53 Branch 94 IFNE L1152 - true: 417
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1036: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: Line 812: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1037: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I53 Branch 94 IFNE L1152 - false: 17840
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: I4 Branch 1 IFNULL L338 - true: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1038: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I22 Branch 57 IFNULL L848 - false: 94
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: root-Branch: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: I4 Branch 1 IFNULL L338 - false: 460
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I18 Branch 99 IFGE L1201 - true: 7638
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I8 Branch 5 IFEQ L377 - false: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - true: 1686
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 95 IF_ICMPNE L1171 - true: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - false: 6663
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I7 Branch 60 IF_ICMPLE L872 - false: 73
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I8 Branch 5 IFEQ L377 - true: 506
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 95 IF_ICMPNE L1171 - false: 577
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I28 Branch 128 IF_ICMPLT L1393 - false: 9922
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 963: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 964: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I45 Branch 23 IFEQ L620 - true: 392
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 960: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([BII)V: Line 1470: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([BII)V: Line 1469: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - false: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I67 Branch 51 IFLT L825 - false: 10672
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I4 Branch 149 IFNULL L1599 - false: 79
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - true: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - true: 1564
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - false: 1564
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - true: 3810
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I4 Branch 6 IFEQ L462 - false: 296
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I4 Branch 149 IFNULL L1599 - true: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I4 Branch 59 IF_ICMPLT L872 - true: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I9 Branch 54 IFGE L848 - true: 9303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: root-Branch: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: I4 Branch 138 IFEQ L1514 - false: 569
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - false: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - false: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - true: 1904
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I268 Branch 87 IF_ICMPEQ L1107 - false: 18
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - true: 512
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1308: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1306: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1305: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1312: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1311: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1321: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1355: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1356: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1303: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - false: 345
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - true: 2680
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1290: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1642: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1296: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1643: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - false: 94
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1644: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1293: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1284: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1282: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1287: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - true: 957
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I4 Branch 59 IF_ICMPLT L872 - false: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 610: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I21 Branch 64 IF_ICMPEQ L902 - true: 6663
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1279: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I60 Branch 118 IFGE L1333 - true: 7044
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1268: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - false: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - false: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - true: 20383
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - true: 1189
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1269: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1259: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1348: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - true: 2705
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1263: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1351: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1352: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1252: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1249: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1256: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1254: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - false: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - false: 1370
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1253: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 535: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 533: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 534: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I25 Branch 117 IF_ACMPNE L1323 - false: 889
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I4 Branch 4 IFEQ L377 - false: 110
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 531: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 532: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 530: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 596: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I243 Branch 113 IF_ACMPNE L1296 - false: 1787
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I4 Branch 4 IFEQ L377 - true: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I15 Branch 2 IFEQ L353 - false: 159
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 599: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I15 Branch 2 IFEQ L353 - true: 237
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: Line 872: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I84 Branch 79 IFEQ L1062 - false: 2349
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([BII)V: root-Branch: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - false: 1370
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I13 Branch 98 IFNE L1201 - false: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: I19 Branch 71 IF_ACMPEQ L1028 - false: 3050
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I13 Branch 98 IFNE L1201 - true: 570
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I81 Branch 38 IFEQ L759 - true: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1338: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - true: 12
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I81 Branch 38 IFEQ L759 - false: 126
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - false: 1744
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - true: 5813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - true: 852
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1163: 5813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: Line 924: 52
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: Line 923: 52
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - false: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - true: 112
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1147: 5813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1148: 5813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - false: 920
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted([B)V: Line 933: 19
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I34 Branch 19 IFEQ L584 - true: 11319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I8 Branch 144 IFNONNULL L1572 - true: 94
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 727: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 728: 199
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - false: 141
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1138: 5813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - true: 11455
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - true: 1189
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - false: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I11 Branch 30 IFLT L663 - false: 25522
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - true: 1222
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I26 Branch 74 IFNULL L1050 - false: 1370
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I8 Branch 28 IFEQ L659 - false: 19399
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I7 Branch 90 IFNE L1138 - false: 18767
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - true: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - false: 26479
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - false: 9706
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - true: 3821
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: root-Branch: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: Line 1389: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - false: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I14 Branch 150 IFNULL L1602 - false: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: I4 Branch 137 IF_ICMPNE L1497 - false: 690
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I14 Branch 150 IFNULL L1602 - true: 79
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I18 Branch 3 IFNE L353 - true: 438
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I24 Branch 8 IFEQ L486 - false: 343
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - true: 9338
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - false: 6155
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I25 Branch 120 IF_ICMPLE L1356 - false: 9812
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I29 Branch 7 IFNULL L466 - false: 272
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I24 Branch 73 IFGT L1050 - true: 5215
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I25 Branch 120 IF_ICMPLE L1356 - true: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - true: 10170
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I38 Branch 76 IFNULL L1054 - false: 1370
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - false: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - true: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I38 Branch 129 IFNE L1400 - true: 380
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - false: 174
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - true: 225
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - false: 208
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: Line 378: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: Line 377: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1196: 493
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - false: 787
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1195: 493
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1194: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - true: 3522
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I3 Branch 133 IFEQ L1483 - false: 122
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - true: 54401
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - true: 216
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - false: 54401
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I7 Branch 90 IFNE L1138 - true: 367
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - false: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1171: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - true: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - false: 17066
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 659: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I11 Branch 147 IFNE L1583 - false: 54362
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: Line 663: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - false: 9654
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I248 Branch 86 IFEQ L1104 - false: 481
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I6 Branch 11 IFNULL L538 - false: 575
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I14 Branch 55 IFGE L848 - true: 29821
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: Line 889: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I128 Branch 34 IFNE L696 - true: 2170
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - true: 387
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: Line 888: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 798: 345
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 794: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I21 Branch 116 IFGE L1323 - true: 1459
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I84 Branch 24 IFEQ L628 - false: 1444
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 652: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - false: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 651: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I178 Branch 43 IFEQ L782 - false: 173
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I43 Branch 122 IFLE L1361 - false: 16024
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - true: 1971
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I5 Branch 142 IFNULL L1559 - false: 122
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - false: 83
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - true: 3522
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I36 Branch 75 IF_ICMPGT L1054 - true: 1488
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - false: 1370
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1628: 90124
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding()Ljava/lang/String;: Line 364: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1629: 90124
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1630: 90124
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: Line 936: 1358
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I84 Branch 24 IFEQ L628 - true: 392
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - true: 15146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I160 Branch 110 IFGE L1269 - true: 2963
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I23 Branch 100 IFGE L1201 - true: 5804
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I29 Branch 37 IFNULL L747 - false: 213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 351: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - true: 2272
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 356: 159
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 353: 159
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 352: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I60 Branch 50 IFGE L825 - true: 9338
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - false: 248
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - false: 715
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 677: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 676: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 675: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 673: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - true: 957
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - true: 224
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I23 Branch 127 IFGE L1393 - true: 16138
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I29 Branch 14 IFNONNULL L553 - true: 174
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 685: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 305: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 304: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 307: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 306: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - true: 1334
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 801: 345
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - false: 1154
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1200: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1201: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1207: 493
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I10 Branch 72 IFNULL L1045 - false: 1331
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - false: 9815
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 584: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 588: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 297: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 587: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - true: 9815
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 590: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 299: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I11 Branch 140 IFNE L1529 - true: 1098
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 589: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 298: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 716: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 301: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 715: 3413
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 300: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 303: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 302: 15004
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - false: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 578: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 577: 1265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I11 Branch 130 IFNE L1475 - false: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1022: 112
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I17 Branch 146 IFEQ L1572 - false: 176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I175 Branch 42 IF_ICMPNE L782 - true: 1395
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I24 Branch 132 IFEQ L1476 - false: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - false: 18207
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 517: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 513: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 514: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 515: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - true: 137
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 516: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I164 Branch 111 IF_ACMPNE L1269 - false: 1787
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 510: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 511: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 512: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 508: 161
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - false: 3810
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - false: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - false: 5862
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - true: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 546: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 545: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - true: 5813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - true: 1904
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1657: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - true: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - false: 1477
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I155 Branch 80 IFNE L1079 - false: 52015
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1653: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - true: 16024
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I19 Branch 56 IFNE L848 - true: 184
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1662: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - false: 16024
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1666: 265
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I191 Branch 82 IFEQ L1088 - false: 659
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - true: 493
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I18 Branch 126 IFGE L1393 - true: 16138
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - false: 542
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I204 Branch 83 IF_ICMPEQ L1090 - true: 137
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - true: 18
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - true: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - false: 1424
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - false: 787
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - true: 4440
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I171 Branch 35 IFEQ L710 - true: 11718
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: Line 338: 353
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 542: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 538: 987
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: I4 Branch 66 IFNONNULL L918 - true: 188
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - false: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I11 Branch 134 IFEQ L1486 - false: 137
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 782: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - false: 14096
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1599: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1602: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - true: 2826
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1605: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - true: 15620
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 787: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I4 Branch 62 IFEQ L900 - false: 47
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - false: 52054
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 786: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - false: 15620
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I5 Branch 124 IF_ACMPNE L1389 - false: 3737
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 473: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - true: 52054
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 475: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 474: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 477: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 476: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I5 Branch 124 IF_ACMPNE L1389 - true: 24
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 479: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 743: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 478: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 480: 41
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - true: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 759: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 757: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 756: 114
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 754: 81
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - false: 1682
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 752: 81
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I122 Branch 40 IFNE L768 - false: 852
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - true: 3573
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 495: 19
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: root-Branch: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - false: 111
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - false: 1454
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 848: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: Line 1572: 537
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1126: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I4 Branch 13 IFEQ L549 - false: 698
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I7 Branch 136 IFNONNULL L1493 - false: 137
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1118: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - true: 17066
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I7 Branch 136 IFNONNULL L1493 - true: 155
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1124: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1121: 98
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I64 Branch 119 IF_ACMPNE L1333 - false: 889
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1115: 98
Number of times BBC is called in total: 1622949
* Search finished after 604s and 968 generations, 425168 statements, best individual has fitness: 225.0
* Minimizing test suite
[MASTER] 22:17:34.554 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 514
* Number of covered goals: 491
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 320
* Number of covered goals: 291
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 68
* Number of covered goals: 68
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 978
* Number of covered goals: 917
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 11
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 320
* Number of covered goals: 274
* Generated 180 tests with total length 2386
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:18:22.399 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7601% of time used, but only 77/180 tests minimized), falling back to using all assertions
[MASTER] 22:18:37.561 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
[MASTER] 22:19:25.871 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...               PK[]           > but was:<...               PK[]           >
[MASTER] 22:19:25.871 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.flush();
byteArrayOutputStream0.flush();
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
System.setCurrentTimeMillis(0);
zipArchiveOutputStream0.writeCentralDirectoryEnd();
zipArchiveOutputStream0.getEncoding();
zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(144, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a filePK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0001\u0002\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:19:26.075 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...                 PK[]    0       > but was:<...                 PK[]    0       >
[MASTER] 22:19:26.075 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
FileSystemHandling.createFolder((EvoSuiteFile) null);
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
byteArrayOutputStream0.flush();
SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(94, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002\u0014\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0001\u0002\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:19:26.302 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...riting to a file PK[           PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file? PK????????????PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file PK           PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file PK]           PK ...> but was:<...riting to a file PK[           PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file? PK????????????PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file PK           PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file PK]           PK ...>
[MASTER] 22:19:26.303 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.flush();
byteArrayOutputStream0.flush();
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte) (-13);
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.writeZip64CentralDirectory();
zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000PK\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\u0000PK\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000PK\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000PK\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());


[MASTER] 22:19:27.498 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<... writing to a file [?                    PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file?? ]????????????> but was:<... writing to a file [PK                   PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file?PK]????????????>
[MASTER] 22:19:27.513 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertNotNull(zipArchiveOutputStream0);

zipArchiveOutputStream0.flush();
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

byteArrayOutputStream0.flush();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNotNull(zipArchiveEntry0);

boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(boolean0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(104, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte) (-13);
ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry1.isDirectory());
assertFalse(zipArchiveEntry1.isUnixSymlink());
assertEquals(8, zipArchiveEntry1.getMethod());
assertEquals(0, zipArchiveEntry1.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
assertEquals((-1L), zipArchiveEntry1.getCrc());
assertNull(zipArchiveEntry1.getComment());
assertFalse(zipArchiveEntry1.isStreamContiguous());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.getName());
assertEquals((-1L), zipArchiveEntry1.getSize());
assertEquals((-1L), zipArchiveEntry1.getDataOffset());
assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.toString());
assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
assertEquals(0, zipArchiveEntry1.getPlatform());
assertEquals(0, zipArchiveEntry1.getUnixMode());
assertEquals(0, zipArchiveEntry1.getVersionRequired());
assertEquals(0, zipArchiveEntry1.getRawFlag());
assertNotNull(zipArchiveEntry1);
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));

ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
assertEquals(1, byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);

X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
assertNotNull(x000A_NTFS0);

ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
assertNotNull(zipEightByteInteger0);

Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
assertNotNull(zip64ExtendedInformationExtraField0);

zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(251, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(375, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(525, byteArrayOutputStream0.size());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));

zipArchiveOutputStream0.writeZip64CentralDirectory();
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(525, byteArrayOutputStream0.size());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(655, byteArrayOutputStream0.size());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);

zipArchiveOutputStream0.close();
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(1365, byteArrayOutputStream0.size());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);

[MASTER] 22:19:28.561 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<... writing to a file [?            PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file ? ]????????????> but was:<... writing to a file [PK           PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file PK]????????????>
[MASTER] 22:19:28.579 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertNotNull(zipArchiveOutputStream0);

zipArchiveOutputStream0.flush();
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

byteArrayOutputStream0.flush();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNotNull(zipArchiveEntry0);

boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(boolean0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(104, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());

byte[] byteArray0 = new byte[1];
ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry1.getRawFlag());
assertEquals(0, zipArchiveEntry1.getUnixMode());
assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry1.getCrc());
assertEquals((-1L), zipArchiveEntry1.getSize());
assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.getName());
assertEquals(0, zipArchiveEntry1.getVersionRequired());
assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
assertEquals(0, zipArchiveEntry1.getInternalAttributes());
assertFalse(zipArchiveEntry1.isStreamContiguous());
assertEquals(8, zipArchiveEntry1.getMethod());
assertFalse(zipArchiveEntry1.isDirectory());
assertEquals(0, zipArchiveEntry1.getPlatform());
assertNull(zipArchiveEntry1.getComment());
assertEquals((-1L), zipArchiveEntry1.getDataOffset());
assertFalse(zipArchiveEntry1.isUnixSymlink());
assertNotNull(zipArchiveEntry1);
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));

ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
assertEquals(1, byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)0}, byteArray0);

X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
assertNotNull(x000A_NTFS0);

ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
assertNotNull(zipEightByteInteger0);

Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
assertNotNull(zip64ExtendedInformationExtraField0);

zipArchiveEntry0.addAsFirstExtraField(x000A_NTFS0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry1, byteArrayInputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(243, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry1.getRawFlag());
assertEquals(0, zipArchiveEntry1.getUnixMode());
assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry1.getCrc());
assertEquals((-1L), zipArchiveEntry1.getSize());
assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.getName());
assertEquals(0, zipArchiveEntry1.getVersionRequired());
assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
assertEquals(0, zipArchiveEntry1.getInternalAttributes());
assertFalse(zipArchiveEntry1.isStreamContiguous());
assertEquals(8, zipArchiveEntry1.getMethod());
assertFalse(zipArchiveEntry1.isDirectory());
assertEquals(0, zipArchiveEntry1.getPlatform());
assertNull(zipArchiveEntry1.getComment());
assertEquals((-1L), zipArchiveEntry1.getDataOffset());
assertFalse(zipArchiveEntry1.isUnixSymlink());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)0}, byteArray0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(347, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry1.getRawFlag());
assertEquals(0, zipArchiveEntry1.getUnixMode());
assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry1.getCrc());
assertEquals((-1L), zipArchiveEntry1.getSize());
assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.getName());
assertEquals(0, zipArchiveEntry1.getVersionRequired());
assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
assertEquals(0, zipArchiveEntry1.getInternalAttributes());
assertFalse(zipArchiveEntry1.isStreamContiguous());
assertEquals(8, zipArchiveEntry1.getMethod());
assertFalse(zipArchiveEntry1.isDirectory());
assertEquals(0, zipArchiveEntry1.getPlatform());
assertNull(zipArchiveEntry1.getComment());
assertEquals((-1L), zipArchiveEntry1.getDataOffset());
assertFalse(zipArchiveEntry1.isUnixSymlink());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry1);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(469, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry1.getRawFlag());
assertEquals(0, zipArchiveEntry1.getUnixMode());
assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry1.getCrc());
assertEquals(0L, zipArchiveEntry1.getSize());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.toString());
assertEquals(2L, zipArchiveEntry1.getCompressedSize());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.getName());
assertEquals(0, zipArchiveEntry1.getVersionRequired());
assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
assertEquals(0, zipArchiveEntry1.getInternalAttributes());
assertFalse(zipArchiveEntry1.isStreamContiguous());
assertEquals(8, zipArchiveEntry1.getMethod());
assertFalse(zipArchiveEntry1.isDirectory());
assertEquals(0, zipArchiveEntry1.getPlatform());
assertNull(zipArchiveEntry1.getComment());
assertEquals((-1L), zipArchiveEntry1.getDataOffset());
assertFalse(zipArchiveEntry1.isUnixSymlink());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertFalse(zipArchiveEntry1.equals((Object)zipArchiveEntry0));

zipArchiveOutputStream0.writeZip64CentralDirectory();
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(469, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000$\u0000uncompressed size is required for STORED method when not writing to a file\n\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(627, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte)0}, byteArray0);

zipArchiveOutputStream0.close();
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(1321, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);

[MASTER] 22:19:29.151 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<... writing to a file [?                    PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file?? ]????????????> but was:<... writing to a file [PK                   PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file?PK]????????????>
[MASTER] 22:19:29.172 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertNotNull(zipArchiveOutputStream0);

zipArchiveOutputStream0.flush();
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

byteArrayOutputStream0.flush();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertNotNull(zipArchiveEntry0);

boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(boolean0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(104, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());

byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte) (-13);
JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertNull(jarArchiveEntry0.getComment());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.toString());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals("uncompressed size is required for STORED method when not writing to a file", jarArchiveEntry0.getName());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertNotNull(jarArchiveEntry0);

ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
assertEquals(1, byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);

X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
assertNotNull(x000A_NTFS0);

ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
assertNotNull(zipEightByteInteger0);

byte[] byteArray1 = zipEightByteInteger0.getBytes();
assertNotNull(byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(8, byteArray1.length);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);

Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
assertNotNull(zip64ExtendedInformationExtraField0);

zipArchiveEntry0.addAsFirstExtraField(zip64ExtendedInformationExtraField0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(251, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0L, zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(byteArray0, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(375, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0L, zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(525, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0L, zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());

zipArchiveOutputStream0.writeZip64CentralDirectory();
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(525, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDJ\u0000\u0014\u0000uncompressed size is required for STORED method when not writing to a file\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(655, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0L, zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(byteArray0, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals(1, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);

zipArchiveOutputStream0.close();
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(1365, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(1, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(1L, zipArchiveOutputStream0.getBytesWritten());

File file0 = MockFile.createTempFile("BUN", "org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry");
assertEquals(0L, file0.getTotalSpace());
assertEquals("/tmp/BUN0org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", file0.toString());
assertTrue(file0.exists());
assertEquals(0L, file0.length());
assertEquals(1392409281320L, file0.lastModified());
assertTrue(file0.canRead());
assertEquals("/tmp", file0.getParent());
assertTrue(file0.isFile());
assertFalse(file0.isHidden());
assertEquals(0L, file0.getUsableSpace());
assertEquals("BUN0org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", file0.getName());
assertTrue(file0.isAbsolute());
assertTrue(file0.canExecute());
assertTrue(file0.canWrite());
assertEquals(0L, file0.getFreeSpace());
assertFalse(file0.isDirectory());
assertNotNull(file0);

zipArchiveOutputStream0.createArchiveEntry(file0, "");

[MASTER] 22:19:30.589 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<... writing to a file [?            PK  ??ND            J  uncompressed size is required for STORED method when not writing to a file?  ????? ]????????????> but was:<... writing to a file [PK           PK  ??ND            J  uncompressed size is required for STORED method when not writing to a file?  ????PK]????????????>
[MASTER] 22:19:30.600 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNotNull(zipArchiveEntry0);

boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(boolean0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(104, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());

GeneralPurposeBit generalPurposeBit0 = new GeneralPurposeBit();
assertEquals(2048, GeneralPurposeBit.UFT8_NAMES_FLAG);
assertFalse(generalPurposeBit0.usesStrongEncryption());
assertFalse(generalPurposeBit0.usesDataDescriptor());
assertFalse(generalPurposeBit0.usesEncryption());
assertFalse(generalPurposeBit0.usesUTF8ForNames());
assertNotNull(generalPurposeBit0);

zipArchiveEntry0.setGeneralPurposeBit(generalPurposeBit0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(2048, GeneralPurposeBit.UFT8_NAMES_FLAG);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(generalPurposeBit0.usesStrongEncryption());
assertFalse(generalPurposeBit0.usesDataDescriptor());
assertFalse(generalPurposeBit0.usesEncryption());
assertFalse(generalPurposeBit0.usesUTF8ForNames());

ZipArchiveEntry zipArchiveEntry1 = (ZipArchiveEntry)zipArchiveEntry0.clone();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry1.isStreamContiguous());
assertEquals(0, zipArchiveEntry1.getInternalAttributes());
assertEquals(0, zipArchiveEntry1.getPlatform());
assertEquals(8, zipArchiveEntry1.getMethod());
assertFalse(zipArchiveEntry1.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry1.getCompressedSize());
assertEquals(0L, zipArchiveEntry1.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.getName());
assertEquals(0, zipArchiveEntry1.getVersionRequired());
assertEquals(0, zipArchiveEntry1.getUnixMode());
assertEquals(0, zipArchiveEntry1.getRawFlag());
assertEquals(0, zipArchiveEntry1.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry1.getSize());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry1.toString());
assertEquals((-1L), zipArchiveEntry1.getDataOffset());
assertFalse(zipArchiveEntry1.isDirectory());
assertNull(zipArchiveEntry1.getComment());
assertEquals((-1L), zipArchiveEntry1.getCrc());
assertNotNull(zipArchiveEntry1);
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertNotSame(zipArchiveEntry1, zipArchiveEntry0);
assertTrue(zipArchiveEntry1.equals((Object)zipArchiveEntry0));

byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte) (-13);
byteArray0[1] = (byte) (-13);
byteArray0[2] = (byte) (-13);
byteArray0[3] = (byte) (-13);
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
assertEquals(4, byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertEquals(4, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13)}, byteArray0);

X000A_NTFS x000A_NTFS0 = new X000A_NTFS();
assertNotNull(x000A_NTFS0);

ZipEightByteInteger zipEightByteInteger0 = x000A_NTFS0.getModifyTime();
assertNotNull(zipEightByteInteger0);

Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
assertNotNull(zip64ExtendedInformationExtraField0);

ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(1);
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
assertEquals((short)1, resourceAlignmentExtraField0.getAlignment());
assertFalse(resourceAlignmentExtraField0.allowMethodChange());
assertNotNull(resourceAlignmentExtraField0);

zipArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((short)1, resourceAlignmentExtraField0.getAlignment());
assertFalse(resourceAlignmentExtraField0.allowMethodChange());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
assertEquals(252, byteArrayOutputStream0.size());
assertEquals(4, zipArchiveOutputStream0.getCount());
assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertEquals(4, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13)}, byteArray0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(362, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000", byteArrayOutputStream0.toString());
assertEquals(4, zipArchiveOutputStream0.getCount());
assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(490, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000", byteArrayOutputStream0.toString());
assertEquals(4, zipArchiveOutputStream0.getCount());
assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));

zipArchiveOutputStream0.writeZip64CentralDirectory();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(490, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000", byteArrayOutputStream0.toString());
assertEquals(4, zipArchiveOutputStream0.getCount());
assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0006\u0000uncompressed size is required for STORED method when not writing to a file\u001E\uFFFD\u0002\u0000\u0001\u0000", byteArrayOutputStream0.toString());
assertEquals(618, byteArrayOutputStream0.size());
assertEquals(4, zipArchiveOutputStream0.getCount());
assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertNull(zipArchiveEntry0.getComment());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, byteArrayInputStream0.available());
assertNotSame(zipArchiveEntry0, zipArchiveEntry1);
assertFalse(zipArchiveEntry0.equals((Object)zipArchiveEntry1));
assertEquals(4, byteArray0.length);
assertArrayEquals(new byte[] {(byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13)}, byteArray0);

zipArchiveOutputStream0.close();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(1270, byteArrayOutputStream0.size());
assertEquals(4, zipArchiveOutputStream0.getCount());
assertEquals(4L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);

[MASTER] 22:19:31.739 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<... writing to a file [?            PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file  ? ]????????????> but was:<... writing to a file [PK           PK  ??ND            J   uncompressed size is required for STORED method when not writing to a file  PK]????????????>
[MASTER] 22:19:31.745 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertNotNull(zipArchiveOutputStream0);

zipArchiveOutputStream0.flush();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

byteArrayOutputStream0.flush();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("uncompressed size is required for STORED method when not writing to a file");
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertNotNull(zipArchiveEntry0);

boolean boolean0 = zipArchiveOutputStream0.finished;
assertFalse(boolean0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(104, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

byte[] byteArray0 = new byte[2];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
assertEquals(2, byteArrayInputStream0.available());
assertNotNull(byteArrayInputStream0);
assertEquals(2, byteArray0.length);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
assertEquals(244, byteArrayOutputStream0.size());
assertEquals(2, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(2L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, byteArrayInputStream0.available());
assertEquals(2, byteArray0.length);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(348, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(2, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(2L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(470, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(2, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(2L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

zipArchiveOutputStream0.writeZip64CentralDirectory();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(470, byteArrayOutputStream0.size());
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(2, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(2L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0000\u0000\uFFFD\u0000\u0001\u0002\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file\u0003\u0000\uFFFD\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000uncompressed size is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(592, byteArrayOutputStream0.size());
assertEquals(2, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(2L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals("uncompressed size is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, byteArrayInputStream0.available());
assertEquals(2, byteArray0.length);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);

zipArchiveOutputStream0.close();
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(1214, byteArrayOutputStream0.size());
assertEquals(2, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(2L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.closeArchiveEntry();

[MASTER] 22:19:35.670 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.io.FilePermission: 
         write /tmp/ value0`5: 1
         write /experiment/c/X$ijF2Byh: 1
         write  Masked: : 2
         and other 1837 cases of action/name for this exception class
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 154
  - java.net.SocketPermission: 
         listen,resolve localhost:0: 1
         connect,resolve 192.168.1.42:0: 1
* Writing tests to file
* Writing JUnit test case 'ZipArchiveOutputStream_ESTest' to results/Compress-43/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/BBC-F0-50/tests/14
* Done!

* Computation finished
