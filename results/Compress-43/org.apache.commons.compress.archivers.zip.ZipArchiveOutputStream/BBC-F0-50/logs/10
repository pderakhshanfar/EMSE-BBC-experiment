* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Starting Client-0
* Connecting to master process on port 3544
* Analyzing classpath: 
  - subjects/buggy-versions/Compress-43/target/classes
  - defects4j/framework/projects/Compress/lib/org/brotli/dec/0.1.2/dec-0.1.2.jar
  - defects4j/framework/projects/Compress/lib/org/tukaani/xz/1.6/xz-1.6.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2207
* Using seed 1902786761
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 864 / 2207
[MASTER] 22:05:20.648 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:05:24.400 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1683: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - true: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding()Ljava/lang/String;: root-Branch: 810
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1682: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1547: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1243: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1242: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1684: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1241: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([B)V: Line 1456: 355
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([B)V: Line 1457: 831
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1681: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - false: 348
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1549: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1245: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I18 Branch 48 IFNE L813 - true: 1108
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1235: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1234: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I12 Branch 145 IF_ICMPNE L1572 - true: 301
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1240: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1239: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I29 Branch 18 IFEQ L584 - true: 8583
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I51 Branch 93 IF_ACMPEQ L1152 - true: 117
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I29 Branch 97 IFNE L1176 - true: 1569
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1231: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I51 Branch 93 IF_ACMPEQ L1152 - false: 110
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - true: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - false: 1288
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I33 Branch 32 IFNE L677 - true: 4299
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - true: 511
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I207 Branch 84 IFNULL L1090 - false: 301
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - false: 4726
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1528: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I41 Branch 61 IF_ICMPEQ L877 - true: 134
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1532: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I24 Branch 65 IFEQ L902 - false: 585
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1531: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1536: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I4 Branch 135 IF_ICMPNE L1493 - false: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1034: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I32 Branch 102 IF_ACMPNE L1201 - false: 585
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1035: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I13 Branch 125 IFNE L1393 - true: 1350
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1036: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: Line 812: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1037: 251
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I53 Branch 94 IFNE L1152 - false: 21861
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1038: 251
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I22 Branch 57 IFNULL L848 - false: 1158
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: root-Branch: 169
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: I4 Branch 1 IFNULL L338 - false: 350
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I18 Branch 99 IFGE L1201 - true: 11297
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I8 Branch 5 IFEQ L377 - false: 85
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - true: 4621
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - false: 5022
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I8 Branch 5 IFEQ L377 - true: 1066
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 95 IF_ICMPNE L1171 - false: 1062
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I28 Branch 128 IF_ICMPLT L1393 - false: 8515
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 963: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 964: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I45 Branch 23 IFEQ L620 - true: 1284
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 960: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([BII)V: Line 1470: 4
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I7 Branch 60 IF_ICMPLE L872 - true: 81
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I45 Branch 23 IFEQ L620 - false: 4235
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - false: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I67 Branch 51 IFLT L825 - false: 25392
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I4 Branch 149 IFNULL L1599 - false: 146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - true: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - true: 4796
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - false: 4796
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - true: 5250
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I4 Branch 6 IFEQ L462 - false: 470
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I4 Branch 149 IFNULL L1599 - true: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I4 Branch 59 IF_ICMPLT L872 - true: 177
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I9 Branch 54 IFGE L848 - true: 29325
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I4 Branch 6 IFEQ L462 - true: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: root-Branch: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: I4 Branch 138 IFEQ L1514 - false: 1306
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - false: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - false: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: I4 Branch 138 IFEQ L1514 - true: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - true: 10030
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I268 Branch 87 IF_ICMPEQ L1107 - false: 434
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - true: 552
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1308: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1306: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1305: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1312: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1311: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1321: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1303: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - false: 348
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - true: 8296
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1290: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1642: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1296: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1643: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - false: 1158
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1644: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1293: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1284: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1282: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1287: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - true: 7299
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I4 Branch 59 IF_ICMPLT L872 - false: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 610: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I21 Branch 64 IF_ICMPEQ L902 - true: 11029
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1279: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I60 Branch 118 IFGE L1333 - true: 5610
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1268: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - false: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V: root-Branch: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - false: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - true: 31541
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - true: 4109
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1269: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1259: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - true: 307
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1263: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1252: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1249: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1256: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1254: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - false: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - false: 702
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1253: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 535: 5206
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 533: 5206
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 534: 5206
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I25 Branch 117 IF_ACMPNE L1323 - true: 1450
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I4 Branch 4 IFEQ L377 - false: 436
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 531: 5206
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 532: 5206
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 530: 5206
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 596: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I243 Branch 113 IF_ACMPNE L1296 - false: 622
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I4 Branch 4 IFEQ L377 - true: 355
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I15 Branch 2 IFEQ L353 - false: 505
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 599: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I84 Branch 79 IFEQ L1062 - true: 395
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I15 Branch 2 IFEQ L353 - true: 633
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: Line 872: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I84 Branch 79 IFEQ L1062 - false: 3560
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I47 Branch 68 IFLT L942 - false: 359
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - false: 1266
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I13 Branch 98 IFNE L1201 - false: 169
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: I19 Branch 71 IF_ACMPEQ L1028 - false: 2029
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I13 Branch 98 IFNE L1201 - true: 1189
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I81 Branch 38 IFEQ L759 - true: 146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1338: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I47 Branch 68 IFLT L942 - true: 191
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - true: 1034
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I81 Branch 38 IFEQ L759 - false: 1180
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - false: 3995
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - true: 7303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - true: 1938
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1163: 7303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: Line 918: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - false: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - true: 318
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1147: 7303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1148: 7303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - false: 7403
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I34 Branch 19 IFEQ L584 - true: 9005
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I8 Branch 144 IFNONNULL L1572 - true: 1201
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 727: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 728: 181
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - false: 421
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1138: 7303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - true: 17479
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - true: 4109
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - false: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I11 Branch 30 IFLT L663 - false: 11912
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - true: 6226
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I26 Branch 74 IFNULL L1050 - false: 1286
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I8 Branch 28 IFEQ L659 - false: 11762
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I7 Branch 90 IFNE L1138 - false: 26706
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - true: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - false: 27679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - false: 26150
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - true: 3109
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: root-Branch: 5206
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: Line 1389: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - false: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I24 Branch 8 IFEQ L486 - true: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I14 Branch 150 IFNULL L1602 - false: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: I4 Branch 137 IF_ICMPNE L1497 - false: 2032
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I14 Branch 150 IFNULL L1602 - true: 62
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I18 Branch 3 IFNE L353 - true: 1605
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I24 Branch 8 IFEQ L486 - false: 690
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - true: 25392
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - false: 7452
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I25 Branch 120 IF_ICMPLE L1356 - false: 8765
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: root-Branch: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: Line 974: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I29 Branch 7 IFNULL L466 - false: 569
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I24 Branch 73 IFGT L1050 - true: 251
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: Line 977: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - true: 11091
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I38 Branch 76 IFNULL L1054 - false: 1520
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - false: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I41 Branch 61 IF_ICMPEQ L877 - false: 81
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - true: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I38 Branch 129 IFNE L1400 - true: 1350
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - false: 491
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - true: 1118
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - false: 320
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: Line 378: 355
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: Line 377: 355
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1196: 594
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - false: 7334
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1195: 594
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1194: 169
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - true: 25696
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I3 Branch 133 IFEQ L1483 - false: 1689
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - true: 67256
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - true: 716
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - false: 67256
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I7 Branch 90 IFNE L1138 - true: 162
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - false: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - true: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - false: 22493
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 659: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I11 Branch 147 IFNE L1583 - false: 67200
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: Line 663: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - false: 8917
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I248 Branch 86 IFEQ L1104 - false: 211
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I6 Branch 11 IFNULL L538 - false: 6071
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I14 Branch 55 IFGE L848 - true: 26121
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: Line 889: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I128 Branch 34 IFNE L696 - true: 4299
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - true: 705
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: Line 888: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 798: 348
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 794: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I21 Branch 116 IFGE L1323 - true: 4988
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I84 Branch 24 IFEQ L628 - false: 4613
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 652: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - false: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 651: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I178 Branch 43 IFEQ L782 - false: 259
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I43 Branch 122 IFLE L1361 - false: 20732
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - true: 11996
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I5 Branch 142 IFNULL L1559 - false: 1934
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - false: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - true: 25696
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I36 Branch 75 IF_ICMPGT L1054 - true: 251
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - false: 1520
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: Line 1514: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate()V: root-Branch: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1628: 113759
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding()Ljava/lang/String;: Line 364: 810
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1629: 113759
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1630: 113759
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: Line 936: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: Line 947: 191
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - true: 2705
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I160 Branch 110 IFGE L1269 - true: 18299
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I23 Branch 100 IFGE L1201 - true: 19095
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I29 Branch 37 IFNULL L747 - false: 540
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 351: 445
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - true: 5068
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 356: 505
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 353: 505
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: Line 352: 445
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I60 Branch 50 IFGE L825 - true: 28591
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - false: 1270
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - false: 6667
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 677: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 676: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 675: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 673: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - true: 7299
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - true: 1108
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I23 Branch 127 IFGE L1393 - true: 17783
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V: Line 389: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V: Line 388: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I29 Branch 14 IFNONNULL L553 - true: 491
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 685: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 305: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([B)V: root-Branch: 355
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 304: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 307: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 306: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate()V: Line 1012: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - true: 1133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate()V: Line 1013: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 801: 348
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - false: 301
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1200: 169
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1201: 169
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1207: 594
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - false: 8804
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I10 Branch 72 IFNULL L1045 - false: 1418
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 584: 733
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: Line 452: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 588: 733
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 297: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 587: 733
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - true: 8804
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 590: 845
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 299: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I11 Branch 140 IFNE L1529 - true: 556
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 589: 845
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 298: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: Line 451: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 716: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 301: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 715: 25257
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 300: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 303: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 302: 14203
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - false: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 578: 733
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 577: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I11 Branch 130 IFNE L1475 - false: 438
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1022: 956
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I17 Branch 146 IFEQ L1572 - false: 202
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I175 Branch 42 IF_ICMPNE L782 - true: 852
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I24 Branch 132 IFEQ L1476 - false: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(Z)V: Line 403: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - false: 24764
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 517: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 513: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 514: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 515: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - true: 494
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 516: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I164 Branch 111 IF_ACMPNE L1269 - false: 622
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 510: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 511: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(Z)V: Line 402: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 512: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 508: 487
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - false: 5250
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - false: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - false: 11657
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - true: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 546: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 545: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - true: 7303
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - true: 10030
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1657: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - true: 733
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - false: 2054
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I155 Branch 80 IFNE L1079 - false: 66635
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1653: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - true: 20732
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I19 Branch 56 IFNE L848 - true: 202
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - false: 20732
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1662: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1666: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I191 Branch 82 IFEQ L1088 - false: 593
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - true: 594
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I18 Branch 126 IFGE L1393 - true: 17783
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - false: 1105
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I204 Branch 83 IF_ICMPEQ L1090 - true: 241
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - true: 434
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: I4 Branch 70 IFNULL L974 - false: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - true: 761
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - false: 733
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - false: 6642
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: I4 Branch 70 IFNULL L974 - true: 73
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - true: 3053
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I171 Branch 35 IFEQ L710 - true: 5276
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 542: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 538: 3813
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: I4 Branch 66 IFNONNULL L918 - false: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: I4 Branch 66 IFNONNULL L918 - true: 1393
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - false: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I11 Branch 134 IFEQ L1486 - false: 241
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 782: 146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - false: 9738
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1599: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1602: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - true: 1446
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: Line 1605: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - true: 18319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 462: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 787: 193
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I4 Branch 62 IFEQ L900 - false: 6
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - false: 66691
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 786: 146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - false: 18319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(Z)V: root-Branch: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I5 Branch 124 IF_ACMPNE L1389 - false: 1344
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - true: 66691
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I5 Branch 124 IF_ACMPNE L1389 - true: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 743: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - true: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 759: 146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 757: 146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 756: 146
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 754: 82
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - false: 1390
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 752: 82
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 494: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I122 Branch 40 IFNE L768 - false: 1938
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - true: 3143
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 495: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: root-Branch: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - false: 622
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - false: 4176
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 848: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: Line 1572: 1089
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1126: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I4 Branch 13 IFEQ L549 - false: 2218
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I7 Branch 136 IFNONNULL L1493 - false: 241
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1118: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - true: 22493
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I7 Branch 136 IFNONNULL L1493 - true: 1335
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1124: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1121: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1115: 185
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I64 Branch 119 IF_ACMPNE L1333 - true: 1450
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 484: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 483: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 486: 21
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 485: 21
Number of times BBC is called in total: 2538455
* Search finished after 605s and 1300 generations, 548383 statements, best individual has fitness: 255.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 514
* Number of covered goals: 490
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 320
* Number of covered goals: 286
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 77
* Number of covered goals: 77
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 978
* Number of covered goals: 906
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 11
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 32
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 320
* Number of covered goals: 269
* Generated 141 tests with total length 788
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:16:35.509 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7605166666666666% of time used, but only 65/141 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
[MASTER] 22:16:58.647 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:16:58.647 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
Zip64Mode zip64Mode0 = Zip64Mode.Always;
zipArchiveOutputStream0.setUseZip64(zip64Mode0);
zipArchiveOutputStream0.closeArchiveEntry();
zipArchiveOutputStream0.finish();
assertEquals(220, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0006\u0006,\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0006\u0007\u0000\u0000\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000J\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:17:04.357 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]-  ??ND    ??????...> but was:<[PK]-  ??ND    ??????...>
[MASTER] 22:17:04.358 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
X0019_EncryptionRecipientCertificateList x0019_EncryptionRecipientCertificateList0 = new X0019_EncryptionRecipientCertificateList();
zipExtraFieldArray0[0] = (ZipExtraField) x0019_EncryptionRecipientCertificateList0;
X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new X0015_CertificateIdForFile();
zipExtraFieldArray0[1] = (ZipExtraField) x0015_CertificateIdForFile0;
ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
byte[] byteArray0 = new byte[1];
BigInteger bigInteger0 = new BigInteger(byteArray0);
ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger(bigInteger0);
Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
zipExtraFieldArray0[3] = (ZipExtraField) zip64ExtendedInformationExtraField0;
zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(58, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001C\u0000\u0019\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:17:04.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]-  ??ND    ??????...> but was:<[PK]-  ??ND    ??????...>
[MASTER] 22:17:04.574 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[6];
JarMarker jarMarker0 = JarMarker.getInstance();
zipExtraFieldArray0[0] = (ZipExtraField) jarMarker0;
UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
zipExtraFieldArray0[1] = (ZipExtraField) unicodeCommentExtraField0;
X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
zipExtraFieldArray0[2] = (ZipExtraField) x7875_NewUnix0;
UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
zipExtraFieldArray0[3] = (ZipExtraField) unparseableExtraFieldData0;
Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
zipExtraFieldArray0[4] = (ZipExtraField) zip64ExtendedInformationExtraField0;
ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(28, true, 0);
zipExtraFieldArray0[5] = (ZipExtraField) resourceAlignmentExtraField0;
zipArchiveEntry0.setExtraFields(zipExtraFieldArray0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("\u0000\u0000\u0000\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u001E\u0000\uFFFD\uFFFD\u0000\u0000uc\u0000\u0000ux\u0007\u0000\u0001\u0002\uFFFD\u0003\u0002\uFFFD\u0003\u0001\u0000\u0000\u0000\u001E\uFFFD\u0003\u0000\u001C\uFFFD\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:17:05.458 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:05.458 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
zipArchiveEntry0.setComment("v1`6c9U%q(7poGEyXt6");
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:17:05.855 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:05.856 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
zipArchiveEntry0.setComment("v1`6c9U%q(7poGEyXt6");
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(67, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000up\u0005\u0000\u0001\u0000\u0000\u0000\u0000uc\u0018\u0000\u0001fl\uFFFD:v1`6c9U%q(7poGEyXt6", byteArrayOutputStream0.toString());


[MASTER] 22:17:06.086 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[      ??ND                 PK               ]   ??ND       ...> but was:<[PK  ??ND                 PK           PK]   ??ND       ...>
[MASTER] 22:17:06.086 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
zipArchiveEntry0.setComment("STICKY");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.closeArchiveEntry();
zipArchiveOutputStream0.finish();
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000STICKYPK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u00004\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(122, byteArrayOutputStream0.size());


[MASTER] 22:17:06.666 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]   ??ND          ...> but was:<[PK]   ??ND          ...>
[MASTER] 22:17:06.666 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.setEncoding((String) null);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\u0000\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:17:07.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[      ??ND                 PK               ]  ??ND         ...> but was:<[PK  ??ND                 PK           PK]  ??ND         ...>
[MASTER] 22:17:07.223 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.closeArchiveEntry();
byte[] byteArray0 = new byte[9];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)38, 337);
zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertEquals(78, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:17:07.508 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:07.508 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
byte[] byteArray0 = new byte[0];
zipArchiveOutputStream0.write(byteArray0, 0, 0);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());


[MASTER] 22:17:07.864 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:07.866 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());

MockFile mockFile0 = new MockFile("0VQ*-i|/iOl!JB(4");
assertNotNull(mockFile0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
assertNotNull(mockFileOutputStream0);

FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
assertNotNull(fileChannel0);
assertTrue(mockFile0.exists());
assertEquals(0L, mockFile0.getFreeSpace());
assertEquals(0L, mockFile0.length());
assertEquals(0L, mockFile0.getTotalSpace());
assertFalse(mockFile0.isAbsolute());
assertFalse(mockFile0.isDirectory());
assertTrue(mockFile0.canWrite());
assertFalse(mockFile0.isHidden());
assertEquals(0L, mockFile0.getUsableSpace());
assertEquals("0VQ*-i|", mockFile0.getParent());
assertEquals("iOl!JB(4", mockFile0.getName());
assertTrue(mockFile0.canExecute());
assertEquals("0VQ*-i|/iOl!JB(4", mockFile0.toString());
assertTrue(mockFile0.canRead());
assertEquals(1392409281320L, mockFile0.lastModified());
assertTrue(mockFile0.isFile());
assertEquals(0L, fileChannel0.position());
assertEquals(0L, fileChannel0.size());
assertTrue(fileChannel0.isOpen());

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream1);
assertTrue(mockFile0.exists());
assertEquals(0L, mockFile0.getFreeSpace());
assertEquals(0L, mockFile0.length());
assertEquals(0L, mockFile0.getTotalSpace());
assertFalse(mockFile0.isAbsolute());
assertFalse(mockFile0.isDirectory());
assertTrue(mockFile0.canWrite());
assertFalse(mockFile0.isHidden());
assertEquals(0L, mockFile0.getUsableSpace());
assertEquals("0VQ*-i|", mockFile0.getParent());
assertEquals("iOl!JB(4", mockFile0.getName());
assertTrue(mockFile0.canExecute());
assertEquals("0VQ*-i|/iOl!JB(4", mockFile0.toString());
assertTrue(mockFile0.canRead());
assertEquals(1392409281320L, mockFile0.lastModified());
assertTrue(mockFile0.isFile());
assertEquals(0L, fileChannel0.position());
assertEquals(0L, fileChannel0.size());
assertTrue(fileChannel0.isOpen());
assertTrue(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertTrue(mockFile0.exists());
assertEquals(0L, mockFile0.getFreeSpace());
assertEquals(0L, mockFile0.getTotalSpace());
assertFalse(mockFile0.isAbsolute());
assertFalse(mockFile0.isDirectory());
assertTrue(mockFile0.canWrite());
assertFalse(mockFile0.isHidden());
assertEquals(0L, mockFile0.getUsableSpace());
assertEquals("0VQ*-i|", mockFile0.getParent());
assertEquals("iOl!JB(4", mockFile0.getName());
assertEquals(50L, mockFile0.length());
assertTrue(mockFile0.canExecute());
assertEquals("0VQ*-i|/iOl!JB(4", mockFile0.toString());
assertTrue(mockFile0.canRead());
assertEquals(1392409281320L, mockFile0.lastModified());
assertTrue(mockFile0.isFile());
assertEquals(50L, fileChannel0.position());
assertEquals(50L, fileChannel0.size());
assertTrue(fileChannel0.isOpen());
assertTrue(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
assertEquals(56, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));


[MASTER] 22:17:08.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:08.312 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isDirectory());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isDirectory());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

byte[] byteArray0 = new byte[9];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-91), 337);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertNotNull(byteArrayInputStream0);
assertEquals(100, byteArrayInputStream0.available());
assertEquals(9, byteArray0.length);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);

[MASTER] 22:17:08.817 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:08.819 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertNotNull(zipArchiveOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

byte[] byteArray0 = new byte[0];
ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3281, (-1));
assertArrayEquals(new byte[] {}, byteArray0);
assertNotNull(byteArrayInputStream0);
assertEquals((-3281), byteArrayInputStream0.available());
assertEquals(0, byteArray0.length);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertArrayEquals(new byte[] {}, byteArray0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(94, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0007\b\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals((-3281), byteArrayInputStream0.available());
assertEquals(0, byteArray0.length);

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertNotNull(zipArchiveOutputStream1);
assertEquals(94, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0007\b\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);

[MASTER] 22:17:09.464 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:09.465 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
assertNotNull(mockFileInputStream0);

FileChannel fileChannel0 = mockFileInputStream0.getChannel();
assertNotNull(fileChannel0);
assertFalse(fileDescriptor0.valid());
assertTrue(fileChannel0.isOpen());
assertEquals(0L, fileChannel0.position());

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream1);
assertFalse(fileDescriptor0.valid());
assertTrue(fileChannel0.isOpen());
assertEquals(0L, fileChannel0.position());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertTrue(zipArchiveOutputStream1.isSeekable());
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);

[MASTER] 22:17:10.709 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:10.710 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isDirectory());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isDirectory());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.close();

[MASTER] 22:17:11.301 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
  ???ND??????????...> but was:<[PK]
  ???ND??????????...>
[MASTER] 22:17:11.302 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

zipArchiveEntry0.setMethod(1189);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(1189, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(1189, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\uFFFD\u0004\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.closeArchiveEntry();

[MASTER] 22:17:11.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]                  > but was:<[PK]                  >
[MASTER] 22:17:11.575 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.close();
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(22, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());

zipArchiveOutputStream0.deflate();

[MASTER] 22:17:15.838 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]
   ??ND??????????...> but was:<[PK]
   ??ND??????????...>
[MASTER] 22:17:15.841 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(":>_K*|bir[>aO");
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(jarArchiveEntry0);
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(":>_K*|bir[>aO", jarArchiveEntry0.getName());
assertEquals(":>_K*|bir[>aO", jarArchiveEntry0.toString());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertNull(jarArchiveEntry0.getComment());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());

jarArchiveEntry0.setMethod(2);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(":>_K*|bir[>aO", jarArchiveEntry0.getName());
assertEquals(":>_K*|bir[>aO", jarArchiveEntry0.toString());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals(2, jarArchiveEntry0.getMethod());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertNull(jarArchiveEntry0.getComment());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("\u0000\u0000\u0000\u0000\n\u0000\u0000\b\u0002\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\r\u0000\u0000\u0000:>_K*|bir[>aO", byteArrayOutputStream0.toString());
assertEquals(43, byteArrayOutputStream0.size());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(":>_K*|bir[>aO", jarArchiveEntry0.getName());
assertEquals(":>_K*|bir[>aO", jarArchiveEntry0.toString());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals(2, jarArchiveEntry0.getMethod());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertFalse(jarArchiveEntry0.isDirectory());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertNull(jarArchiveEntry0.getComment());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);

[MASTER] 22:17:16.095 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:16.096 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

byte[] byteArray0 = new byte[2];
zipArchiveOutputStream0.write(byteArray0, (-1), 3);

[MASTER] 22:17:16.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:16.373 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.write((byte[]) null, 1126, (-1));

[MASTER] 22:17:17.803 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:17.805 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());

zipArchiveOutputStream0.setEncoding("5h");
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("5h", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);

[MASTER] 22:17:21.151 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:21.152 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(jarArchiveEntry0);
assertEquals("", jarArchiveEntry0.getName());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals("", jarArchiveEntry0.toString());
assertNull(jarArchiveEntry0.getComment());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertFalse(jarArchiveEntry0.isDirectory());

zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\b\uFFFD\uFFFD\u0000!\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(60, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals("", jarArchiveEntry0.getName());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals("", jarArchiveEntry0.toString());
assertNull(jarArchiveEntry0.getComment());
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertFalse(jarArchiveEntry0.isDirectory());


[MASTER] 22:17:21.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]                  > but was:<[PK]                  >
[MASTER] 22:17:21.733 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(253);
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.writeCentralDirectoryEnd();
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(22, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());


[MASTER] 22:17:22.397 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:22.402 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertNotNull(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(78, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

byte[] byteArray0 = new byte[0];
zipArchiveEntry0.setCompressedSize((-2098L));
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-2098L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());

ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1));
assertArrayEquals(new byte[] {}, byteArray0);
assertNotNull(byteArrayInputStream0);
assertEquals((-1), byteArrayInputStream0.available());
assertEquals(0, byteArray0.length);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
assertArrayEquals(new byte[] {}, byteArray0);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("", zipArchiveEntry0.toString());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(126, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1), byteArrayInputStream0.available());
assertEquals(0, byteArray0.length);


[MASTER] 22:17:23.165 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:23.167 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());

boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.getName());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertTrue(boolean0);


[MASTER] 22:17:23.315 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[    ]  ??ND          ...> but was:<[PK]  ??ND          ...>
[MASTER] 22:17:23.318 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());

ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
assertNotNull(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveEntry0.setUnixMode(2076);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(136052737L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(3, zipArchiveEntry0.getPlatform());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(2076, zipArchiveEntry0.getUnixMode());

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(136052737L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(3, zipArchiveEntry0.getPlatform());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(2076, zipArchiveEntry0.getUnixMode());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(48, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());

zipArchiveOutputStream0.finish();
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(116, byteArrayOutputStream0.size());
assertEquals("\u0000\u0000\u0000\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0003\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u001C\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000.\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());


* Permissions denied during test execution: 
  - java.io.FilePermission: 
         write /experiment/v1`6c9U%q(7poGEyXt6/v1`6c9U%q(7poGEyXt6/org.apache.commons.compress.archivers.dump.DumpArchiveConstants0org.apache.commons.compress.archivers.dump.DumpArchiveConstants: 1
         write /experiment/O/X/!CRrbAuBp9>*/!CRrbAuBp9>*/O/X0O/X: 1
         write USU" ;(aBn8: 1
         and other 2380 cases of action/name for this exception class
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 350
  - java.net.SocketPermission: 
         connect,resolve 192.168.1.42:3: 1
         connect,resolve 192.168.1.42:13: 1
         connect,resolve 127.0.0.1:26: 1
* Writing tests to file
* Writing JUnit test case 'ZipArchiveOutputStream_ESTest' to results/Compress-43/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/BBC-F0-50/tests/10
* Done!

* Computation finished
