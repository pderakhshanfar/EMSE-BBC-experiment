* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Starting Client-0
* Connecting to master process on port 18507
* Analyzing classpath: 
  - subjects/buggy-versions/Compress-43/target/classes
  - defects4j/framework/projects/Compress/lib/org/brotli/dec/0.1.2/dec-0.1.2.jar
  - defects4j/framework/projects/Compress/lib/org/tukaani/xz/1.6/xz-1.6.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2207
* Using seed 73870284
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 864 / 2207
[MASTER] 22:11:26.311 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 22:12:26.388 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1683: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - true: 464
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding()Ljava/lang/String;: root-Branch: 1241
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1682: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1547: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1243: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1242: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1684: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1241: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(JZ)V: Line 1681: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I18 Branch 45 IFNE L798 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1098: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1549: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1245: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I18 Branch 48 IFNE L813 - true: 61
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1088: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1235: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1085: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1475: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1234: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1476: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I12 Branch 145 IF_ICMPNE L1572 - true: 2090
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1240: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1239: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1479: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1079: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1080: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I29 Branch 18 IFEQ L584 - true: 4536
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1077: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I29 Branch 97 IFNE L1176 - true: 1298
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1083: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: Line 1474: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1231: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1071: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1069: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I51 Branch 93 IF_ACMPEQ L1152 - false: 53
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1075: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1074: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1067: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1068: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I231 Branch 85 IFEQ L1098 - false: 851
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1066: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I33 Branch 32 IFNE L677 - true: 3408
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - true: 580
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I207 Branch 84 IFNULL L1090 - false: 165
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1054: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - false: 3091
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1528: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I41 Branch 61 IF_ICMPEQ L877 - true: 197
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1532: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I24 Branch 65 IFEQ L902 - false: 515
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I207 Branch 84 IFNULL L1090 - true: 103
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1531: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1045: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: Line 1536: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1049: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1050: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I4 Branch 135 IF_ICMPNE L1493 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1043: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I4 Branch 135 IF_ICMPNE L1493 - true: 381
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: Line 1582: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1032: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1033: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1034: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I32 Branch 102 IF_ACMPNE L1201 - false: 5026
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1035: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I13 Branch 125 IFNE L1393 - true: 1150
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I53 Branch 94 IFNE L1152 - true: 53
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1036: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: Line 812: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1037: 534
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I53 Branch 94 IFNE L1152 - false: 11634
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: I4 Branch 1 IFNULL L338 - true: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1038: 534
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I22 Branch 57 IFNULL L848 - false: 577
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1025: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1026: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: I4 Branch 1 IFNULL L338 - false: 138
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I18 Branch 99 IFGE L1201 - true: 6529
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: Line 1028: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I8 Branch 5 IFEQ L377 - false: 77
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I38 Branch 92 IFGT L1148 - true: 3179
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 95 IF_ICMPNE L1171 - true: 470
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I47 Branch 104 IF_ACMPNE L1207 - false: 2388
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I7 Branch 60 IF_ICMPLE L872 - false: 210
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I8 Branch 5 IFEQ L377 - true: 618
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 95 IF_ICMPNE L1171 - false: 1136
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I28 Branch 128 IF_ICMPLT L1393 - false: 7168
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: Line 1583: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 963: 568
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 964: 568
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I45 Branch 23 IFEQ L620 - true: 386
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: Line 960: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut([BII)V: Line 1470: 783
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I45 Branch 23 IFEQ L620 - false: 127
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: Line 1483: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - false: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I67 Branch 51 IFLT L825 - false: 14076
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I4 Branch 149 IFNULL L1599 - false: 910
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - true: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - true: 3516
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I3 Branch 114 IFEQ L1321 - false: 3528
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - true: 3669
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I4 Branch 6 IFEQ L462 - false: 1295
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(I)V: I4 Branch 59 IF_ICMPLT L872 - true: 13
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I9 Branch 54 IFGE L848 - true: 7433
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I4 Branch 6 IFEQ L462 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: root-Branch: 953
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: I4 Branch 138 IFEQ L1514 - false: 570
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 27 IF_ACMPEQ L659 - false: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I74 Branch 106 IFNE L1249 - false: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: I4 Branch 138 IFEQ L1514 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: I7 Branch 20 IF_ICMPNE L596 - true: 5720
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I268 Branch 87 IF_ICMPEQ L1107 - false: 1066
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - true: 503
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1308: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1306: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1305: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1312: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1311: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1321: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1355: 578
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1356: 578
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1303: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I5 Branch 44 IF_ICMPNE L794 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - true: 2844
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1290: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1642: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1296: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1643: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I25 Branch 58 IF_ACMPEQ L848 - false: 577
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1644: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1293: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1284: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1282: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1287: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - true: 4236
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: root-Branch: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 610: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I21 Branch 64 IF_ICMPEQ L902 - true: 3616
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1279: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I60 Branch 118 IFGE L1333 - true: 2591
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1268: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - false: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V: root-Branch: 182
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - false: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I6 Branch 29 IFGE L663 - true: 18619
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I15 Branch 12 IFNE L542 - true: 2429
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1269: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1259: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1348: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1263: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - true: 5831
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1351: 578
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: Line 1352: 578
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1252: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1249: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1256: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1254: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I4 Branch 139 IFNULL L1528 - false: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: Line 1253: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I81 Branch 78 IFNULL L1062 - false: 5831
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 535: 3133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 533: 3133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 534: 3133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I25 Branch 117 IF_ACMPNE L1323 - true: 157
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I4 Branch 4 IFEQ L377 - false: 453
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 531: 3133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 532: 3133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;: Line 1588: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: Line 530: 3133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 596: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I243 Branch 113 IF_ACMPNE L1296 - false: 662
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: I4 Branch 4 IFEQ L377 - true: 376
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()V: Line 599: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I15 Branch 2 IFEQ L353 - true: 433
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I84 Branch 79 IFEQ L1062 - false: 5829
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I47 Branch 68 IFLT L942 - false: 136
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - false: 1625
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: I19 Branch 71 IF_ACMPEQ L1028 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V: I19 Branch 71 IF_ACMPEQ L1028 - false: 700
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I13 Branch 98 IFNE L1201 - true: 957
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I81 Branch 38 IFEQ L759 - true: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: Line 1338: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I47 Branch 68 IFLT L942 - true: 83
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I93 Branch 39 IFEQ L764 - true: 502
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I81 Branch 38 IFEQ L759 - false: 622
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted([B)V: root-Branch: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - false: 5991
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - true: 3294
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I129 Branch 41 IFEQ L768 - true: 1431
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1163: 2946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;: root-Branch: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()V: I4 Branch 69 IFNE L960 - true: 648
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1147: 2946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1148: 2946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - false: 3627
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted([B)V: Line 933: 698
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I34 Branch 19 IFEQ L584 - true: 6900
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I8 Branch 144 IFNONNULL L1572 - true: 576
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 727: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: Line 728: 237
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted([B)V: Line 932: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - false: 264
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I28 Branch 101 IFGE L1201 - true: 5290
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: Line 1138: 2946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - true: 2429
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I3 Branch 10 IFNE L538 - false: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I11 Branch 30 IFLT L663 - false: 19297
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I36 Branch 22 IFNONNULL L619 - true: 3511
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I26 Branch 74 IFNULL L1050 - false: 5886
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I8 Branch 28 IFEQ L659 - false: 16411
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I7 Branch 90 IFNE L1138 - false: 14679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - true: 3040
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: I4 Branch 67 IFNONNULL L936 - false: 17550
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - false: 7620
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - true: 689
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(Z)V: root-Branch: 3133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: Line 1389: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I5 Branch 143 IF_ACMPNE L1572 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I24 Branch 8 IFEQ L486 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: I4 Branch 137 IF_ICMPNE L1497 - true: 662
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()V: I14 Branch 150 IFNULL L1602 - false: 95
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: I4 Branch 137 IF_ICMPNE L1497 - false: 1445
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: Line 549: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Ljava/lang/String;)V: I18 Branch 3 IFNE L353 - true: 2599
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I24 Branch 8 IFEQ L486 - false: 812
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I71 Branch 52 IF_ACMPNE L825 - true: 7568
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I5 Branch 89 IF_ACMPEQ L1138 - false: 2946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: Line 900: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I25 Branch 120 IF_ICMPLE L1356 - false: 7445
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: Line 974: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(Ljava/lang/String;)V: root-Branch: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: I29 Branch 7 IFNULL L466 - false: 456
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I3 Branch 133 IFEQ L1483 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I24 Branch 73 IFGT L1050 - true: 6109
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: Line 977: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I25 Branch 120 IF_ICMPLE L1356 - true: 578
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - true: 7421
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I38 Branch 76 IFNULL L1054 - false: 18769
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I155 Branch 109 IFGE L1269 - false: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - true: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I38 Branch 129 IFNE L1400 - true: 1150
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - false: 387
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - true: 666
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I4 Branch 36 IFEQ L743 - false: 1480
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: Line 378: 376
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(Z)V: Line 377: 376
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1196: 373
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: I8 Branch 96 IFNULL L1171 - false: 1280
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1195: 373
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I24 Branch 73 IFGT L1050 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - true: 4712
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I3 Branch 133 IFEQ L1483 - false: 1020
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - true: 42133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I55 Branch 15 IFNE L557 - true: 530
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I14 Branch 148 IFEQ L1583 - false: 42133
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I31 Branch 31 IFEQ L677 - false: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I11 Branch 147 IFNE L1583 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1171: 470
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - true: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I112 Branch 107 IFNE L1256 - false: 10591
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 659: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;: I11 Branch 147 IFNE L1583 - false: 42411
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: Line 663: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: root-Branch: 470
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I248 Branch 86 IFEQ L1104 - false: 322
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - false: 7220
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: I6 Branch 11 IFNULL L538 - false: 663
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I14 Branch 55 IFGE L848 - true: 21006
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: Line 889: 953
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I128 Branch 34 IFNE L696 - true: 3407
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: I41 Branch 9 IF_ICMPLE L488 - true: 534
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(I)V: Line 888: 953
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 798: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 794: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I21 Branch 116 IFGE L1323 - true: 1729
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I84 Branch 24 IFEQ L628 - false: 615
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 652: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - false: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 651: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I178 Branch 43 IFEQ L782 - false: 27
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I43 Branch 122 IFLE L1361 - false: 9727
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - true: 12897
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z: I5 Branch 142 IFNULL L1559 - false: 884
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I16 Branch 63 IF_ICMPEQ L902 - false: 54
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I72 Branch 33 IFEQ L685 - true: 4712
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I36 Branch 75 IF_ICMPGT L1054 - true: 6109
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I36 Branch 75 IF_ICMPGT L1054 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - false: 18769
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;: Line 1514: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1628: 66601
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding()Ljava/lang/String;: Line 364: 1241
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1629: 66601
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(I)I: Line 1497: 662
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(Ljava/lang/String;)V: Line 1630: 66601
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: Line 936: 3040
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(Ljava/io/InputStream;)V: Line 947: 83
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I84 Branch 24 IFEQ L628 - true: 259
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I41 Branch 77 IFNE L1054 - true: 27392
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I160 Branch 110 IFGE L1269 - true: 5217
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I23 Branch 100 IFGE L1201 - true: 4486
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I24 Branch 132 IFEQ L1476 - true: 381
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I29 Branch 37 IFNULL L747 - false: 407
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - true: 3377
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I60 Branch 50 IFGE L825 - true: 7568
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - false: 61
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - false: 3679
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 677: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 676: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 675: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 673: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I34 Branch 141 IFNONNULL L1536 - true: 4236
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I34 Branch 49 IFNE L818 - true: 216
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I23 Branch 127 IFGE L1393 - true: 9959
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V: Line 389: 182
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V: Line 388: 182
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I29 Branch 14 IFNONNULL L553 - true: 387
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 685: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 305: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 304: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 307: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 306: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - true: 3597
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 801: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I9 Branch 47 IFNONNULL L812 - false: 3447
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: Line 1207: 279
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I10 Branch 72 IFNULL L1045 - false: 6109
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - false: 6867
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 584: 1011
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I10 Branch 72 IFNULL L1045 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 588: 1011
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 297: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 587: 1011
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I29 Branch 121 IF_ACMPNE L1356 - true: 6867
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 590: 1029
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 299: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;: I11 Branch 140 IFNE L1529 - true: 579
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 589: 1029
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 298: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 716: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 301: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: Line 715: 4319
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 300: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 303: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Ljava/io/File;)V: Line 302: 5602
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I13 Branch 105 IFNONNULL L1235 - false: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 578: 1011
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: Line 577: 470
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I11 Branch 130 IFNE L1475 - false: 868
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1021: 470
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1022: 1284
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: I17 Branch 146 IFEQ L1572 - false: 186
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I11 Branch 130 IFNE L1475 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I175 Branch 42 IF_ICMPNE L782 - true: 2304
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I24 Branch 132 IFEQ L1476 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: Line 1493: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(Z)V: Line 403: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - false: 14593
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I191 Branch 82 IFEQ L1088 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 517: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 513: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 514: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 515: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;: I13 Branch 131 IFEQ L1475 - true: 590
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 516: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I164 Branch 111 IF_ACMPNE L1269 - false: 662
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 510: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 511: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(Z)V: Line 402: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 512: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 506: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()V: Line 508: 382
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - false: 3669
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - false: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - false: 6033
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I12 Branch 25 IFEQ L652 - true: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 546: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 545: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V: I34 Branch 91 IFNULL L1148 - true: 2946
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I7 Branch 21 IF_ICMPNE L610 - true: 5719
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1657: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - true: 1011
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I12 Branch 16 IFEQ L578 - false: 1386
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I155 Branch 80 IFNE L1079 - false: 41803
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1653: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I19 Branch 56 IFNE L848 - true: 186
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - true: 9727
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1662: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()V: I47 Branch 123 IF_ACMPNE L1361 - false: 9727
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V: Line 1666: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I191 Branch 82 IFEQ L1088 - false: 722
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - true: 279
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I18 Branch 126 IFGE L1393 - true: 9959
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B: I43 Branch 103 IFEQ L1207 - false: 859
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - true: 1066
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I204 Branch 83 IF_ICMPEQ L1090 - false: 103
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: I4 Branch 70 IFNULL L974 - false: 593
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - true: 1028
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V: I24 Branch 17 IFEQ L584 - false: 1011
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I271 Branch 88 IFNULL L1107 - false: 2701
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush()V: I4 Branch 70 IFNULL L974 - true: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - true: 1414
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I155 Branch 80 IFNE L1079 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(Z)V: I171 Branch 35 IFEQ L710 - true: 8242
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable()Z: Line 338: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 542: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(ZZ)V: Line 538: 2213
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(IZZ)I: I11 Branch 134 IFEQ L1486 - true: 103
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write([BII)V: I4 Branch 66 IFNONNULL L918 - true: 765
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I4 Branch 53 IF_ACMPEQ L848 - false: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 782: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - false: 11342
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: I15 Branch 26 IF_ACMPNE L652 - true: 1461
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I4 Branch 62 IFEQ L900 - true: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - true: 7737
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 462: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 787: 248
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z: I4 Branch 62 IFEQ L900 - false: 142
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - false: 41525
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 786: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I115 Branch 108 IFEQ L1256 - false: 7737
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(Z)V: root-Branch: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I5 Branch 124 IF_ACMPNE L1389 - false: 634
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 473: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: I158 Branch 81 IFEQ L1079 - true: 41525
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 475: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 474: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 477: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 476: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()V: I5 Branch 124 IF_ACMPNE L1389 - true: 90
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 743: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 479: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 478: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()V: Line 480: 310
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - true: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 759: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 757: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 756: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 754: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V: I6 Branch 46 IFNE L812 - false: 3725
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: Line 752: 120
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 494: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V: I122 Branch 40 IFNE L768 - false: 1431
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - true: 2055
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 495: 588
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(Ljava/lang/String;)V: Line 861: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V: root-Branch: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(Ljava/lang/String;)V: Line 860: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I16 Branch 115 IFGE L1323 - false: 674
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - false: 2854
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z: Line 848: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;: Line 1572: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I4 Branch 13 IFEQ L549 - true: 22
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1126: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()V: I4 Branch 13 IFEQ L549 - false: 398
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1118: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B: I239 Branch 112 IFGE L1296 - true: 10591
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(I)Z: I7 Branch 136 IFNONNULL L1493 - true: 573
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1124: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1121: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B: Line 1115: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V: I64 Branch 119 IF_ACMPNE L1333 - true: 157
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 484: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 483: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 486: 278
Number of times BBC is called for org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()V: Line 485: 278
Number of times BBC is called in total: 1502377
* Search finished after 602s and 707 generations, 288126 statements, best individual has fitness: 242.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 514
* Number of covered goals: 490
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 320
* Number of covered goals: 286
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 67
* Number of covered goals: 67
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 978
* Number of covered goals: 912
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 11
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 32
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 320
* Number of covered goals: 270
* Generated 135 tests with total length 712
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:22:24.679 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6712833333333333% of time used, but only 34/135 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
[MASTER] 22:23:00.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[  ??ND                 PK           PK  ??ND                PK]
    ??ND          ...> but was:<PK[  ??ND                 PK           PK  ??ND                PK]
    ??ND          ...>
[MASTER] 22:23:00.928 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
zipArchiveEntry0.setMethod(0);
zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(0, zipArchiveEntry0.getMethod());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002\n\u0000\u0000\b\u0000\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());


[MASTER] 22:23:04.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:04.577 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);

boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertTrue(boolean0);


[MASTER] 22:23:05.701 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:05.712 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);

ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(84, true);
assertTrue(resourceAlignmentExtraField0.allowMethodChange());
assertEquals((short)84, resourceAlignmentExtraField0.getAlignment());
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
assertNotNull(resourceAlignmentExtraField0);

zipArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertTrue(resourceAlignmentExtraField0.allowMethodChange());
assertEquals((short)84, resourceAlignmentExtraField0.getAlignment());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(116, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u001E\uFFFDR\u0000T\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);


[MASTER] 22:23:05.898 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:05.899 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);

zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000up\u0005\u0000\u0001\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(39, byteArrayOutputStream0.size());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertNull(zipArchiveEntry0.getComment());
assertEquals(8, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);


[MASTER] 22:23:06.293 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:06.295 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);

zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("not encodeable", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);

zipArchiveEntry0.setComment("not encodeable");
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("not encodeable", zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("not encodeable", zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);


[MASTER] 22:23:06.497 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:06.619 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
assertNotNull(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);

zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals("always", zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);

zipArchiveEntry0.setComment(")c=72;ryCymwwj0H~hI");
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(")c=72;ryCymwwj0H~hI", zipArchiveEntry0.getComment());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0000up\u0005\u0000\u0001\u0000\u0000\u0000\u0000uc\u0018\u0000\u0001\uFFFD\uFFFD\uFFFD&)c=72;ryCymwwj0H~hI", byteArrayOutputStream0.toString());
assertEquals(67, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(")c=72;ryCymwwj0H~hI", zipArchiveEntry0.getComment());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);


[MASTER] 22:23:07.096 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:07.099 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("crc checksum is required for STORED method when not writing to a file");
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("crc checksum is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("crc checksum is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(99, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000crc checksum is required for STORED method when not writing to a file", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("crc checksum is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("crc checksum is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);

zipArchiveEntry0.setComment("4CO&T");
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals("4CO&T", zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals("crc checksum is required for STORED method when not writing to a file", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("crc checksum is required for STORED method when not writing to a file", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(117, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000crc checksum is required for STORED method when not writing to a file\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);

zipArchiveOutputStream0.close();
assertEquals(259, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000crc checksum is required for STORED method when not writing to a file\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002\u0014\u0000\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000crc checksum is required for STORED method when not writing to a file4CO&TPK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000x\u0000\u0000\u0000u\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);


[MASTER] 22:23:07.499 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]-  ??ND    ??????...> but was:<PK[]-  ??ND    ??????...>
[MASTER] 22:23:07.504 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);

Zip64Mode zip64Mode0 = Zip64Mode.Always;
zipArchiveOutputStream0.setUseZip64(zip64Mode0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Kh\"");
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("Kh\"", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("Kh\"", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0003\u0000\u0014\u0000Kh\"\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(53, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("Kh\"", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals("Kh\"", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals(79, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0003\u0000\u0014\u0000Kh\"\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);

zipArchiveOutputStream0.close();
assertEquals(254, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0003\u0000\u0014\u0000Kh\"\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0003\u0000\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFDKh\"\u0001\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0006\u0006,\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000PK\u0005\u0006\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000M\u0000\u0000\u0000O\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);


[MASTER] 22:23:08.080 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]   ??ND          ...> but was:<PK[]   ??ND          ...>
[MASTER] 22:23:08.081 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.setEncoding((String) null);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNull(zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\u0014\u0000\b\u0000\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertNull(zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);


[MASTER] 22:23:08.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]-  ??ND    ??????...> but was:<PK[]-  ??ND    ??????...>
[MASTER] 22:23:08.824 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);

zipArchiveEntry0.setSize(1095216660480L);
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(1095216660480L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(50, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(1095216660480L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);

zipArchiveOutputStream0.closeArchiveEntry();
assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(76, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);

zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
assertEquals("PK\u0001\u0002-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0014\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0001\u0002-\u0000-\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(126, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0L, zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(2L, zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);


[MASTER] 22:23:09.851 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:09.853 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);

ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
assertFalse(resourceAlignmentExtraField0.allowMethodChange());
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
assertNotNull(resourceAlignmentExtraField0);

zipArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
assertFalse(resourceAlignmentExtraField0.allowMethodChange());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
assertNotNull(mockFileInputStream0);

DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
assertFalse(fileDescriptor0.valid());
assertNotNull(dataInputStream0);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, dataInputStream0);

[MASTER] 22:23:10.177 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:10.180 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
assertNotNull(mockFileInputStream0);

FileChannel fileChannel0 = mockFileInputStream0.getChannel();
assertFalse(fileDescriptor0.valid());
assertEquals(0L, fileChannel0.position());
assertTrue(fileChannel0.isOpen());
assertNotNull(fileChannel0);

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
assertFalse(fileDescriptor0.valid());
assertEquals(0L, fileChannel0.position());
assertTrue(fileChannel0.isOpen());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertTrue(zipArchiveOutputStream1.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream1);
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, (InputStream) null);

[MASTER] 22:23:10.668 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]
  d"??ND??????????...> but was:<PK[]
  d"??ND??????????...>
[MASTER] 22:23:10.670 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals((-1), zipArchiveEntry0.getMethod());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.setMethod(8804);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\n\u0000\u0000\bd\"\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertNull(zipArchiveEntry0.getComment());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(8804, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
assertNotNull(mockFileInputStream0);

zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);

[MASTER] 22:23:13.013 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:13.015 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);

JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("X|#");
assertEquals((-1), jarArchiveEntry0.getMethod());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals("X|#", jarArchiveEntry0.getName());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertFalse(jarArchiveEntry0.isDirectory());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertNull(jarArchiveEntry0.getComment());
assertEquals("X|#", jarArchiveEntry0.toString());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(jarArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
assertEquals(33, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000X|#", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals("X|#", jarArchiveEntry0.getName());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertFalse(jarArchiveEntry0.isDirectory());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertNull(jarArchiveEntry0.getComment());
assertEquals("X|#", jarArchiveEntry0.toString());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(8, jarArchiveEntry0.getMethod());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);

jarArchiveEntry0.setMethod(0);
assertEquals(0, jarArchiveEntry0.getMethod());
assertEquals((-1L), jarArchiveEntry0.getDataOffset());
assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
assertEquals("X|#", jarArchiveEntry0.getName());
assertEquals(0, jarArchiveEntry0.getRawFlag());
assertEquals(0, jarArchiveEntry0.getInternalAttributes());
assertEquals(0, jarArchiveEntry0.getPlatform());
assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
assertEquals(0, jarArchiveEntry0.getUnixMode());
assertFalse(jarArchiveEntry0.isDirectory());
assertFalse(jarArchiveEntry0.isUnixSymlink());
assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
assertEquals(0, jarArchiveEntry0.getVersionRequired());
assertEquals((-1L), jarArchiveEntry0.getCrc());
assertNull(jarArchiveEntry0.getComment());
assertEquals("X|#", jarArchiveEntry0.toString());
assertFalse(jarArchiveEntry0.isStreamContiguous());
assertEquals((-1L), jarArchiveEntry0.getSize());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);

zipArchiveOutputStream0.closeArchiveEntry();

[MASTER] 22:23:13.373 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]
   ??ND??????????...> but was:<PK[]
   ??ND??????????...>
[MASTER] 22:23:13.374 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.setMethod(3);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0003\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(3, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);

zipArchiveOutputStream0.closeArchiveEntry();

[MASTER] 22:23:14.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]  ??ND          ...> but was:<PK[]  ??ND          ...>
[MASTER] 22:23:14.368 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertNull(zipArchiveEntry0.getComment());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(8, zipArchiveEntry0.getMethod());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);

ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream1.isSeekable());
assertEquals(0, zipArchiveOutputStream1.getCount());
assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertNotNull(zipArchiveOutputStream1);
assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));

zipArchiveOutputStream1.destroy();

[MASTER] 22:23:19.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]
   ??ND??????????...> but was:<PK[]
   ??ND??????????...>
[MASTER] 22:23:19.054 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.setMethod(3);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals("PK\u0001\u0002\n\u0000\u0000\b\u0003\u0000\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals(30, byteArrayOutputStream0.size());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertEquals(3, zipArchiveEntry0.getMethod());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertNull(zipArchiveEntry0.getComment());
assertEquals("", zipArchiveEntry0.getName());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.toString());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertFalse(zipArchiveEntry0.isDirectory());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);

[MASTER] 22:23:22.746 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<PK[]
  ???ND??????????...> but was:<PK[]
  ???ND??????????...>
[MASTER] 22:23:22.747 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertNotNull(byteArrayOutputStream0);

ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertNotNull(zipArchiveOutputStream0);

ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals((-1), zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
assertNotNull(zipArchiveEntry0);

zipArchiveOutputStream0.setMethod(413);
assertEquals("", byteArrayOutputStream0.toString());
assertEquals(0, byteArrayOutputStream0.size());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);

zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
assertEquals(30, byteArrayOutputStream0.size());
assertEquals("PK\u0001\u0002\n\u0000\u0000\b\uFFFD\u0001\uFFFD\uFFFDND\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
assertFalse(zipArchiveOutputStream0.isSeekable());
assertEquals(0, zipArchiveOutputStream0.getCount());
assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
assertFalse(zipArchiveEntry0.isUnixSymlink());
assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
assertEquals("", zipArchiveEntry0.getName());
assertEquals(0, zipArchiveEntry0.getInternalAttributes());
assertNull(zipArchiveEntry0.getComment());
assertEquals((-1L), zipArchiveEntry0.getCrc());
assertEquals("", zipArchiveEntry0.toString());
assertFalse(zipArchiveEntry0.isDirectory());
assertFalse(zipArchiveEntry0.isStreamContiguous());
assertEquals((-1L), zipArchiveEntry0.getSize());
assertEquals(0, zipArchiveEntry0.getUnixMode());
assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
assertEquals((-1L), zipArchiveEntry0.getDataOffset());
assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
assertEquals(0, zipArchiveEntry0.getVersionRequired());
assertEquals(413, zipArchiveEntry0.getMethod());
assertEquals(0, zipArchiveEntry0.getPlatform());
assertEquals(0, zipArchiveEntry0.getRawFlag());
assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
assertEquals(8, ZipArchiveOutputStream.DEFLATED);
assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
assertEquals(0, ZipArchiveOutputStream.STORED);
assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);

byte[] byteArray0 = new byte[8];
zipArchiveOutputStream0.write(byteArray0, (int) (byte) (-53), (int) (byte) (-1));

* Permissions denied during test execution: 
  - java.io.FilePermission: 
         delete \L|*Rs'5wfM3m}&T+: 1
         write US-ASCII: 1
         write /experiment/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy: 1
         and other 1183 cases of action/name for this exception class
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 154
  - java.net.SocketPermission: 
         connect,resolve 200.42.42.0:2048: 1
         connect,resolve 200.42.42.0:1: 1
         connect,resolve 192.168.1.42:3753: 1
* Writing tests to file
* Writing JUnit test case 'ZipArchiveOutputStream_ESTest' to results/Compress-43/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/BBC-F0-50/tests/29
* Done!

* Computation finished
