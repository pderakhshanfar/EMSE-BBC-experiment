* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Starting Client-0
* Connecting to master process on port 18507
* Analyzing classpath: 
  - subjects/buggy-versions/Compress-43/target/classes
  - defects4j/framework/projects/Compress/lib/org/brotli/dec/0.1.2/dec-0.1.2.jar
  - defects4j/framework/projects/Compress/lib/org/tukaani/xz/1.6/xz-1.6.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2207
* Using seed 73870284
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 864 / 2207
[MASTER] 19:39:26.232 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 19:41:06.295 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 770 generations, 325027 statements, best individual has fitness: 259.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 514
* Number of covered goals: 498
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 320
* Number of covered goals: 284
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 99%
* Total number of goals: 76
* Number of covered goals: 75
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 978
* Number of covered goals: 895
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 11
* Number of covered goals: 9
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 320
* Number of covered goals: 266
* Generated 138 tests with total length 676
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:50:29.706 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6863666666666667% of time used, but only 42/138 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 19:50:37.963 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_32_1629229837963
[MASTER] 19:50:37.963 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 19:50:39.072 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:50:39.631 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/This archive has already been finished0This archive has already been finished" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_33_tmp__ESTest.test0(ZipArchiveOutputStream_33_tmp__ESTest.java:23)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 19:50:39.632 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("This archive has already been finished", "This archive has already been finished");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
zipArchiveOutputStream0.setFallbackToUTF8(false);
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());


[MASTER] 19:50:44.700 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/Stream has already been finished0.tmp" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_37_tmp__ESTest.test0(ZipArchiveOutputStream_37_tmp__ESTest.java:23)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 19:50:44.701 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("Stream has already been finished", (String) null);
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
zipArchiveOutputStream0.setComment("crc checksum is required for STORED method when not writing to a file");
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());


[MASTER] 19:50:52.991 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_41_tmp__ESTest.test0(ZipArchiveOutputStream_41_tmp__ESTest.java:23)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 19:50:52.992 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("crc checksum is required for STORED method when not writing to a file", "crc checksum is required for STORED method when not writing to a file");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
boolean boolean0 = zipArchiveOutputStream0.isSeekable();
assertTrue(boolean0);
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());


[MASTER] 19:50:56.781 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/crc checksum is required for STORED method when not writing to a file0crc checksum is required for STORED method when not writing to a file" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_44_tmp__ESTest.test0(ZipArchiveOutputStream_44_tmp__ESTest.java:23)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 19:50:56.782 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("crc checksum is required for STORED method when not writing to a file", "crc checksum is required for STORED method when not writing to a file");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
zipArchiveOutputStream0.setEncoding("UTF8");
assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());


[MASTER] 19:51:00.171 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.io.FilePermission" "/tmp/g|,pX[`0S>M.uWr0Z(Y" "write")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
java.nio.file.Files.newByteChannel(Files.java:361)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(ZipArchiveOutputStream.java:292)
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_46_tmp__ESTest.test0(ZipArchiveOutputStream_46_tmp__ESTest.java:25)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 19:51:00.171 [logback-1] WARN  JUnitAnalyzer - Failing test:
 File file0 = MockFile.createTempFile("g|,pX[`0S>M.uWr", "Z(Y");
ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(file0);
zipArchiveOutputStream0.finish();
zipArchiveOutputStream0.finish();

* Permissions denied during test execution: 
  - java.io.FilePermission: 
         write This archive ha already been finished: 1
         write /tmp/This archive has already b6en finished0This archive has already b6en finished: 2
         write /tmp/g|,pX[`0S>M.uWr0Z(Y: 1
         and other 7 cases of action/name for this exception class
* Writing tests to file
* Writing JUnit test case 'ZipArchiveOutputStream_ESTest' to results/Compress-43/org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream/BBC-F0-50/tests/29
* Done!

* Computation finished
