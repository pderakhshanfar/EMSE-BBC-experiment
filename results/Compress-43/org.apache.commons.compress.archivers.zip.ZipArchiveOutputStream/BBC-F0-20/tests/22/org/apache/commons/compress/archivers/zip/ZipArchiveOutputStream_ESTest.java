/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 04:12:07 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.nio.file.attribute.FileTime;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setLevel(0);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("No current entry to close", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(dataOutputStream0);
      zipArchiveOutputStream0.setLevel(9);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bV9hidN*ty");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveEntry0.setSize(4294967295L);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      FileTime fileTime0 = FileTime.from((-1405L), timeUnit0);
      zipArchiveEntry0.setLastModifiedTime(fileTime0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(220L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rh@t4#w3}!TK9");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      zipArchiveEntry0.setMethod(12);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(80L, fileChannel0.size());
      assertEquals(80L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" .`D7xUIw]m+:%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(dataOutputStream0);
      byte[] byteArray0 = new byte[8];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals(22L, fileChannel0.size());
      assertEquals(22L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ex[(o,_J5N?g");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ex[(o,_J5N?g");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      zipArchiveOutputStream0.write(byteArray0, 0, (int) (byte)0);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jT;;7g|1&>>");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[2];
      zipArchiveOutputStream0.writeOut(byteArray0, 0, 422);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+@G&J-u'<hc3=( ");
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      assertEquals(96L, fileChannel0.position());
      assertEquals(96L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setEncoding((String) null);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      
      MockFile mockFile0 = new MockFile("Q+@G&J-u'<hc3=( ");
      zipArchiveOutputStream0.createArchiveEntry(mockFile0, "Q+@G&J-u'<hc3=( ");
      assertEquals(30L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      MockFile mockFile0 = new MockFile("NkUX{,w:]k,<([<KuPw", "^m\"");
      MockFile.createTempFile("Q+@G&J-u'<hc3=( ", "lo+F:Df{rOpl.$PX", (File) mockFile0);
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("/", zipArchiveEntry0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" .`D7xUIw]m+:%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(dataOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null, 4456, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(filterOutputStream0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte)19, (byte)19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 2048, 1413);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("always");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte) (-1), (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HT_5_8wo");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("HT_5_8wo");
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.destroy();
      byte[] byteArray0 = new byte[8];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("At offset ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockFile mockFile0 = new MockFile("R`q$EaY7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.JarMarker");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("F");
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveEntry");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      mockFileOutputStream0.close();
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor((ZipArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=xm~cq@Jx~");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("=xm~cq@Jx~");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2048, 2048);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, sequenceInputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeDataDescriptor(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        zipArchiveOutputStream0.writeDataDescriptor(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Z.,&G{`]5");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      fileChannel0.close();
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("crc checksum is required for STORED method when not writing to a file");
      zipArchiveEntry0.setMethod(22);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.write(byteArray0, 2145990265, 22);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Q+@G&J-u'<hc3=( ");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, 162, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, (-492), 1026);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ex[(o,_J5N?g");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding("M2g9x#i<q7Plmk!Ku");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // M2g9x#i<q7Plmk!Ku
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(47);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      mockFileOutputStream0.close();
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry((ArchiveEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+G&J-u@<hc3=([");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, false);
      X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new X0015_CertificateIdForFile();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[9];
      zipExtraFieldArray0[0] = (ZipExtraField) x0015_CertificateIdForFile0;
      zipExtraFieldArray0[1] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[3] = (ZipExtraField) x0015_CertificateIdForFile0;
      zipExtraFieldArray0[4] = (ZipExtraField) resourceAlignmentExtraField0;
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      zipExtraFieldArray0[5] = (ZipExtraField) x7875_NewUnix0;
      zipExtraFieldArray0[6] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[7] = (ZipExtraField) x0015_CertificateIdForFile0;
      zipExtraFieldArray0[8] = (ZipExtraField) resourceAlignmentExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setMethod((-56));
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -56
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockFile mockFile0 = new MockFile("#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("not encodeable", (byte)59, false);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Y");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setEncoding("Y");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Y");
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockFile mockFile0 = new MockFile("GL&)A%<s*wcTg", "E|q[6e");
      File file0 = MockFile.createTempFile("GL&)A%<s*wcTg", "GL&)A%<s*wcTg", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.destroy();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      try { 
        zipArchiveOutputStream1.destroy();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry((File) null, "P7HY3$5h$LDD$,A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      zipArchiveEntry0.setMethod(65535);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.archivers.zip.FallbackZipEncoding", "org.apache.commons.compress.archivers.zip.FallbackZipEncoding");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+|G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.destroy();
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Y");
      PipedInputStream pipedInputStream0 = new PipedInputStream(2048);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry 
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rh@4#w3}!`TK9");
      zipArchiveEntry0.setMethod(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry((ZipArchiveEntry) null, pipedInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // entry
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveEntry");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZipArchiveOutputStream zipArchiveOutputStream2 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream2.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+@G&J-u'<hc3=( ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3895), 593);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFile mockFile0 = new MockFile("0\u0000");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J2-u@<hc3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("Q+G&J2-u@<hc3=([");
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("crc checksum is required for STORED method when not writing to a file");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, 2145990265, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Eg_t!j/");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Eg_t!j/");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, pushbackInputStream0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getCrc());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")7K63[I0wG=qv'|O2");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(")7K63[I0wG=qv'|O2");
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.finish();
      MockFile mockFile0 = new MockFile("");
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, "org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      MockFile mockFile0 = new MockFile("w~,28E!;-pw-s{wYahU");
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "CtFwsN0yZ\"p3");
      assertEquals("CtFwsN0yZ\"p3", zipArchiveEntry0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(filterOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("q");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~9#$Vb!m/Y9G$2Am'&N");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals(126L, fileChannel0.position());
      assertEquals(126L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+G&J-u@<hc3=([");
      jarArchiveEntry0.setSize(1392409281320L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment("*{eMGZnllkh");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-1u<hc3=(");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+G&J-1u<hc3=(");
      jarArchiveEntry0.setSize(1392409281320L);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Y");
      jarArchiveEntry0.setComment("Y");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      File file0 = MockFile.createTempFile("l,~P", "Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment("Yu,{n>w7");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment("");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Y");
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      File file0 = MockFile.createTempFile("l,~P", "Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("FILE");
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(2493, true);
      X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new X0015_CertificateIdForFile();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[4];
      zipExtraFieldArray0[0] = (ZipExtraField) x0015_CertificateIdForFile0;
      UnicodeCommentExtraField unicodeCommentExtraField0 = new UnicodeCommentExtraField();
      zipExtraFieldArray0[1] = (ZipExtraField) unicodeCommentExtraField0;
      zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[3] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+G&J-u@<hc3=([");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true);
      X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new X0015_CertificateIdForFile();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[9];
      zipExtraFieldArray0[0] = (ZipExtraField) x0015_CertificateIdForFile0;
      zipExtraFieldArray0[1] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[2] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[3] = (ZipExtraField) x0015_CertificateIdForFile0;
      zipExtraFieldArray0[4] = (ZipExtraField) resourceAlignmentExtraField0;
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      zipExtraFieldArray0[5] = (ZipExtraField) x7875_NewUnix0;
      zipExtraFieldArray0[6] = (ZipExtraField) resourceAlignmentExtraField0;
      zipExtraFieldArray0[7] = (ZipExtraField) x0015_CertificateIdForFile0;
      zipExtraFieldArray0[8] = (ZipExtraField) resourceAlignmentExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("| =MZUTuxT<4jJ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("| =MZUTuxT<4jJ");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[1];
      zipExtraFieldArray0[0] = (ZipExtraField) resourceAlignmentExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J2-u@<hc3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+G&J2-u@<hc3=([");
      jarArchiveEntry0.setAlignment(8);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3= ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.finished = true;
      zipArchiveOutputStream0.close();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(zipArchiveOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(dataOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J{2-u@~<hc3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      zipArchiveEntry0.setMethod(1);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(arjArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" .`D7xUIw]m+:%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(dataOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(42);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 42
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((-4844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -4844
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(46L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+0&J2-u@<#c3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+0&J2-u@<#c3=([");
      jarArchiveEntry0.setCrc(0);
      jarArchiveEntry0.setSize(8);
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rh@4#w3}!`TK9");
      zipArchiveEntry0.setMethod(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+J-1u<9hc8=(");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      MockFile mockFile0 = new MockFile("Q+J-1u<9hc8=(", "b)z");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "Q+J-1u<9hc8=(");
      zipArchiveEntry0.setMethod(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(filterOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.setLevel(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rh@t4#w3}!`TK9");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      zipArchiveEntry0.setMethod(0);
      zipArchiveEntry0.setSize(1392409281320L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0, zipArchiveEntry0.getMethod());
      assertEquals(50L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=xm~cq@Jx~");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("=xm~cq@Jx~");
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2048, 2048);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, sequenceInputStream0);
      assertEquals(2L, zipArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals(102L, fileChannel0.size());
      assertEquals(102L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rh@4#w3}!`TK9");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(102L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-1u<hc3=(");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Q+G&J-1u<hc3=(");
      jarArchiveEntry0.setSize(1392409281320L);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
      assertEquals(5L, zipArchiveOutputStream0.getBytesWritten());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rh@4#w3}!`TK9");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      zipArchiveEntry0.setMethod(0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(80L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setCrc(8);
      zipArchiveEntry0.setSize(8);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J-u@<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setCrc(8);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Kl %*K<c};jo1IEdWw", false);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.finish();
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      byte[] byteArray0 = new byte[0];
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-1));
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" .`D7xUIw]m+:%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(dataOutputStream0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setEncoding((String) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+G&J{2-u@~<hc3=([");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setEncoding("HT_5_8wo");
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF-8");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setEncoding("UTF-8");
      assertEquals("UTF-8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.setEncoding((String) null);
      assertNull(zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("always", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setComment("");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 4, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.setFallbackToUTF8(false);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("GNU.spa*cvrse.name");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("GNU.spa*cvrse.name");
      jarArchiveEntry0.setSize(280375465082880L);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // GNU.spa*cvrse.name's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q+@G&J-u'<hc3=( ");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals(84L, fileChannel0.position());
      assertEquals(84L, fileChannel0.size());
  }
}
