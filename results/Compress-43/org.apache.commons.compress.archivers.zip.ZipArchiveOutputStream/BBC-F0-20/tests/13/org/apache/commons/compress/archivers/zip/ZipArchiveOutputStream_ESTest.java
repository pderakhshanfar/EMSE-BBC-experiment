/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 04:09:15 GMT 2021
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.InvalidPathException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.AsiExtraField;
import org.apache.commons.compress.archivers.zip.GeneralPurposeBit;
import org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField;
import org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData;
import org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;
import org.apache.commons.compress.archivers.zip.X0014_X509Certificates;
import org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader;
import org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.Zip64RequiredException;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipEightByteInteger;
import org.apache.commons.compress.archivers.zip.ZipExtraField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZipArchiveOutputStream_ESTest extends ZipArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      jarArchiveEntry0.setUnixMode(1958);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(3, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(1958, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(128319488L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(3, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(1958, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(128319488L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(3, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(1958, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(128319488L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(") }b4t-1Y");
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      jarArchiveEntry0.setSize(1392409281320L);
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(1392409281320L, jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DkB[<.La/9TO");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("DkB[<.La/9TO");
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("DkB[<.La/9TO", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("DkB[<.La/9TO", jarArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("DkB[<.La/9TO", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("DkB[<.La/9TO", jarArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2147483646), (-246));
      assertEquals(6, byteArray0.length);
      assertEquals((-2147483644), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setLevel(3);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream0.setLevel(0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}w");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setLevel(9);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(") }b4t-1Y");
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      jarArchiveEntry0.setSize(1392409281320L);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(") }b4t-1Y", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(1392409281320L, jarArchiveEntry0.getSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setTime((-813L));
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("VtO07d0a");
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("VtO07d0a", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("VtO07d0a", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("VtO07d0a");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("VtO07d0a", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("VtO07d0a", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.write(3);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(1L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(1259060791L, jarArchiveEntry0.getCrc());
      assertEquals("VtO07d0a", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("VtO07d0a", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(3L, jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      jarArchiveEntry0.setMethod(0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(1L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(1259060791L, jarArchiveEntry0.getCrc());
      assertEquals("VtO07d0a", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("VtO07d0a", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(3L, jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry VtO07d0a: 4b0bbe37 instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DkB[<.La/TO");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("DkB[<.La/TO");
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setCompressedSize((-897L));
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-897L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setCrc(0);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals((-897L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setSize(8);
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals((-897L), jarArchiveEntry0.getCompressedSize());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.toString());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("DkB[<.La/TO", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8L, jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[8];
      zipArchiveOutputStream0.writeOut(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" in '");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(" in '", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(" in '", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(" in '", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(" in '", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.writeCentralDirectoryEnd();
      assertEquals("PK\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(22, byteArrayOutputStream0.size());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("not encodeable");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("not encodeable");
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("not encodeable", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("not encodeable", jarArchiveEntry0.getName());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("not encodeable", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("not encodeable", jarArchiveEntry0.getName());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      byte[] byteArray0 = new byte[6];
      zipArchiveOutputStream0.write(byteArray0, 0, (int) (byte)0);
      assertEquals(6, byteArray0.length);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(",$t7d0tPm-(");
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(",$t7d0tPm-(", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(",$t7d0tPm-(", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(",$t7d0tPm-(");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(",$t7d0tPm-(", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(",$t7d0tPm-(", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      zipArchiveOutputStream0.closeArchiveEntry();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wg(y#(64sS9X2", "%U@QaO\"V'm 2SfydB-Q");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("/experiment/wg(y#(64sS9X2", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("%U@QaO\"V'm 2SfydB-Q", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/wg(y#(64sS9X2/%U@QaO\"V'm 2SfydB-Q", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      zipArchiveOutputStream0.writeOut(byteArray0, 42, (byte)127);
      assertEquals(2, byteArray0.length);
      assertEquals("/experiment/wg(y#(64sS9X2", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("%U@QaO\"V'm 2SfydB-Q", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/wg(y#(64sS9X2/%U@QaO\"V'm 2SfydB-Q", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding((String) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertNull(zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockFile mockFile0 = new MockFile("I$Bt", "");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      mockFileOutputStream0.write(byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/I$Bt", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("I$Bt", mockFile0.getName());
      assertEquals(9L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/I$Bt", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("I$Bt", mockFile0.getName());
      assertEquals(9L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "^\"t");
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/I$Bt", mockFile0.toString());
      assertEquals("/experiment", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("I$Bt", mockFile0.getName());
      assertEquals(9L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("^\"t", zipArchiveEntry0.toString());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(9L, zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("^\"t", zipArchiveEntry0.getName());
      assertNull(zipArchiveEntry0.getComment());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      MockFile mockFile0 = new MockFile((File) null, "");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "Unknown header type");
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals("Unknown header type/", zipArchiveEntry0.toString());
      assertEquals("Unknown header type/", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertTrue(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (byte)1, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0, 8, (byte) (-24));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("bad size for entry ");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-2137), 73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "2|BOR$84z");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("2|BOR$84z", mockFile1.getName());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals("/experiment/2|BOR$84z", mockFile1.toString());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, 3268, 1101);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeOut(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WTAd");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      MockFile mockFile0 = new MockFile("g3<i)w|t^c21d");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "g3<i)w|t^c21d");
      assertEquals("g3<i)w|t^c21d", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("g3<i)w|t^c21d", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("g3<i)w|t^c21d", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("g3<i)w|t^c21d", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.setEncoding("org.apache.commons.compress.archivers.zip.ExtraFieldUtils");
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(",$t7d0-(");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(",$t7d0-(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(",$t7d0-(", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(",$t7d0-(");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockPrintStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(",$t7d0-(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(",$t7d0-(", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeDataDescriptor(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("not enaodeable");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("not enaodeable");
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("not enaodeable", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("not enaodeable", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("not enaodeable", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("not enaodeable", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      File file0 = MockFile.createTempFile("e(Bpd_[b", "e(Bpd_[b");
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("e(Bpd_[b0e(Bpd_[b", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/e(Bpd_[b0e(Bpd_[b", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("e(Bpd_[b0e(Bpd_[b", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/e(Bpd_[b0e(Bpd_[b", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("e(Bpd_[b0e(Bpd_[b", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/e(Bpd_[b0e(Bpd_[b", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.close();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("e(Bpd_[b0e(Bpd_[b", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(22L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/e(Bpd_[b0e(Bpd_[b", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.writeCentralDirectoryEnd();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding("cR68");
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("cR68", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}w");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      try { 
        zipArchiveOutputStream0.writeCentralDirectoryEnd();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      MockFile mockFile0 = new MockFile("AVut`VF9tFS8Ll{jA", "AVut`VF9tFS8Ll{jA");
      assertNotNull(mockFile0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "t");
      assertTrue(mockFile0.isFile());
      assertEquals("AVut`VF9tFS8Ll{jA", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/AVut`VF9tFS8Ll{jA/AVut`VF9tFS8Ll{jA", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/AVut`VF9tFS8Ll{jA", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("t", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals("t", zipArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(zipArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveEntry0.setMethod(20);
      assertTrue(mockFile0.isFile());
      assertEquals("AVut`VF9tFS8Ll{jA", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/AVut`VF9tFS8Ll{jA/AVut`VF9tFS8Ll{jA", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/AVut`VF9tFS8Ll{jA", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(20, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("t", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("t", zipArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertTrue(mockFile0.isFile());
      assertEquals("AVut`VF9tFS8Ll{jA", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals("/experiment/AVut`VF9tFS8Ll{jA/AVut`VF9tFS8Ll{jA", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/AVut`VF9tFS8Ll{jA", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(20, zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("t", zipArchiveEntry0.getName());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("t", zipArchiveEntry0.toString());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      byte[] byteArray0 = new byte[9];
      try { 
        zipArchiveOutputStream0.write(byteArray0, 2146436095, 1073741824);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry t
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write((byte[]) null, 10, 4096);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.ZipShort");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipShort");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipShort", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipShort", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipShort", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipShort", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, 1306, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setEncoding("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(",$t7d0-(");
      assertEquals(",$t7d0-(", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(",$t7d0-(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(",$t7d0-(");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(",$t7d0-(", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(",$t7d0-(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      jarArchiveEntry0.setMethod(Integer.MAX_VALUE);
      assertEquals(",$t7d0-(", jarArchiveEntry0.toString());
      assertEquals(Integer.MAX_VALUE, jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(",$t7d0-(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry ,$t7d0-(
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("}V>9%W]<Dn!!");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("}V>9%W]<Dn!!", jarArchiveEntry0.getName());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("}V>9%W]<Dn!!", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.destroy();
      assertFalse(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[2];
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      assertFalse(resourceAlignmentExtraField0.allowMethodChange());
      assertEquals((short)0, resourceAlignmentExtraField0.getAlignment());
      assertEquals(2, ResourceAlignmentExtraField.BASE_SIZE);
      assertNotNull(resourceAlignmentExtraField0);
      
      zipExtraFieldArray0[0] = (ZipExtraField) resourceAlignmentExtraField0;
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      assertNotNull(x0014_X509Certificates0);
      
      zipExtraFieldArray0[1] = (ZipExtraField) x0014_X509Certificates0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      assertEquals(2, zipExtraFieldArray0.length);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%U@QaO\"V'm 2SfydB-Q", "oJJ:AL");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/%U@QaO\"V'm 2SfydB-Q", mockFile0.getParent());
      assertEquals("oJJ:AL", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/%U@QaO\"V'm 2SfydB-Q/oJJ:AL", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(zipArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/%U@QaO\"V'm 2SfydB-Q", mockFile0.getParent());
      assertEquals("oJJ:AL", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/%U@QaO\"V'm 2SfydB-Q/oJJ:AL", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/%U@QaO\"V'm 2SfydB-Q", mockFile0.getParent());
      assertEquals("oJJ:AL", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/%U@QaO\"V'm 2SfydB-Q/oJJ:AL", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      File file0 = MockFile.createTempFile(") >}b4akaY", "not enaodeable");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(") >}b4akaY0not enaodeable", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/) >}b4akaY0not enaodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(") >}b4akaY0not enaodeable", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/) >}b4akaY0not enaodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      FileChannel fileChannel1 = fileChannel0.position(4278190080L);
      assertSame(fileChannel0, fileChannel1);
      assertSame(fileChannel1, fileChannel0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(") >}b4akaY0not enaodeable", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/) >}b4akaY0not enaodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals((-16777216L), fileChannel0.position());
      assertEquals(0L, fileChannel1.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals((-16777216L), fileChannel1.position());
      assertNotNull(fileChannel1);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel1);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(") >}b4akaY0not enaodeable", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp/) >}b4akaY0not enaodeable", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals((-16777216L), fileChannel0.position());
      assertEquals(0L, fileChannel1.size());
      assertTrue(fileChannel1.isOpen());
      assertEquals((-16777216L), fileChannel1.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(zipArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Position in the file cannot be negative
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setMethod((-2101));
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$t7d0-(");
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("$t7d0-(", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("$t7d0-(", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -2101
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      MockFile mockFile0 = new MockFile("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFile0);
      
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "");
      assertTrue(mockFile0.canRead());
      assertEquals("]vH!2QnYQQ?&md|7c{", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("]vH!2QnYQQ?&md|7c{", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(33188, arArchiveEntry0.getMode());
      assertEquals(0L, arArchiveEntry0.getLength());
      assertEquals("", arArchiveEntry0.getName());
      assertEquals(0, arArchiveEntry0.getUserId());
      assertEquals(1392409281L, arArchiveEntry0.getLastModified());
      assertEquals(0, arArchiveEntry0.getGroupId());
      assertFalse(arArchiveEntry0.isDirectory());
      assertEquals(0L, arArchiveEntry0.getSize());
      assertNotNull(arArchiveEntry0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(arArchiveEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.compress.archivers.ar.ArArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("uncompressed size is requred for STORED method when not writing to a file");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.setEncoding("x9kctV392");
      assertEquals("x9kctV392", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("IMPLODING");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.setEncoding("IMPLODING");
      assertEquals("IMPLODING", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.destroy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      try { 
        zipArchiveOutputStream1.destroy();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertNotNull(byteArrayOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertNotNull(filterOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(filterOutputStream0);
      //  // Unstable assertion: assertEquals("", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      //  // Unstable assertion: assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.close();
      //  // Unstable assertion: assertEquals(22, byteArrayOutputStream0.size());
      //  // Unstable assertion: assertEquals("PK\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      //  // Unstable assertion: assertEquals(0, zipArchiveOutputStream0.getCount());
      //  // Unstable assertion: assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      //  // Unstable assertion: assertFalse(zipArchiveOutputStream0.isSeekable());
      //  // Unstable assertion: assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      //  // Unstable assertion: assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      //  // Unstable assertion: assertEquals(0, ZipArchiveOutputStream.STORED);
      //  // Unstable assertion: assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.deflate();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // Deflater has been closed
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.createArchiveEntry((File) null, ",$t7d0-(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      jarArchiveEntry0.setMethod(5);
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(5, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature method 'EXPANDING_LEVEL_4' used in entry ]vH!2QnYQQ?&md|7c{
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("VtO07d0a");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("VtO07d0a", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("VtO07d0a", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("VtO07d0a");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("VtO07d0a", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("VtO07d0a", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      jarArchiveEntry0.setMethod(0);
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("VtO07d0a", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals("VtO07d0a", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad CRC checksum for entry VtO07d0a: ffffffffffffffff instead of 0
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1{Bgx\"UP^^GMcIWX", "1{Bgx\"UP^^GMcIWX");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("1{Bgx\"UP^^GMcIWX", mockFile0.getName());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX/1{Bgx\"UP^^GMcIWX", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("1{Bgx\"UP^^GMcIWX", mockFile0.getName());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX/1{Bgx\"UP^^GMcIWX", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1");
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.toString());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(116L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("1{Bgx\"UP^^GMcIWX", mockFile0.getName());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX/1{Bgx\"UP^^GMcIWX", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(116L, fileChannel0.position());
      assertEquals(116L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$1", jarArchiveEntry0.toString());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      zipArchiveOutputStream0.setEncoding("SHA1");
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(116L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("1{Bgx\"UP^^GMcIWX", mockFile0.getName());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("/experiment/1{Bgx\"UP^^GMcIWX/1{Bgx\"UP^^GMcIWX", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(116L, fileChannel0.position());
      assertEquals(116L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals("SHA1", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zNV", "zNV");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("zNV", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/zNV/zNV", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("zNV", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/zNV/zNV", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveEntry0.setGeneralPurposeBit((GeneralPurposeBit) null);
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      jarArchiveEntry0.setMethod(18);
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(18, jarArchiveEntry0.getMethod());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: UnsupportedZipFeatureException");
      
      } catch(UnsupportedZipFeatureException e) {
         //
         // unsupported feature compression method used in entry ]vH!2QnYQQ?&md|7c{
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" >,<D9;| ]o]{sG8>[V");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" >,<D9;| ]o]{sG8>[V");
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(" >,<D9;| ]o]{sG8>[V", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(" >,<D9;| ]o]{sG8>[V", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(" >,<D9;| ]o]{sG8>[V", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(" >,<D9;| ]o]{sG8>[V", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(fileDescriptor0.valid());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.position());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      mockFileOutputStream0.close();
      jarArchiveEntry0.setMethod(0);
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getMethod());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertNotNull(jarArchiveEntry0);
      
      jarArchiveEntry0.setMethod(8);
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qiN|NTtjM", ";");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/qiN|NTtjM/;", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/qiN|NTtjM", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(";", mockFile0.getName());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals("", zipArchiveEntry0.toString());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(zipArchiveEntry0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      assertNotNull(mockFileInputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZIP compression method can not be negative: -1
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertNull(jarArchiveEntry0.getComment());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3793), (byte)4);
      assertEquals(8, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      zipArchiveOutputStream0.setEncoding("MD5");
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("MD5", zipArchiveOutputStream0.getEncoding());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(jarArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream1);
      
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(68L, fileChannel0.position());
      assertEquals(68L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream1.putArchiveEntry(zipArchiveEntry0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(120L, fileChannel0.position());
      assertEquals(120L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals("", zipArchiveEntry0.getName());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals("", zipArchiveEntry0.toString());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.write(byteArray0, 1, 3380);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals((-1), jarArchiveEntry0.getMethod());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertNotNull(jarArchiveEntry0);
      
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream1);
      
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(68L, fileChannel0.position());
      assertEquals(68L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertEquals((-1L), jarArchiveEntry0.getCompressedSize());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), jarArchiveEntry0.getCrc());
      assertEquals((-1L), jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      assertNotSame(zipArchiveOutputStream1, zipArchiveOutputStream0);
      assertFalse(zipArchiveOutputStream1.equals((Object)zipArchiveOutputStream0));
      assertEquals(118L, fileChannel0.size());
      assertEquals(118L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertTrue(zipArchiveOutputStream1.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream1.getEncoding());
      assertEquals(0L, zipArchiveOutputStream1.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream1.getCount());
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, sequenceInputStream0);
      assertNotSame(zipArchiveOutputStream0, zipArchiveOutputStream1);
      assertFalse(zipArchiveOutputStream0.equals((Object)zipArchiveOutputStream1));
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, jarArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), jarArchiveEntry0.getDataOffset());
      assertNull(jarArchiveEntry0.getComment());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.getName());
      assertEquals(0, jarArchiveEntry0.getInternalAttributes());
      assertEquals(0, jarArchiveEntry0.getUnixMode());
      assertEquals(0, jarArchiveEntry0.getRawFlag());
      assertEquals(0, jarArchiveEntry0.getPlatform());
      assertFalse(jarArchiveEntry0.isUnixSymlink());
      assertEquals(0, jarArchiveEntry0.getVersionMadeBy());
      assertEquals("]vH!2QnYQQ?&md|7c{", jarArchiveEntry0.toString());
      assertFalse(jarArchiveEntry0.isDirectory());
      assertEquals(0, jarArchiveEntry0.getVersionRequired());
      assertFalse(jarArchiveEntry0.isStreamContiguous());
      assertEquals(0L, jarArchiveEntry0.getCrc());
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qiN|NTtjM", "org.apache.commons.compress.archivers.zip.StreamCompressor");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/qiN|NTtjM", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/qiN|NTtjM/org.apache.commons.compress.archivers.zip.StreamCompressor", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.StreamCompressor", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "qiN|NTtjM");
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/qiN|NTtjM", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/qiN|NTtjM/org.apache.commons.compress.archivers.zip.StreamCompressor", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.StreamCompressor", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("qiN|NTtjM", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("qiN|NTtjM", zipArchiveEntry0.toString());
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(zipArchiveEntry0);
      
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(39L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/qiN|NTtjM", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/qiN|NTtjM/org.apache.commons.compress.archivers.zip.StreamCompressor", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.apache.commons.compress.archivers.zip.StreamCompressor", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals("qiN|NTtjM", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals("qiN|NTtjM", zipArchiveEntry0.toString());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zNV", "IBM437");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("IBM437", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("IBM437", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.destroy();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("IBM437", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(fileChannel0.isOpen());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zNV", "IBM437");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("IBM437", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertNotNull(zipArchiveOutputStream0);
      
      zipArchiveOutputStream0.close();
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertEquals(22L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("IBM437", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveOutputStream0.isSeekable());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      
      try { 
        zipArchiveOutputStream0.createArchiveEntry(mockFile0, "No current entry to close");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zNV", "IBM437");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("IBM437", mockFile0.getName());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertNotNull(fileChannel0);
      
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("IBM437", mockFile0.getName());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertNotNull(zipArchiveOutputStream0);
      
      ZipArchiveEntry zipArchiveEntry0 = (ZipArchiveEntry)zipArchiveOutputStream0.createArchiveEntry(mockFile0, "@mN]TxE%$#");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/experiment/zNV", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("IBM437", mockFile0.getName());
      assertEquals("/experiment/zNV/IBM437", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, fileChannel0.position());
      assertEquals(0L, fileChannel0.size());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, zipArchiveOutputStream0.getBytesWritten());
      assertEquals(0, zipArchiveOutputStream0.getCount());
      assertTrue(zipArchiveOutputStream0.isSeekable());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(zipArchiveEntry0.isDirectory());
      assertEquals(0, zipArchiveEntry0.getVersionRequired());
      assertEquals("@mN]TxE%$#", zipArchiveEntry0.getName());
      assertFalse(zipArchiveEntry0.isStreamContiguous());
      assertEquals((-1L), zipArchiveEntry0.getCrc());
      assertEquals(0, zipArchiveEntry0.getPlatform());
      assertNull(zipArchiveEntry0.getComment());
      assertEquals(0, zipArchiveEntry0.getUnixMode());
      assertFalse(zipArchiveEntry0.isUnixSymlink());
      assertEquals(0, zipArchiveEntry0.getInternalAttributes());
      assertEquals(0L, zipArchiveEntry0.getExternalAttributes());
      assertEquals((-1L), zipArchiveEntry0.getDataOffset());
      assertEquals(0, zipArchiveEntry0.getVersionMadeBy());
      assertEquals(0L, zipArchiveEntry0.getSize());
      assertEquals(0, zipArchiveEntry0.getRawFlag());
      assertEquals("@mN]TxE%$#", zipArchiveEntry0.toString());
      assertEquals((-1), zipArchiveEntry0.getMethod());
      assertEquals((-1L), zipArchiveEntry0.getCompressedSize());
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
      assertEquals(0, ZipArchiveOutputStream.STORED);
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
      assertEquals(3, ZipArchiveEntry.PLATFORM_UNIX);
      assertEquals(0, ZipArchiveEntry.PLATFORM_FAT);
      assertEquals((-1), ZipArchiveEntry.CRC_UNKNOWN);
      assertNotNull(zipArchiveEntry0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      File file0 = MockFile.createTempFile(") >}b4akaY", "not enaodeable");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      assertEquals(8, zipArchiveEntry0.getMethod());
      assertEquals(50L, file0.length());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.writeZip64CentralDirectory();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      jarArchiveEntry0.setComment("]vH!2QnYQQ?&md|7c{");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      assertFalse(zipArchiveOutputStream0.isSeekable());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_L3{[4;aYH:LzUC");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("_L3{[4;aYH:LzUC");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      File file0 = MockFile.createTempFile(",bh", "/V](DrM`Fy?}Tx", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, pushbackInputStream0);
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("can't read more than eight bytes into a long value");
      jarArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$t7v0w(");
      MockPrintStream mockPrintStream0 = new MockPrintStream("$t7v0w(");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      jarArchiveEntry0.setComment(" instead of ");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment(" >,D9;| ]o]{sG8>[V");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setComment("");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$t7v0w(");
      MockPrintStream mockPrintStream0 = new MockPrintStream("$t7v0w(");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE;
      zipArchiveOutputStream0.setCreateUnicodeExtraFields(zipArchiveOutputStream_UnicodeExtraFieldPolicy0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!H");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("!H");
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[8];
      UnparseableExtraFieldData unparseableExtraFieldData0 = new UnparseableExtraFieldData();
      zipExtraFieldArray0[0] = (ZipExtraField) unparseableExtraFieldData0;
      AsiExtraField asiExtraField0 = new AsiExtraField();
      zipExtraFieldArray0[1] = (ZipExtraField) asiExtraField0;
      X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new X0017_StrongEncryptionHeader();
      zipExtraFieldArray0[2] = (ZipExtraField) x0017_StrongEncryptionHeader0;
      zipExtraFieldArray0[3] = (ZipExtraField) asiExtraField0;
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(612, true, 1021);
      zipExtraFieldArray0[4] = (ZipExtraField) resourceAlignmentExtraField0;
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      zipExtraFieldArray0[5] = (ZipExtraField) x0014_X509Certificates0;
      zipExtraFieldArray0[6] = (ZipExtraField) resourceAlignmentExtraField0;
      ZipEightByteInteger zipEightByteInteger0 = ZipEightByteInteger.ZERO;
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0);
      zipExtraFieldArray0[7] = (ZipExtraField) zip64ExtendedInformationExtraField0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      ZipExtraField[] zipExtraFieldArray0 = new ZipExtraField[2];
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField();
      zipExtraFieldArray0[0] = (ZipExtraField) resourceAlignmentExtraField0;
      X0014_X509Certificates x0014_X509Certificates0 = new X0014_X509Certificates();
      zipExtraFieldArray0[1] = (ZipExtraField) x0014_X509Certificates0;
      jarArchiveEntry0.setExtraFields(zipExtraFieldArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(jarArchiveEntry0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ExtraFieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("VtO07d0a");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VtO07d0a");
      ResourceAlignmentExtraField resourceAlignmentExtraField0 = new ResourceAlignmentExtraField(0, true, 156);
      jarArchiveEntry0.addAsFirstExtraField(resourceAlignmentExtraField0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$t7d0-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("$t7d0-");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      jarArchiveEntry0.setAlignment(8);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.compress.archivers.zip.ZipShort");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("org.apache.commons.compress.archivers.zip.ZipShort");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(zipArchiveOutputStream0, true);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[6];
      mockPrintStream0.format(locale0, "org.apache.commons.compress.archivers.zip.ZipShort", objectArray0);
      assertEquals(0, zipArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Too short content fom CesourceAlignmentExtraField (0xa11e): ");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.flush();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(192);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.finish();
      zipArchiveOutputStream0.close();
      //  // Unstable assertion: assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      //  // Unstable assertion: assertEquals(22, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(pipedOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      // Undeclared exception!
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("%U@QaO\"V'm 2SfydB-Q", "oJJ:AL");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(zipArchiveOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream1.finish();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current entry
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(",$t7d0tPm-(");
      MockPrintStream mockPrintStream0 = new MockPrintStream(",$t7d0tPm-(");
      ZipArchiveOutputStream zipArchiveOutputStream1 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream1.putArchiveEntry(jarArchiveEntry0);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(1);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("q");
      MockPrintStream mockPrintStream0 = new MockPrintStream("q");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      jarArchiveEntry0.setMethod(6);
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(jarArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("t");
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(zipArchiveEntry0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      boolean boolean0 = zipArchiveOutputStream0.canWriteEntryData(dumpArchiveEntry0);
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setLevel((-1));
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(192);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel(163);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: 163
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.setLevel((-2533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid compression level: -2533
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DkB[<.La/9TO");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("DkB[<.La/9TO");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Never;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      jarArchiveEntry0.setSize(4294967295L);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: Zip64RequiredException");
      
      } catch(Zip64RequiredException e) {
         //
         // DkB[<.La/9TO's size exceeds the limit of 4GByte.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ibm437");
      jarArchiveEntry0.setSize(4294967295L);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      MockFile mockFile0 = new MockFile("t");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "'P(0*O3m*KYKf^I");
      zipArchiveEntry0.setMethod(0);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, byteArrayInputStream0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // crc checksum is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$t7d0-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("$t7d0-");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      zipArchiveEntry0.setMethod(0);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // uncompressed size is required for STORED method when not writing to a file
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      MockPrintStream mockPrintStream0 = new MockPrintStream("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setLevel(6);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(8, jarArchiveEntry0.getMethod());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!j2QnYQQ?&md|7c{");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!j2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(138L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      Zip64Mode zip64Mode0 = Zip64Mode.Always;
      zipArchiveOutputStream0.setUseZip64(zip64Mode0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xB8.T-y=n", " Masked: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.finish();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(" Masked: ", true);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(0L, jarArchiveEntry0.getSize());
      assertEquals(186L, fileChannel0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("$t7d0-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("$t7d0-");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.writeCentralFileHeader(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(6);
      try { 
        zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // bad size for entry $t7d0-: 0 instead of 52
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("Negatie longs < -2^31not permitted: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Negatie longs < -2^31not permitted: ");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(12);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(2L, jarArchiveEntry0.getCompressedSize());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!j2QnYQQ?&md|7c{");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!j2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setMethod(0);
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      assertEquals(118L, fileChannel0.size());
      assertEquals(118L, fileChannel0.position());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DkB[<.La/9TO");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("DkB[<.La/9TO");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setSize(0);
      jarArchiveEntry0.setCrc(0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DkB[<.La/9TO");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("DkB[<.La/9TO");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      jarArchiveEntry0.setCrc(0);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.addRawArchiveEntry(jarArchiveEntry0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]vH!2QnYQQ?&md|7c{");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("]vH!2QnYQQ?&md|7c{");
      zipArchiveOutputStream0.putArchiveEntry(jarArchiveEntry0);
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("never");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.close();
      try { 
        zipArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockFile mockFile0 = new MockFile("qiN|NTtjM", "org.apache.commons.compress.archivers.zip.StreamCompressor");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setEncoding("never");
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("never", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zNV", "IBM437");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockFile mockFile0 = new MockFile("zNV", "zNV");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFileOutputStream0);
      zipArchiveOutputStream0.setEncoding("UTF8");
      assertFalse(zipArchiveOutputStream0.isSeekable());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      zipArchiveOutputStream0.setUseLanguageEncodingFlag(false);
      zipArchiveOutputStream0.setEncoding((String) null);
      assertFalse(zipArchiveOutputStream0.isSeekable());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      boolean boolean0 = zipArchiveOutputStream0.isSeekable();
      assertFalse(boolean0);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ZipArchiveOutputStream.UnicodeExtraFieldPolicy zipArchiveOutputStream_UnicodeExtraFieldPolicy0 = ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
      String string0 = zipArchiveOutputStream_UnicodeExtraFieldPolicy0.toString();
      assertEquals("always", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      MockFile mockFile0 = new MockFile("g3<i)w|t^c21d");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "g3<i)w|t^c21d");
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeLocalFileHeader(zipArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockFile mockFile0 = new MockFile("1{Bgx\"UP^^GMcIWX");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setComment("U");
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream((SeekableByteChannel) null);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        zipArchiveOutputStream0.writeOut(byteArray0, (-2147483646), (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xB8.T-y=n", " Masked: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      String string0 = zipArchiveOutputStream0.getEncoding();
      assertEquals("UTF8", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "\u0000");
      ZipArchiveOutputStream zipArchiveOutputStream0 = null;
      try {
        zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(fileChannel0);
      zipArchiveOutputStream0.deflate();
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockFile mockFile0 = new MockFile("wg(y#(64sS9X2", "%U@QaO\"V'm 2SfydB-Q");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockPrintStream0);
      zipArchiveOutputStream0.setFallbackToUTF8(true);
      assertEquals("UTF8", zipArchiveOutputStream0.getEncoding());
  }
}
